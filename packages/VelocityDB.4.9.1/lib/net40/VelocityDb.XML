<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VelocityDb</name>
    </assembly>
    <members>
        <member name="T:VelocityDb.AllObjects`1">
            <summary>
            An object of this type is returned by <see cref="M:VelocityDb.Session.SessionBase.AllObjects``1(System.Boolean,System.Boolean)"/> or <see cref="M:VelocityDb.Database.AllObjects``1(System.Boolean)"/>
            </summary>
            <typeparam name="T">The object type we are looking for in the iteration (enumeration)</typeparam>
        </member>
        <member name="T:VelocityDb.OfType">
            <summary>
            An object of this type is a base class of type returned by <see cref="M:VelocityDb.Session.SessionBase.AllObjects``1(System.Boolean,System.Boolean)"/> or <see cref="M:VelocityDb.Database.AllObjects``1(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VelocityDb.OfType.#ctor(System.Type,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean)">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="session">The active session</param>
            <param name="includeSubClasses">Also return instances of sub classes</param>
            <param name="databasePerType">Assume that persisted objects where made persistent the simple way using <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>. When persisting this way, each object type gets its own <see cref="T:VelocityDb.Database"/> which makes finding these objects easier and faster</param>
        </member>
        <member name="M:VelocityDb.OfType.#ctor(System.Type,VelocityDb.Database,System.Boolean)">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="db">The active db</param>
            <param name="includeSubClasses">Also return instances of sub classes</param>
        </member>
        <member name="M:VelocityDb.OfType.GetEnumerator">
            <summary>
            Enumration of all objects of type T
            </summary>
            <returns>The enumarator of T</returns>
        </member>
        <member name="P:VelocityDb.OfType.Count">
            <summary>
            Get a count of instances of the given type
            </summary>
        </member>
        <member name="M:VelocityDb.AllObjects`1.#ctor(VelocityDb.Session.SessionBase,System.Boolean,System.Boolean)">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="session">The active session</param>
            <param name="includeSubClasses">Also return instances of sub classes</param>
            <param name="databasePerType">Assume that persisted objects where made persistent the simple way using <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>. When persisting this way, each object type gets its own <see cref="T:VelocityDb.Database"/> which makes finding these objects easier and faster</param>
        </member>
        <member name="M:VelocityDb.AllObjects`1.#ctor(VelocityDb.Database,System.Boolean)">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="db">The active db</param>
            <param name="includeSubClasses">Also return instances of sub classes</param>
        </member>
        <member name="M:VelocityDb.AllObjects`1.#ctor(VelocityDb.Collection.BTree.BTreeSet{`0})">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="bTree">A collection</param>
        </member>
        <member name="M:VelocityDb.AllObjects`1.GetEnumerator">
            <summary>
            Enumration of all objects of type T
            </summary>
            <returns>The enumarator of T</returns>
        </member>
        <member name="P:VelocityDb.AllObjects`1.Count">
            <summary>
            Get a count of instances of the given type
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseIterator`1.ElementAt(System.Int64,VelocityDb.AllObjects{`0},System.Int64@,System.Boolean)">
            <summary>
            Gets an item at a certain index
            </summary>
            <param name="index">the item index</param>
            <param name="allObjects">object of type collection</param>
            <param name="atIndex">index reached within this database</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="T:VelocityDb.AllObjectsExtension">
            <summary>
            A few extensions to improve performance of Linq for Objects queries
            </summary>
        </member>
        <member name="M:VelocityDb.AllObjectsExtension.Count``1(VelocityDb.AllObjects{``0})">
            <summary>
            Override to improve performance over IEnumerable LINQ extension
            </summary>
            <typeparam name="T">key type</typeparam>
            <param name="sourceCollection">the collection</param>
            <returns>Size of the collection</returns>
        </member>
        <member name="M:VelocityDb.AllObjectsExtension.ElementAt``1(VelocityDb.AllObjects{``0},System.Int32)">
            <summary>
            Override LINQ for faster acces
            </summary>
            <typeparam name="T">The type of element requested</typeparam>
            <param name="source">The source enumeration</param>
            <param name="index">The index requested</param>
            <returns>Element at requested index</returns>
        </member>
        <member name="T:VelocityDb.AutoIncrement">
            <summary>
            A field attribute that enables a field to get a unique number for each persisted object of a certain type.
            This only works for objects persisted (directly or indirectly) with <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>
            </summary>
        </member>
        <member name="M:VelocityDb.AutoIncrement.#ctor(System.UInt16)">
            <summary>
            Use in class defenition preceeding a field declaration, i.e. [AutoIncrement(1)]
            </summary>
            <param name="start">The requested start number of the auto increment sequence. Defualt is 0 so that first persisted object is assigned number 1, second number 2 and so on.</param>
        </member>
        <member name="P:VelocityDb.AutoIncrement.Start">
            <summary>
            Gets the requested start number of the auto increment sequence
            </summary>
            <value>The <see cref="T:System.UInt64"/> sequence start number.</value>
        </member>
        <member name="T:VelocityDb.AutoPlacement">
            <summary>
            This is the placement manager of objects persisted using <see cref="M:VelocityDb.Session.SessionBase.Persist(System.Object)"/>, 
            it is automaticly created when the first object of a type is persisted. It is the first object in the database of each type mapped Database.
            </summary>
        </member>
        <member name="T:VelocityDb.Placement">
            <summary>
            This class is used when deciding where to place a new object persistently. 
            That is we have a choice of database number, page number and page number. 
            There is other ways to control the placement including <see cref="P:VelocityDb.OptimizedPersistable.ObjectsPerPage"/>, 
            <see cref="P:VelocityDb.OptimizedPersistable.PagesPerDatabase"/>,
            and it is also possible to override <see cref="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})"/>.
            </summary>
        </member>
        <member name="T:VelocityDb.OptimizedPersistable">
            <summary>
            Base class for all persistent capable classes except for embedded objects which do not need to be subclasses of this class.
            </summary>
        </member>
        <member name="T:VelocityDb.IOptimizedPersistable">
            <summary>
            Under construction - check back later, interface not yet usable.
            </summary>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.FlushTransients">
            <summary>
            Flushes batched up objects such as objects added with <see cref="M:VelocityDb.Collection.BTree.BTreeBase`2.AddFast(`0)"/> 
            </summary>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            This function is called when an object has been read from disk and all data members (fields) have been loaded. Override this to provide your own initializtions of transient data.
            </summary>
            <param name="session">The active session managing this object</param>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <summary>
            This function is called when an object has been read from disk before all data members (fields) have been fully loaded. Override this to provide your own initializtions of transient data.
            </summary>
            <param name="session">The active session managing this object</param>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.LoadFields(System.Int32)">
            <summary>
            Loads all fields of an object if they are not already loaded.
            </summary>
            <param name="depth">Set this if you want to limit the depth of the graph loaded by this open.</param>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <summary>
            Persists this object.
            </summary>
            <param name="place">The placement rules to follow when persisting this object</param>
            <param name="session">The session managing this object</param>
            <param name="toPersist">A queue of objects remaining to be persisted. Pass as a parameter to session.Persist</param>
            <param name="persistRefs">If true, objects referenced from this object will also be persisted</param>
            <param name="disableFlush">If true, disables possible flushing of updated pages while persisting this object; otherwise pasge flushing may occur</param>
            <returns>The object id of the persistent object</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <summary>
            Persists this object.
            </summary>
            <param name="placeHint">Use placement as specified by this object type, see <see cref="P:VelocityDb.OptimizedPersistable.PlacementDatabaseNumber"/>, <see cref="P:VelocityDb.OptimizedPersistable.ObjectsPerPage"/> and <see cref="P:VelocityDb.OptimizedPersistable.PagesPerDatabase"/></param>
            <param name="session">The session managing this object</param>
            <param name="persistRefs">Persist any referenced object now or delay until flush/commit</param>
            <param name="disableFlush">Controlls possible flushing of updated pages. Set to true if you want to prevent updated pages from being flushed to disk and setting such pages to a non updated state.</param>
            <returns>The object id of the persistent object</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.ReadMe(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Provides a way to customize how an object is read. Used by a code generator
            </summary>
            <param name="typeVersion">the type version of the object beeing read</param>
            <param name="memberBytes">the raw bytes to read the object from</param>
            <param name="offset">current offset into the raw object bytes</param>
            <param name="session">the active session</param>
            <param name="page">the page of the object</param>
            <param name="useOidShort">is object using short references</param>
            <param name="schema">the active schema</param>
            <param name="openRefs">open references objects</param>
            <param name="toLoadMembers">alist of field members to load</param>
            <param name="graphDepth">current depth in object read</param>
            <param name="graphDepthToLoad">requested max object depth to read</param>
            <param name="primitivesOnly">if true, only load primitive members (not referenced objects)</param>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.WriteMe(VelocityDb.TypeInfo.TypeVersion,System.Boolean,VelocityDb.PageInfo,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Provides a way to customize how an object is written. Used by a code generator
            </summary>
            <param name="typeVersion">the type version of the object beeing written</param>
            <param name="addShapeNumber">add type version number to object bytes</param>
            <param name="pageInfo">the page info for the page to written to</param>
            <param name="owner">owning object</param>
            <param name="session">the active session</param>
            <param name="inFlush">are we in a page flush</param>
            <returns>Bytes representing this object</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.ShallowCopyTo(VelocityDb.Page)">
            <summary>
            Copies current object to a page
            </summary>
            <param name="page">The page to copy to</param>
            <returns>Id of object copy</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.Update(System.Boolean)">
            <summary>
            Call this function before updating any fields of this object
            </summary>
            <param name="disableFlush">Set to true if page flushed are undesired as a side affect of updating this object</param>
            <returns>true if update was successful; otherwise false</returns>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.AllowOtherTypesOnSamePage">
            <summary>
            By default true but override as returning false so that this type of objects isn't sharing pages with other type of objects.
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.Cache">
            <summary>
            By default, the an object cache is determined by a <see cref="T:VelocityDb.Session.SessionBase"/> constructor parameter but certain types of objects may be re opened more frequently than others, for such types override this to return a value.
            Caching objects this way can cause out of date object references to stay active due to lacking code to invalidate a cached object when referenced objects are replaced. 
            We will add this automatic invalidation as soon as possible but for now use causion when caching objects. Caching objects that does not strongly reference other objects is OK to do.
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.FlushIfPageFull">
            <summary>
            By default we flush (write) any updated page we find when looking for an object placement page and the page is considered full (depends on how many objects we permit/page)
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.Id">
            <summary>
            Gets the id of this object. The id is structured as <see cref="T:VelocityDb.Oid"/>
            </summary>
            <value>The id of this object or 0 if object is not persistent</value>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.IsPersistent">
            <summary>
            Gets the persistent state of an object. An object is considered persistent when it has an <see cref="T:VelocityDb.Oid"/>, that is the <see cref="P:VelocityDb.IOptimizedPersistable.Id"/> is not 0
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.IsUpdated">
            <summary>
            Gets the updated state of the object
            </summary>
            <value>true if updated; otherwise false</value>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.LazyLoadFields">
            <summary>
            By defualt all fields are loaded when opening a persistent object but an option is provided to load members on demand (lazy loading).
            </summary> 
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.MaxNumberOfDatabases">
            <summary>
            Possibly restrict instances of to a single Database. By default this property is UInt32.MaxValue but classes like BTreeSetOidShort, BTreeMapShortOid ... override this property to return 1 since short references are restricted to a single Database.
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.ObjectsPerPage">
            <summary>
            A default for number of objects per database page used when persiting objects without an explicit <see cref="T:VelocityDb.Placement"/> object or if persisted using <see cref="M:VelocityDb.IOptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/>
            This happens when objects are persisted by reachability from a persistent object.
            All objects reachable from a persistent object are automaticly made persistent.
            </summary>
            <returns>The requested number of objects per page.</returns>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.FieldsLoaded">
            <summary>
            Gets the field members load state. By default, all members are loaded when a persistent object is opened but if an overrode of <see cref="P:VelocityDb.OptimizedPersistable.LazyLoadFields"/> returns true then the object members are loaded by calling <see cref="M:VelocityDb.OptimizedPersistable.LoadFields(System.Int32)"/>
            </summary>
            <value>true if all members are loaded; otherwise false</value>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.Page">
            <summary>Gets the Page of this object.
            <value>The <see cref="P:VelocityDb.IOptimizedPersistable.Page"/></value>
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.PagesPerDatabase">
            <summary>
            A default for number of objects per database page used when persiting objects without an explicit <see cref="T:VelocityDb.Placement"/> object or if persistet using <see cref="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/>
            This happens when objects are persited by reachability from a persistent object.
            All objects reachable from a persistent object are automaticly made persistent.
            </summary> 
            <returns>The requested number of pages per database</returns>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.PlacementDatabaseNumber">
            <summary>
            Gets the Database Id number to use when placing (persisting) an instance of this class when no other placement directive has been given.
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.Shape">
             <summary>
             The database engine needs this internally, implement it in your class by adding a variable such as
             [NonSerialized]
             TypeVersion shape;
             Your implementation:
             public TypeVersion Shape
            {
              get
              {
                return shape;
              }
              set
              {
                shape = value;
              }
            }
            
             Note, that you do NOT want to persist this varaible, it is only used transiently while the object is in memory. Use [NonSerialized] attribute to prevent it from being persisted.
             </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.WrappedObject">
            <summary>
            Temporary, probably will be removed
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.#ctor(System.UInt64)">
            <summary>
            This constructor can be used in cases where the object id is known but you don't want to open the object, maybe you just want to add this object to a BTreeSet.
            </summary>   
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.#ctor">
            <summary>
            The default constructor can be used to create simple OptimizedPersistable objects.
            </summary>   
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Clone">
            <summary>
            See <see cref="M:System.Object.MemberwiseClone"/>
            </summary>
            <returns>A non persisted clone</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.CompareTo(System.Object)">
            <summary>
            Compares objects using the object <see cref="P:VelocityDb.OptimizedPersistable.Id"/>
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <value>true if the specified Object is equal to the current Object; otherwise, false.</value>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetDataMembers">
            <summary>
            Gets a list of the fields meta data objects
            </summary>
            <returns>List of DataMember</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetFieldValues">
            <summary>
            Returns a list of field values of this object or returns it as an array (if this is an array)
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.OptimizedPersistableFieldValues">
            <summary>
            Gets a list of all field values of the current object that are subclasses of OptimizedPersistable
            </summary>
            <returns>List of OptimizedPersistable</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetHashCode">
            <summary>
            Computes a hash code based on Oid of object.
            Make sure to persist objects before using GetHashCode() or override GetHashCode()
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.OidOf(System.Object)">
            <summary>Gets the Oid (encoded as an UInt64) of a non OptimizedPersistable object or 0 if the object isn't persistent on the same page as this object.</summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.PersistentVersion">
             <summary>
             Gets the page version of a persistent object
             </summary>
            <returns>
             The page version.
            </returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <summary>
            Persists this object. Override in your subclasses when you want fields of your class to be persisted in some special way.
            </summary>
            <param name="place">The placement rules to follow when persisting this object</param>
            <param name="session">The session managing this object</param>
            <param name="toPersist">A queue of objects remaining to be persisted. Pass as a parameter to session.Persist</param>
            <param name="persistRefs">If true, objects referenced from this object will also be persisted</param>
            <param name="disableFlush">If true, disables possible flushing of updated pages while persisting this object; otherwise pasge flushing may occur</param>
            <returns>The object id of this persistent object</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <summary>
            Persists this object.
            </summary>
            <param name="placeHint">Use placement as specified by this object type, see <see cref="P:VelocityDb.OptimizedPersistable.PlacementDatabaseNumber"/>, <see cref="P:VelocityDb.OptimizedPersistable.ObjectsPerPage"/> and <see cref="P:VelocityDb.OptimizedPersistable.PagesPerDatabase"/>For best performance this should be a recently created object that you want the current object to be persisted near.</param>
            <param name="session">The session managing this object</param>
            <param name="persistRefs">Persist any referenced object now or delay until flush/commit</param>
            <param name="disableFlush">Controlls possible flushing of updated pages. Set to true if you want to prevent updated pages from being flushed to disk and setting such pages to a non updated state.</param>
            <returns>The object id of the persistent object</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.FlushTransients">
            <summary>
            Process data in transient fields (if any), do whatever is required to persist such data if needed. By dfefault does nothing.
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.LoadFields(System.Int32)">
            <summary>
            Loads all fields of an object if they are not already loaded.
            </summary>
            <param name="depth">Set this if you want to limit the depth of the graph loaded by this open.</param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Update(System.Boolean)">
            <summary>
            Marks an object as being updated so that object will be written at commit transaction. Call before making object changes!
            </summary>
            <param name="disableFlush">Controlls possible flushing of updated pages. Set to true if you want to prevent updated pages from being flushed to disk and setting such pages to a non updated state.</param>
            <returns>true if update successful</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <summary>
            This function is called when an object has been read from disk before all data members (fields) have been fully loaded. Override this to provide your own initializtions of transient data.
            </summary>
            <param name="session">The active session managing this object</param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            This function is called when an object has been read from disk and all data members (fields) have been loaded. Override this to provide your own initializtions of transient data.
            </summary>
            <param name="session">The active session managing this object</param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. It does not automaticly make referenced objects unpersisted. Best way to do so is to override this virtual function in your own classes.
            </summary>
            <param name="session">The managing session</param>
            <param name="disableFlush">Prevent possible flush of updated pages</param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ReadMeUsingSchemaReflection(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used by code generator. By default objects are read and written using persisted schema information and reflection.
            </summary>
            <param name="typeVersion">Version of a type</param>
            <param name="memberBytes">Bytes containing object to read</param>
            <param name="offset">Offset into memberBytes</param>
            <param name="pObj">The object beeing read in</param>
            <param name="session">The active session</param>
            <param name="page">Page of object beeing read</param>
            <param name="useOidShort">Does object use short object references (32bit)?</param>
            <param name="schema">Schema information</param>
            <param name="openRefs">Shall references from object also be filled in now</param>
            <param name="toLoadMembers">Members remaining to be read</param>
            <param name="graphDepth">Currenr graph depth read</param>
            <param name="graphDepthToLoad">Stop reading at this graph depth</param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.WriteMeUsingSchemaReflection(VelocityDb.TypeInfo.TypeVersion,VelocityDb.IOptimizedPersistable,System.Boolean,VelocityDb.PageInfo,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Used by code generator. This is the default way of writing objects using schema information and .NET reflection info.
            </summary>
            <param name="typeVersion">The version of the type beeing read</param>
            <param name="pObj">The object beeing written</param>
            <param name="addShapeNumber">Shall we include bytes containing the type version of the object?</param>
            <param name="pageInfo">PageInfo for the current page</param>
            <param name="owner">Owner of object beeing written</param>
            <param name="session">The active session</param>
            <param name="inFlush">Is page flushing OK while preparing this object to be written?</param>
            <returns>Bytes of this object</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ReadMe(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used by code generator
            </summary>
            <param name="typeVersion">The version of the type beeing read</param>
            <param name="memberBytes"></param>
            <param name="offset"></param>
            <param name="session"></param>
            <param name="page"></param>
            <param name="useOidShort"></param>
            <param name="schema"></param>
            <param name="openRefs"></param>
            <param name="toLoadMembers"></param>
            <param name="graphDepth"></param>
            <param name="graphDepthToLoad"></param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Write">
            <summary>
            By calling this you force a persisted (has an Id) object to be written to disk (if updated) and indices (if any) to be updated. Other objects on the same page page will also be written.
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.WriteMe(VelocityDb.TypeInfo.TypeVersion,System.Boolean,VelocityDb.PageInfo,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Used by code generator.
            </summary>
            <param name="typeVersion"></param>
            <param name="addShapeNumber"></param>
            <param name="pageInfo"></param>
            <param name="owner"></param>
            <param name="session"></param>
            <param name="inFlush"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ToString">
             <summary>
             Displays class name plus object id
             </summary>
            <returns>
             A <see cref="T:System.String"/> containing class name and object id.
            </returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ToStringDetails(VelocityDb.Session.SessionBase,System.Boolean)">
             <summary>
             Object details as a string
             </summary>
             <param name="session">The session managing this object</param>
             <param name="skipArrays">Indicates if string should contain detailed array data.</param>
            <returns>
             A <see cref="T:System.String"/> containing all details of this object.
            </returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ArrayToString(System.Array,System.Boolean,VelocityDb.Page,System.String)">
             <summary>
             Outputs a string representing an array
             </summary>
             <param name="array">The array to represent as a string</param>
             <param name="isEncodedOidArray">True if Oid is encoded as a UInt32 or UInt64</param>
             <param name="page">The page containing the array</param>
             <param name="prefix">A prefix to use before each array element in the output string</param>
            <returns>
             A <see cref="T:System.String"/> representing the array.
            </returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ListToString(System.Collections.IList,VelocityDb.Page)">
            <summary>
            This is a support function for the VelocityDbBrowser
            </summary>
            <param name="list">A list to output as a string</param>
            <param name="page">The page containing the list</param>
            <returns>A string representing the input list.</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ToStringDetails(VelocityDb.TypeInfo.DataMember,System.Object,VelocityDb.IOptimizedPersistable,VelocityDb.Page,System.Boolean)">
            <summary>
            This is a support function for the VelocityDbBrowser. It converts a field into a string.
            </summary>
            <param name="member">A field in an object</param>
            <param name="obj">The object containing the fhe field</param>
            <param name="pObj">The object containing the fhe field or the owner of the object containing the field</param>
            <param name="page">The page of the object</param>
            <param name="skipArrays">Option to skip arrays of the object</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Open(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Opens a persistent object located in the same Database as this object
            </summary>
            <param name="pageSlot">The OidShort encoded as a UInt32 of the object to open within the same Database as this object</param>
            <param name="update">Open the object for update?</param>
            <param name="inFlush">if true, disallow page flushing while opening the object</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ShallowCopyTo(VelocityDb.Page)">
            <summary>
            Internal use for now
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.UpdateTypeVersion">
            <summary>
            Updates the object and make this object use the latest Type definition for its class. The object now will now adjust for data attrubute changes.
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.DatabaseNumber">
            <summary>
            Gets the database number of this object.
            </summary>
            <value>The database number of this object or 0 if object is not persistent</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Page">
            <summary>Gets the Page of this object.
            <value>The <see cref="P:VelocityDb.OptimizedPersistable.Page"/></value>
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.PageNumber">
            <summary>
            Gets the page number part of the object Oid (Id)
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Id">
            <summary>
            Gets the id of this object. The id is structured as <see cref="P:VelocityDb.OptimizedPersistable.Oid"/>
            </summary>
            <value>The id of this object or 0 if object is not persistent</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.ID">
            <summary>
            Gets the id of this object. The id is structured as <see cref="P:VelocityDb.OptimizedPersistable.Oid"/>
            </summary>
            <value>The id of this object or 0 if object is not persistent</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.IsUpdated">
            <summary>
            Gets the updated state of the object
            </summary>
            <value>true if updated; otherwise false</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.ShortId">
            <summary>
            Gets the short id of this object. The id is structured as <see cref="P:VelocityDb.OptimizedPersistable.OidShort"/>
            </summary>
            <value>The short id of this object or 0 if object is not persistent</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.OidShort">
            <summary>
            Gets the OidShort part of the object Oid
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.ObjectsPerPage">
            <summary>
            A default for number of objects per database page used when persiting objects without an explicit <see cref="T:VelocityDb.Placement"/> object or if persisted using <see cref="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/>
            This happens when objects are persisted by reachability from a persistent object.
            All objects reachable from a persistent object are automaticly made persistent.
            </summary>
            <returns>The requested number of objects per page.</returns>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.PagesPerDatabase">
            <summary>
            A default for number of objects per database page used when persiting objects without an explicit <see cref="T:VelocityDb.Placement"/> object or if persisted using <see cref="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/>
            This happens when objects are persisted by reachability from a persistent object.
            All objects reachable from a persistent object are automaticly made persistent.
            </summary> 
            <returns>The requested number of pages per database</returns>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.AllowOtherTypesOnSamePage">
            <summary>
            Objects can be stored more efficiently if all object types on the page share the same type. By default mixed types are allowed. Override this to return false for types that should not share pages with other types.
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Cache">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.FlushIfPageFull">
            <summary>
            By default we flush (write) any updated page we find when looking for an object placement page and the page is considered full (depends on how many objects we permit/page)
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.LazyLoadFields">
            <summary>
            By defualt all fields are loaded when opening a persistent object but an option is provided to load members on demand (lazy loading).
            </summary> 
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.FieldsLoaded">
            <summary>
            Gets the field members load state. By default, all members are loaded when a persistent object is opened but if an overrode of <see cref="P:VelocityDb.OptimizedPersistable.LazyLoadFields"/> returns true then the object members are loaded by calling <see cref="M:VelocityDb.OptimizedPersistable.LoadFields(System.Int32)"/>
            </summary>
            <value>true if all members are loaded; otherwise false</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.PlacementDatabaseNumber">
            <summary>
            Gets the Database Id number to use when placing (persisting) an instance of this class when no other placement directive has been given.
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.IsPersistent">
            <summary>
            Gets the persistent state of an object. An object is considered persistent when it has an <see cref="P:VelocityDb.OptimizedPersistable.Oid"/>, that is the <see cref="P:VelocityDb.OptimizedPersistable.Id"/> is not 0
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Oid">
            <summary>
            Gets the object identifier represented as an <see cref="P:VelocityDb.OptimizedPersistable.Oid"/>.
            </summary>
            <value>The <see cref="P:VelocityDb.OptimizedPersistable.Oid"/> of the object</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Session">
            <summary>
            Gets the session of this object or null if this object isn't yet persisted.
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.SlotNumber">
            <summary>
            Gets the page number from the object identifier
            </summary>
            <value>the page number of this object</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.MaxNumberOfDatabases">
            <summary>
            Possibly restrict instances of to a single Database. By default this property is UInt32.MaxValue but classes like BTreeSetOidShort, BTreeMapShortOid ... override this property to return 1 since short references are restricted to a single Database.
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Shape">
            <summary>
            Internal use only, see <see cref="P:VelocityDb.IOptimizedPersistable.Shape"/>
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.WrappedObject">
            <summary>
            Objects that are not subclasses of OptimizedPersistable may be wrapped by an OptimizedPersistable, if so this gets the wrapped object or else gets this object.
            </summary>
        </member>
        <member name="F:VelocityDb.Placement.DefaultPlacementDatabaseNumber">
            <summary>
            If no other Database number is selected when persisting an object then this number is choosen.
            </summary>
        </member>
        <member name="F:VelocityDb.Placement.DefaultPlacementPage">
            <summary>
            If no other Page number is selected when persisting an object then this number is choosen.
            </summary>
        </member>
        <member name="M:VelocityDb.Placement.#ctor(System.Boolean,VelocityDb.IOptimizedPersistable,System.UInt16,System.UInt16,System.Boolean,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Placement into same <see cref="T:VelocityDb.Database"/>
            </summary>
            <param name="persistRefs"></param>
            <param name="pObj"></param>
            <param name="objectsPerPage"></param>
            <param name="pagesPerDatabase"></param>
            <param name="tryOtherDatabaseIfLockConflict"></param>
            <param name="maxNumberOfDatabases"></param>
            <param name="allowOtherTypesOnSamePage"></param>
            <param name="flushFullPages"></param>
        </member>
        <member name="M:VelocityDb.Placement.#ctor(System.UInt32,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Creates a Placement used for choosing a place to persist objects
            </summary>
            <param name="db">Database number requested for placement</param>
            <param name="page">Page number requested for placement</param>
            <param name="slot">Slot number requested for placement</param>
            <param name="objectsPerPage">Limit the number of objects per page</param>
            <param name="pagesPerDatabase">Limit the number of pages per database</param>
            <param name="persistRefs">When persisting an object, shall references be persisted at the same time or later when flushing pages to disk</param>
            <param name="tryOtherDatabaseIfLockConflict">Is another Database acceptable</param>
            <param name="maxNumberOfDatabases">Maximum numner of databases to try for placement</param>
            <param name="allowOtherTypesOnSamePage">Is it OK to place object on a page which contains other types</param>
            <param name="flushFullPages">Is it OK toflush encounteted full pages?</param>
        </member>
        <member name="M:VelocityDb.Placement.#ctor(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,VelocityDb.IOptimizedPersistable,System.Boolean,System.UInt32,System.Boolean)">
            <summary>
            Creates a Placement used for choosing a place to persist objects
            </summary>
            <param name="session">The session being used</param>
            <param name="placementProviderObject">If persistent, placement uses thid objects db, page and slot as a atarting point for placements</param>
            <param name="objectToPlace">An object of the type we are going to persist with this placement object</param>
            <param name="persistRefs">Is the placement going to request that referenced objects also gets persisted?</param>
            <param name="maxNumberOfDatabases">Maximum numner of databases to try for placement</param>
            <param name="flushFullPages">Shall a detected full page be flushed if such page is found while persisting an object with this placement</param>
        </member>
        <member name="M:VelocityDb.Placement.IncrementTryDatabaseNumber">
            <summary>
            Incremnts the Database number used when placing (persisting) objects
            </summary>
            <returns>The Database number before incrementing</returns>
        </member>
        <member name="M:VelocityDb.Placement.IncrementTryPageNumber">
            <summary>
            Increments the tryPageNumber by 1
            </summary>
            <returns>The tryPageNumber before the increment</returns>
        </member>
        <member name="M:VelocityDb.Placement.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Placement.TryDatabaseNumber">
            <summary>
            Gets the current Database number to try with first for object placement.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.EndDatabaseNumber">
            <summary>
            The last Database number acceptable for placement
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.IsAutoPlacement">
            <summary>
            Is this an instance of AutoPlacement
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.AllowOtherTypesOnSamePage">
            <summary>
            Gets/sets permission to create multiple types on the same page.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.TryPageNumber">
            <summary>
            Gets/sets the page number to try with first when persisting a new object.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.MaxPagesPerDatabase">
            <summary>
            Gets/sets the limit on the number of pages per database.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.MaxObjectsPerPage">
            <summary>
            Gets/Sets the limit on how many objects to create on a single page.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.TrySlotNumber">
            <summary>
            Gets/sets the page number to try next when persisting an object.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.StartDatabaseNumber">
            <summary>
            The first/original Database number used by this Placement
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.StartPageNumber">
            <summary>
            The first/original Page number used by this Placement
            </summary>
        </member>
        <member name="M:VelocityDb.AutoPlacement.IncrementTryDatabaseNumber">
            <summary>
            Moves to a new Database number used when placing (persisting) objects
            </summary>
            <returns>The Database number before incrementing</returns>
        </member>
        <member name="M:VelocityDb.AutoPlacement.Update(System.Boolean)">
            <summary>
            Update this object but don't update indexes since this object type never is part of an index
            </summary>
            <param name="disableFlush">If true, do not flush pages as a possible side affect</param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.AutoPlacement.Cache">
            <summary>
            We want to cache all AutoPlacement objects (small and frequently used)
            </summary>
        </member>
        <member name="P:VelocityDb.AutoPlacement.Count">
            <summary>
            Get the total number of created objects of this type
            </summary>
        </member>
        <member name="P:VelocityDb.AutoPlacement.Counter">
            <summary>
            Get the total number of created objects of this type
            </summary>
        </member>
        <member name="T:VelocityDb.NoValidVelocityDBLicenseFoundException">
            <summary>
            Exception thrown when trying to add/update database schema and no valid VelocityDB license is found in license database (4.odb).
            </summary>
        </member>
        <member name="T:VelocityDB.LZ4n.LZ4Codec">
            <summary>Unsafe LZ4 codec.</summary>
        </member>
        <member name="F:VelocityDB.LZ4n.LZ4Codec.MEMORY_USAGE">
            <summary>
            Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
            Increasing memory usage improves compression ratio
            Reduced memory usage can improve speed, due to cache effect
            Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
            </summary>
        </member>
        <member name="F:VelocityDB.LZ4n.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
            <summary>
            Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
            This may decrease compression ratio dramatically, but will be faster on incompressible data
            Increasing this value will make the algorithm search more before declaring a segment "incompressible"
            This could improve compression a bit, but will be slower on incompressible data
            The default value (6) is recommended
            </summary>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Gets maximum the length of the output.</summary>
            <param name="inputLength">Length of the input.</param>
            <returns>Maximum number of bytes needed for compressed buffer.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.BlockCopy(System.Byte*,System.Byte*,System.Int32)">
            <summary>Copies block of memory.</summary>
            <param name="src">The source.</param>
            <param name="dst">The destination.</param>
            <param name="len">The length (in bytes).</param>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.BlockFill(System.Byte*,System.Int32,System.Byte)">
            <summary>Copies block of memory.</summary>
            <param name="dst">The destination.</param>
            <param name="len">The length (in bytes).</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64(System.Byte*,System.Byte*,System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Decode64(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decode64s the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decode64s the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
        <member name="M:VelocityDb.DatabaseIterator.ElementAt(System.Int64,VelocityDb.OfType,System.Int64@,System.Boolean)">
            <summary>
            Gets an item at a certain index
            </summary>
            <param name="index">the item index</param>
            <param name="allObjects">object of type collection</param>
            <param name="atIndex">index reached within this database</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="T:VelocityDb.OfTypeExtension">
            <summary>
            A few extensions to improve performance of Linq for Objects queries
            </summary>
        </member>
        <member name="M:VelocityDb.OfTypeExtension.Count``1(VelocityDb.OfType)">
            <summary>
            Override to improve performance over IEnumerable LINQ extension
            </summary>
            <typeparam name="T">key type</typeparam>
            <param name="sourceCollection">the collection</param>
            <returns>Size of the collection</returns>
        </member>
        <member name="M:VelocityDb.OfTypeExtension.ElementAt(VelocityDb.OfType,System.Int32)">
            <summary>
            Override LINQ for faster acces
            </summary>
            <param name="source">The source enumeration</param>
            <param name="index">The index requested</param>
            <returns>Element at requested index</returns>
        </member>
        <member name="T:VelocityDB.Server.IClaimStrategy">
            <summary>
            Strategy contract for claiming the sequence of events in the <see cref="T:VelocityDB.Server.Sequencer"/> by event publishers.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.IClaimStrategy.HasAvailableCapacity(System.Int32,VelocityDB.Server.Sequence[])">
            <summary>
            Is there available capacity in the buffer for the requested sequence.
            </summary>
            <param name="availableCapacity">availableCapacity remaining in the buffer.</param>
            <param name="dependentSequences">dependentSequences to be checked for range.</param>
            <returns>true if the buffer has capacity for the requested sequence.</returns>
        </member>
        <member name="M:VelocityDB.Server.IClaimStrategy.IncrementAndGet(VelocityDB.Server.Sequence[])">
            <summary>
            Claim the next sequence in the <see cref="T:VelocityDB.Server.Sequencer"/>
            The caller should be held up until the claimed sequence is available by tracking the dependentSequences.
            </summary>
            <param name="dependentSequences">dependentSequences to be checked for range.</param>
            <returns>the index to be used for the publishing.</returns>
        </member>
        <member name="M:VelocityDB.Server.IClaimStrategy.IncrementAndGet(System.Int32,VelocityDB.Server.Sequence[])">
            <summary>
             Increment sequence by a delta and get the result.
             The caller should be held up until the claimed sequence batch is available by tracking the dependentSequences.
            </summary>
            <param name="delta">delta to increment by.</param>
             <param name="dependentSequences">dependentSequences to be checked for range.</param>
            <returns>the result after incrementing.</returns>
        </member>
        <member name="M:VelocityDB.Server.IClaimStrategy.SetSequence(System.Int64,VelocityDB.Server.Sequence[])">
            <summary>
            Set the current sequence value for claiming an event in the <see cref="T:VelocityDB.Server.Sequencer"/>
            The caller should be held up until the claimed sequence is available by tracking the dependentSequences.
            </summary>
            <param name="sequence">sequence to be set as the current value.</param>
            <param name="dependentSequences">dependentSequences to be checked for range.</param>
        </member>
        <member name="M:VelocityDB.Server.IClaimStrategy.SerialisePublishing(System.Int64,VelocityDB.Server.Sequence,System.Int64)">
            <summary>
             Serialise publishers in sequence and set cursor to latest available sequence.
            </summary>
            <param name="sequence">sequence to be applied</param>
            <param name="cursor">cursor to serialise against.</param>
            <param name="batchSize">batchSize of the sequence.</param>
        </member>
        <member name="M:VelocityDB.Server.IClaimStrategy.CheckAndIncrement(System.Int32,System.Int32,VelocityDB.Server.Sequence[])">
            <summary>
            Atomically checks the available capacity of the ring buffer and claims the next sequence.  Will
            throw InsufficientCapacityException if the capacity not available.
            </summary>
            <param name="availableCapacity">the capacity that should be available before claiming the next slot</param>
            <param name="delta">the number of slots to claim</param>
            <param name="dependentSequences">the set of sequences to check to ensure capacity is available</param>
            <returns>the slot after incrementing</returns>
        </member>
        <member name="P:VelocityDB.Server.IClaimStrategy.BufferSize">
            <summary>
            Get the size of the data structure used to buffer events.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.IClaimStrategy.Sequence">
            <summary>
            Get the current claimed sequence.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.AbstractMultiThreadedClaimStrategy.HasAvailableCapacity(System.Int32,VelocityDB.Server.Sequence[])">
            <summary>
            Is there available capacity in the buffer for the requested sequence.
            </summary>
            <param name="availableCapacity">availableCapacity remaining in the buffer.</param>
            <param name="dependentSequences">dependentSequences to be checked for range.</param>
            <returns>true if the buffer has capacity for the requested sequence.</returns>
        </member>
        <member name="M:VelocityDB.Server.AbstractMultiThreadedClaimStrategy.IncrementAndGet(VelocityDB.Server.Sequence[])">
            <summary>
            Claim the next sequence in the <see cref="T:VelocityDB.Server.Sequencer"/>
            The caller should be held up until the claimed sequence is available by tracking the dependentSequences.
            </summary>
            <param name="dependentSequences">dependentSequences to be checked for range.</param>
            <returns>the index to be used for the publishing.</returns>
        </member>
        <member name="M:VelocityDB.Server.AbstractMultiThreadedClaimStrategy.IncrementAndGet(System.Int32,VelocityDB.Server.Sequence[])">
            <summary>
             Increment sequence by a delta and get the result.
             The caller should be held up until the claimed sequence batch is available by tracking the dependentSequences.
            </summary>
            <param name="delta">delta to increment by.</param>
             <param name="dependentSequences">dependentSequences to be checked for range.</param>
            <returns>the result after incrementing.</returns>
        </member>
        <member name="M:VelocityDB.Server.AbstractMultiThreadedClaimStrategy.SetSequence(System.Int64,VelocityDB.Server.Sequence[])">
            <summary>
            Set the current sequence value for claiming an event in the <see cref="T:VelocityDB.Server.Sequencer"/>
            The caller should be held up until the claimed sequence is available by tracking the dependentSequences.
            </summary>
            <param name="sequence">sequence to be set as the current value.</param>
            <param name="dependentSequences">dependentSequences to be checked for range.</param>
        </member>
        <member name="P:VelocityDB.Server.AbstractMultiThreadedClaimStrategy.BufferSize">
            <summary>
            Get the size of the data structure used to buffer events.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.AbstractMultiThreadedClaimStrategy.Sequence">
            <summary>
            Get the current claimed sequence.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.AlertException">
            <summary>
            Used to alert <see cref="T:VelocityDB.Server.IEventProcessor"/>s waiting at a <see cref="T:VelocityDB.Server.ISequenceBarrier"/> of status changes.
            </summary>
        </member>
        <member name="F:VelocityDB.Server.AlertException.Instance">
            <summary>
            Pre-allocated exception to avoid garbage generation
            </summary>
        </member>
        <member name="M:VelocityDB.Server.AlertException.#ctor">
            <summary>
            Private constructor so only a single instance exists.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.BatchDescriptor">
            <summary>
            Used to record the batch of sequences claimed in a <see cref="T:VelocityDB.Server.Sequencer"/>.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.BatchDescriptor.#ctor(System.Int32)">
            <summary>
             Create a holder for tracking a batch of claimed sequences in a <see cref="T:VelocityDB.Server.Sequencer"/>
            </summary>
            <param name="size">size of the batch to claim</param>
        </member>
        <member name="P:VelocityDB.Server.BatchDescriptor.Start">
            <summary>
            Get the start sequence number of the batch.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.BatchDescriptor.Size">
            <summary>
            Get the size of the batch.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.BatchDescriptor.End">
            <summary>
             Get the end sequence number of the batch
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BlockingQueue`1">
            <summary>
            Implements a thread safe queue that blocks if attempting to read when 
            empty or write when full.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BlockingQueue`1.#ctor">
            <summary>
            Constructs a new queue with a capacity of int.MaxValue.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Constructs a new queue with a specific capacity.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Writes an item onto the queue. If the queue has reached capacity, this
            operation will block.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BlockingQueue`1.Dequeue">
            <summary>
            Reads an item off the queue. If there are no items on the queue, this
            operation will block.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BlockingQueue`1.IsEmpty">
            <summary>
            Check if any activity is ongoing
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BlockingQueue`1.QueueLength">
            <summary>
            Check if any activity is ongoing
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeByteArray">
            <summary>
            Wrapper object for a byte[] of data for comparing objects within a BTreeSet. Wrapper is used so that this data can be placed on a seperate <see cref="T:VelocityDb.Page"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeByteArray.Cache">
            <summary>
            We do want to cache this kind of object since they are likely to be frequently used.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeByteArray.ObjectsPerPage">
            <summary>
            Place this type of of object on its own page
            </summary>
            <returns>
            The default maximum number of objects per page
            </returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeByteArray.PagesPerDatabase">
            <summary>
            Use the max limit for this type
            </summary>
            <returns>The choosen limit</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeByteArray.AllowOtherTypesOnSamePage">
            <summary>
            We only want this type of object on any page containing this type so don't use pages with other type of objects when placing an object of this type
            </summary>
        </member>
        <member name="T:VelocityDb.Database">
            <summary>Represents a Database which corresponds to file system file.
            </summary>
        </member>
        <member name="M:VelocityDb.Database.#ctor(VelocityDb.Session.SessionBase)">
            <summary> 
            <param name="session">The session managing this object.</param>
            This special constructor is provided so that VelocityDb can instantiate the object after reading it from disk.  
            This is also the place to initialize transient variables of the object.
            </summary>
        </member>
        <member name="M:VelocityDb.Database.AllObjects``1(System.Boolean)">
            <summary>
            Gets an object used for enumerating all objects in this Database
            </summary>
            <typeparam name="T">The type of object we are looking for</typeparam>
            <param name="includeSubClasses">Also return instances of sub classes</param>
            <returns>The enumeration wrapper object</returns>
        </member>
        <member name="M:VelocityDb.Database.OfType(System.Type,System.Boolean)">
            <summary>
            Gets an object used for enumerating all objects in this Database."/&gt;
            </summary>
            <param name="type">Type to look for</param>
            <param name="includeSubClasses">Also return instances of sub classes</param>
            <returns>The enumeration wrapper <see cref="M:VelocityDb.Database.OfType(System.Type,System.Boolean)"/>object</returns>
        </member>
        <member name="M:VelocityDb.Database.Bytes">
            <summary>
            Avoid using this one for now, internal use.
            </summary>
            <returns>The bytes of the Database</returns>
        </member>
        <member name="M:VelocityDb.Database.CloneAs(System.UInt32)">
            <summary>
            Any Database that only uses OidShort references can be cloned without changing any of the internals of the Databse. This function simply copies the Database file.
            It is the user's responsibility to know that only OidShort references are used within the Database or else such references will still keep the opriginal Database number.
            </summary>
            <param name="otherAvaialbleDatabaseNumber">The desired Id of the Database clone</param>
            <returns>The Database clone</returns>
        </member>
        <member name="M:VelocityDb.Database.GetEnumerator">
             <summary>
             Gets an enumerable sequence of all the pages in this database.
             </summary>
            <returns>Enumaration of pages in a Database</returns>
        </member>
        <member name="M:VelocityDb.Database.Close">
            <summary>
            Closes a
            </summary>
        </member>
        <member name="M:VelocityDb.Database.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Database.Update(System.Boolean)">
            <summary>
            Update this object but don't update indexes since this object type never is part of an index
            </summary>
            <param name="disableFlush">If true, do not flush pages as a possible side affect</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Database.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            Sets up some transient data fields after a database has been read from disk
            </summary>
            <param name="session">The session managing this object.</param>
        </member>
        <member name="M:VelocityDb.Database.ToString">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Database.AllowOtherTypesOnSamePage">
            <summary>
            We want to be sure that the object representing a Database can share its page with other objects so override AllowOtherTypesOnSamePage and return true.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.CachedVerified">
            <summary>
            Setting this property to false will trigger a comparison of the cached version of the Database with the on disk version.
            Each new transaction also sets this propery to false for all cached databases.
            You may alternativly use the session API ForceDatabaseCacheValidation() to trigger validation of all cached databases.
            Setting it to false when the Database has been updated in the current transaction is ignored.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.FileInfo">
            <summary>
            The path of the Database file, not set for ServerClientSession.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.IsDeleted">
            <summary>
            Gets info about this Database about to be deleted or not.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.IsLocal">
             <summary>
             Gets info about this Database beeing on the local host or not.
             </summary>
            <returns>
            <c>true</c> if thia Database is located on the local host; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:VelocityDb.Database.IsNew">
            <summary>
             Indicates if database was created in the current transactionNumber 
            </summary>
        </member>
        <member name="P:VelocityDb.Database.Name">
            <summary>
            Optional name associated with a Database
            </summary>
        </member>
        <member name="P:VelocityDb.Database.NumberOfPages">
            <summary>
             Indicates how many pages this database contains.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.HighestPageNumber">
            <summary>
             Indicates the highest tryPageNumber number currently in use for this database.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.Location">
            <summary>
            The DatabaseLocation of this Database
            </summary>
        </member>
        <member name="P:VelocityDb.Database.Session">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.DatabaseLocation">
            <summary>
            Represents a host and a directory in which a range of databases are stored. The range is a database number range.
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.#ctor(System.String,System.UInt32,System.UInt32,VelocityDb.Session.SessionBase,VelocityDb.PageInfo.compressionKind,VelocityDb.PageInfo.encryptionKind,System.Boolean,VelocityDb.DatabaseLocation)">
            <summary>
            Creates a transient Database location. A transient DatabaseLocation is made persistent by <see cref="M:VelocityDb.Session.SessionBase.NewLocation(VelocityDb.DatabaseLocation)"/>
            </summary>
            <param name="hostAndDir"></param>
            <param name="dbStartNum"></param>
            <param name="dbEndNum"></param>
            <param name="session"></param>
            <param name="compressPages"></param>
            <param name="pageEncryption"></param>
            <param name="isAbackupLocation"></param>
            <param name="backupOfOrForLocation"></param>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.#ctor(System.String,System.String,System.UInt32,System.UInt32,VelocityDb.Session.SessionBase)">
            <summary>
            Creates a transient Database location. A transient DatabaseLocation is made persistent by <see cref="M:VelocityDb.Session.SessionBase.NewLocation(VelocityDb.DatabaseLocation)"/>
            </summary>
            <param name="inHost">Hostname of the computer with the DatabaseLocation directory.</param>
            <param name="dir">The full path of the directory</param>
            <param name="dbStartNum">The first Database Id number for this location</param>
            <param name="dbEndNum">The last Database Id number for this location.</param>
            <param name="session">The active session used for creating the location.</param>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.#ctor(System.String,System.String,System.UInt32,System.UInt32,VelocityDb.Session.SessionBase,VelocityDb.PageInfo.compressionKind,VelocityDb.PageInfo.encryptionKind,System.Boolean,VelocityDb.DatabaseLocation)">
            <summary>
            Creates a transient Database location. A transient DatabaseLocation is made persistent by <see cref="M:VelocityDb.Session.SessionBase.NewLocation(VelocityDb.DatabaseLocation)"/>
            </summary>
            <param name="inHost">Hostname of the computer with the DatabaseLocation directory.</param>
            <param name="dir">The full path of the directory</param>
            <param name="dbStartNum">The first Database Id number for this location</param>
            <param name="dbEndNum">The last Database Id number for this location.</param>
            <param name="session">The active session used for creating the location.</param>
            <param name="compressPages">Compress Database pages in this location?</param>
            <param name="pageEncryption">Specify what kind of Page encryption to use (if any)</param>
            <param name="isAbackupLocation">Is this location a backup location for another location?</param>
            <param name="backupOfOrForLocation">The other location being backed up or the location containg the backups</param>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.ContainsDatabase(System.UInt32)">
             <summary>
             Check if this location contains a particular <see cref="T:VelocityDb.Database"/>
             </summary>
             <param name="dbNum">The database number to look for</param>
            <returns>
            <c>true</c> if the location contains this database; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.ContainsNewDatabase(System.UInt32)">
             <summary>
             Check if this location contains a particular new database (not yet committed) <see cref="T:VelocityDb.Database"/>
             </summary>
             <param name="dbNum">The database number to look for</param>
            <returns>
            <c>true</c> if the location contains this new uncommitted database; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.DatabasePath(System.UInt32)">
             <summary>
             Get the full path to a <see cref="T:VelocityDb.Database"/>
             </summary>
             <param name="dbNum">The database number to look for</param>
            <returns>
             A <see cref="T:System.String"/> containing the full <see cref="T:VelocityDb.Database"/> path.
            </returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.DatabaseLocation.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            Sets the desKey field for desEncrypted locations by reading .des file in Environment.SpecialFolder.MyDocuments
            </summary>
            <param name="session">The active session</param>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.GetEnumerator">
            <summary>
            Enumerates all Databases of this location
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.CompareTo(System.Object)">
            <summary>
            The defualt compare of two DatabaseLocation is by host name and directory
            </summary>
            <param name="obj">The location to compare with</param>
            <returns>-1 if this location is less than the other, 0 if equal, otherwise 1</returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.Update(System.Boolean)">
            <summary>
            Update this object but don't update indexes since this object type never is part of an index
            </summary>
            <param name="disableFlush">If true, do not flush pages as a possible side affect</param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.DatabaseLocation.BackupOfOrForLocation">
            <summary>Gets a linked DatabaseLocation that is either backup of location or is the location being backup up which is decided by <see cref="P:VelocityDb.DatabaseLocation.IsBackupLocation"/></summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.CompressPages">
             <summary>
             Gets page compression info
             </summary>
            <returns>
            <c>true</c> if the databases in this location uses compression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.DesKey">
            <summary>
            Gets the Des encryption key from a .des file in user Documents folder. (Environment.SpecialFolder.MyDocuments)
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.DirectoryPath">
            <summary>
            Gets the full path to the directory hosting databases
            </summary>
            <value>The path as a string</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.EndDatabaseNumber">
            <summary>
            Gets or sets the last database number within the range of databases for this location
            </summary>
            <value>The last database number within the range of databases for this location</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.HostName">
            <summary>
            Gets the host name of this database location
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.IsBackupLocation">
            <summary>
            Tells if this is a location used for backing up databases.
            </summary>
            <value>true if it is this location is used for backups; otherwise false.</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.PageEncryption">
            <summary>
            Gets the encyption kind attribute.
            </summary>
            <value>The <see cref="T:VelocityDb.PageInfo.encryptionKind"/> used in this location</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.StartDatabaseNumber">
            <summary>
            Gets and sets the start of the range of <see cref="T:VelocityDb.Database"/> numbers for this location.
            </summary>
            <value>The first database number within the range of databases for this location</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.Cache">
            <summary>
            We do want to cache this kind of object since they are likly to be frequently used.
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.IsLocal">
             <summary>
             Gets info about this location beeing on the local host or not.
             </summary>
            <returns>
            <c>true</c> if the location is located on the local host; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.PlacementDatabaseNumber">
            <summary>
            Hint about where to persist DatabaseLocation
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.RsaPrivateXmlKey">
            <summary>
            The rsaPrivateXmlKey data field is not persisted but can be set and read with this property
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.RsaPublicXmlKey">
            <summary>
            The rsaPublicXmlKey data field is not persisted but can be set and read with this property
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.RsaSignature">
            <summary>
            The rsaSignature data field is not persisted but can be set and read with this property
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.Session">
            <summary>
            Gets the session managing this object
            </summary>
        </member>
        <member name="T:VelocityDb.DatabaseLocations">
            <summary>
            Maintains collections of all existing <see cref="T:VelocityDb.DatabaseLocation"/>s.
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocations.Default">
            <summary>
            Returns the <see cref="T:VelocityDb.DatabaseLocation"/> of the startup/system Databases.
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocations.LocationForDb(System.UInt32)">
            <summary>
            Returns the <see cref="T:VelocityDb.DatabaseLocation"/> for which a Database belongs to.
            <param name="dbNum">The Database number to lookup location for</param>
            <returns>The looked up <see cref="T:VelocityDb.DatabaseLocation"/></returns>
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocations.LocateDb(System.UInt32)">
            <summary>
            Returns the <see cref="T:VelocityDb.DatabaseLocation"/> for which a Database exists in.
            <param name="dbNum">The Database number to lookup location for</param>
            <returns>The looked up <see cref="T:VelocityDb.DatabaseLocation"/> or null if the Database does not exist</returns>
            </summary>    
        </member>
        <member name="M:VelocityDb.DatabaseLocations.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.DatabaseLocations.GetEnumerator">
            <summary>
            Enumerates all  <see cref="T:VelocityDb.DatabaseLocation"/>s
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocations.Update(System.Boolean)">
            <summary>
            Update this object but don't update indexes since this object type never is part of an index
            </summary>
            <param name="disableFlush">If true, do not flush pages as a possible side affect</param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.DatabaseLocations.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.TypeInfo.DataMember">
            <summary>
            Info about a data Field of a persistent object
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.GetMemberValue(System.Object)">
            <summary>
            Gets the value of a member within a specified object
            </summary>
            <param name="obj">The object containing the field</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.SetMemberValue(System.Object,System.Object)">
            <summary>
            Sets the value of a field within an object
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.DecodeToString(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Used by code generator.
            </summary>
            <param name="member">Bytes for an object field</param>
            <param name="offset">Offset into bytes</param>
            <param name="numberOfBytes">Length of field</param>
            <returns>A string representing the field value</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.DecodeToArray(System.Byte[],System.Type,System.Int32@,VelocityDb.IOptimizedPersistable,VelocityDb.Page,System.Boolean,System.Boolean,VelocityDb.TypeInfo.Schema,VelocityDb.Session.SessionBase,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used by code generator for reading objects.
            </summary>
            <param name="memberBytes">Bytes of the object to be read</param>
            <param name="type"></param>
            <param name="offset"></param>
            <param name="o"></param>
            <param name="page"></param>
            <param name="useOidShort"></param>
            <param name="openRefs"></param>
            <param name="schema"></param>
            <param name="session">The active session to use</param>
            <param name="toLoadMembers"></param>
            <param name="graphDepth"></param>
            <param name="graphDepthToLoad"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            Sets up some transient fields
            </summary>
            <param name="session">The session managing this object.</param>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.isNull(System.Byte[],System.Int32)">
            <summary>
            Determines if given bytes represents null
            </summary>
            <param name="memberBytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.isShortOidNull(System.Byte[],System.Int32)">
            <summary>
            Determines if given bytes represent a null short reference
            </summary>
            <param name="memberBytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.GetTypeFromAnyAssemblyVersion(System.String)">
            <summary>
            Load type using <see cref="M:System.Type.GetType(System.String)"/>, and if fails, 
            attempt to load same type from an assembly by assembly name, 
            without specifying assembly version or any other part of the signature
            </summary>
            <param name="typeName">
            The assembly-qualified name of the type to get.
            See System.Type.AssemblyQualifiedName.
            If the type is in the currently executing assembly or in Mscorlib.dll, it 
            is sufficient to supply the type name qualified by its namespace.
            </param>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.StringToType(System.String,VelocityDb.Session.SessionBase,System.Boolean@)">
            <summary>
            Used by code generator.
            </summary>
            <param name="typeAsString"></param>
            <param name="session"></param>
            <param name="typeUpdated"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.TypeToString(System.Type)">
            <summary>
            Converts a type to a string the way VelocityDB represents it internally
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.ToString">
            <summary>
            Override to provide more internal info in browser
            </summary>
            <returns> "DataMember " + fieldName + " " + Oid.AsString(id)</returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.Field">
            <summary>
            The managed field
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.FieldName">
            <summary>
            Name of managed field
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.HasId">
            <summary>
            Does this field have an Oid?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.WeakIOptimizedPersistableReference">
            <summary>
            Is this field a VelocityDb.WeakIOptimizedPersistableReference
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.GetTypeCode">
            <summary>
            Get the type code for a field
            </summary>
        </member>
        <member name="M:VelocityDb.FreeSpace.CompareTo(System.Object)">
            <summary>
            Compares objects using the object <see cref="P:VelocityDb.OptimizedPersistable.Id"/>
            </summary>
        </member>
        <member name="M:VelocityDb.FreeSpace.ToString">
             <summary>
             Displays class name plus object id
             </summary>
            <returns>
             A <see cref="T:System.String"/> containing class name, offset and size
            </returns>
        </member>
        <member name="T:VelocityDb.License">
            <summary>
            Contains a list of possible license attributes for licensing VelocityDb class library and server
            </summary>
        </member>
        <member name="F:VelocityDb.License.PlaceInDatabase">
            <summary>
            Hint about a Database location for this type of object.
            </summary>
        </member>
        <member name="F:VelocityDb.License.LicenseCheckDatabase">
            <summary>
            The Database number of the database containg a VelocityDb licence(s)
            </summary>
        </member>
        <member name="M:VelocityDb.License.#ctor">
            <summary>
            Creates a new unrestricted license
            </summary>
        </member>
        <member name="M:VelocityDb.License.#ctor(System.String,System.UInt32,System.Int32)">
            <summary>
            Creates a new restricted license
            </summary>
            <param name="forHostName">Usage valid on this host only</param>
            <param name="forMaxNumberOfClients">Maximum number of server clients for which license is valid</param>
            <param name="validForHowManyDays">Restricts usgage to this number of days from now</param>
        </member>
        <member name="M:VelocityDb.License.#ctor(System.String,System.UInt32,System.String,System.String,System.String,System.UInt32,System.DateTime,System.Int32,System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Creates a new restricted license
            </summary>
            <param name="customer">A string identifying the customer owning the license</param>
            <param name="customerId">The OidShort of the customer</param>
            <param name="forUserName">Usage valid on this user name</param>
            <param name="forHostName">Usage valid on this host only</param>
            <param name="forDomainName">Usage valid on this domain only</param>
            <param name="forMaxNumberOfClients">Maximum number of server clients for which license is valid</param>
            <param name="expireDate">License expiration time</param>
            <param name="versionMajor">Usage valid up to including this major version</param>
            <param name="versionMinor">Usage valid up to including this minor version</param>
            <param name="processorCount">Usage valid up to this number of processors</param>
            <param name="dateTimeCreated">DateTime of when license was originally created</param>
        </member>
        <member name="P:VelocityDb.License.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.License.DomainName">
            <summary>
            Gets the restricted domain name
            </summary>
        </member>
        <member name="P:VelocityDb.License.HostName">
            <summary>
            Gets the restricted host name
            </summary>
        </member>
        <member name="P:VelocityDb.License.DateTimeCreated">
            <summary>
            Gets the time of license creation.
            </summary>
        </member>
        <member name="P:VelocityDb.License.ExpireDate">
            <summary>
            Gets expire time.
            </summary>
        </member>
        <member name="P:VelocityDb.License.MaxNumberOfClients">
            <summary>
            Gets the maximum number of Server clients permitted by this license
            </summary>
        </member>
        <member name="P:VelocityDb.License.ObjectsPerPage">
            <summary>
            Store one License per Page
            </summary>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.License.ProcessorCount">
            <summary>
            Gets/sets maximum number of processors for which license is valid.
            </summary>
        </member>
        <member name="P:VelocityDb.License.UserName">
            <summary>
            Gets the user name restriction
            </summary>
        </member>
        <member name="P:VelocityDb.License.PlacementDatabaseNumber">
            <summary>
            Gets the preffered Database number for licenses
            </summary>
        </member>
        <member name="P:VelocityDb.License.MajorVersion">
            <summary>
            Gets/set sthe major version asttribute of a license
            </summary>
        </member>
        <member name="P:VelocityDb.License.MinorVersion">
            <summary>
            Gets/set sthe minor version asttribute of a license
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.Schema">
            <summary>
            Holds information about persistently stored types. Used internally by VelocityDb.
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.GetTypeVersion(System.UInt32,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Opens a <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> object
            </summary>
            <param name="pageSlot">Page and slot of <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> object</param>
            <param name="session">The active session</param>
            <param name="usePersistent">Use persisted boot up type or transient one</param>
            <returns>A type version</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.RegisterClass(System.Type,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Register a type in the persistent schema
            </summary>
            <param name="type">A type to register</param>
            <param name="session">The active session</param>
            <param name="inFlush">Set to false if you want to avoid page flushing as a side affect</param>
            <returns>An existing <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> or a new one</returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.Schema.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.TypeInfo.Schema.Cache">
            <summary>
            Do cache CacheEnum.Yes
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.TypeVersion">
            <summary>
            Contains info about a version of a <see cref="P:VelocityDb.TypeInfo.TypeVersion.VelocityDbType"/>. The info is used when reading/writing an object of the 
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.LoadMembers(VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Loads member fields from persistent storage
            </summary>
            <param name="toLoad">Object to load fields for</param>
            <param name="schema">The current schema</param>
            <param name="toLoadMembers">To be loaded fields list</param>
            <param name="graphDepth">Current graph depth loaded</param>
            <param name="graphDepthToLoad">Max graph depth to load fields for</param>
            <param name="session">The active session</param>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.IsFixedSize">
            <summary>
            A type is fixed size if it only has fixed size fields
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.IsString">
            <summary>
            Is this schema for type System.String ?
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.VelocityDbType">
            <summary>
            Contains persistent info for a <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeInternalBase`2">
            <summary>
            Represents a collection of keys that is maintained in sorted order. Each key has an associated value. A persistent BTree references its contained objects by Oid instead of direct object references.
            This way, we will only open the referenced objects on demand which reduces memory usage and initial BTree load time. Exceptions are ValueType keys and values.
            </summary>
            <typeparam name="Key">The key type of this collection</typeparam>  
            <typeparam name="Value">The value type of this collection</typeparam>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeNode">
            <summary>
            A BTree consists of a tree of nodes. Each BTree node has this class a base class.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeNode.#ctor">
            <summary>
            Default constructor used when creating BTree nodes
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeInternalBase`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeInternalBase`2.Cache">
            <summary>
            We do want to cache this kind of object since they are likly to be frequently used.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeInternalBase`2.NodeSize">
            <summary>
            Gets size of node (how many child nodes this node has)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeafBase`2.FlushIfPageFull">
            <summary>
            We don't want to flush other BTreeLeaf pages while looking for a placement page
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeMap`2">
            <summary>
            Represents a collection of keys that is maintained in sorted order. Each key has an associated value. A persistent BTree references its contained objects by Oid instead of direct object references.
            This way, we will only open the referenced objects on demand which reduces memory usage and initial BTree load time. Exceptions are ValueType keys and values.
            </summary>
            <typeparam name="Key">The key type of objects in this BTreeMap</typeparam>  
            <typeparam name="Value">The value type of objects in this BTreeMap</typeparam>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeMapBase`2">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeBase`2">
            <summary>
            Represents a collection of objects that is maintained in sorted order.
            </summary>
            <typeparam name="Key">The type of key objects in this BTree</typeparam>
            <typeparam name="Value">The type of value objects in a BTreeMap or BTreeMapOidShort</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.#ctor(VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Creates a new BTreeSet
            </summary>
            <param name="session">The session managing this object.</param>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
            <param name="isMap">True if collection is a map</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.AddToIndex(VelocityDb.IOptimizedPersistable)">
            <summary>
            Internal use only (need to be public due to obfuscation)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.FlushTransients">
            <summary>
            Adds all queued up to be added objects after presorting them transiently
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.RemoveFromIndex(VelocityDb.IOptimizedPersistable)">
            <summary>
            Internal use only (need to be public due to obfuscation)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.InitNew(VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="session"></param>
            <param name="maxEntriesPerNode"></param>
            <param name="comparisonArraySize"></param>
            <param name="comparisonArrayIsCompleteKey"></param>
            <param name="isMap"></param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.AddFast(`0)">
            <summary>
            Adds an element to an array of to be added objects.
            The objects in this array are added when a call to<see cref="M:VelocityDb.Collection.BTree.BTreeBase`2.FlushTransients"/> is triggered by multiple events such as calling <see cref="P:VelocityDb.Collection.BTree.BTreeBase`2.Count"/> and when collection is commited and/or flushed to disk or when the array is full.
            The array size is by default currently <see cref="F:VelocityDb.Collection.BTree.BTreeBase`2.transientBatchBufferDefaultSize"/> but you can get/set the desired size with <see cref="P:VelocityDb.Collection.BTree.BTreeBase`2.TransientBatchSize"/>
            </summary>
            <param name="key">The object beeing added</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Add(`0)">
            <summary>
            Adds an element to the set and returns a value that indicates if it was successfully added
            </summary>
            <param name="key">The object beeing added</param>
            <returns>
            <c>true</c> if an element was added; otherwise, <c>false</c>. 
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Add(`0,`1)">
            <summary>
            Add a key with an associated value to a BTreeMap
            </summary>
            <param name="key">The key added</param>
            <param name="value">The associated value added</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.AddWithComparisonArray(`0,System.Byte[])">
            <summary>
            Adds an element to the set and returns a value that indicates if it was successfully added
            </summary>
            <returns>
            <c>true</c> if an element was added; otherwise, <c>false</c>. 
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Add(`0,`1,System.Byte[])">
            <summary>
            Adds a key and value to the map and returns a value that indicates if it was successfully added
            </summary>
            <returns>
            <c>true</c> if an element was added; otherwise, <c>false</c>. 
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Contains(`0)">
            <summary>
            Determines whether the set contains a specific element.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Contains(`0,System.Byte[])">
            <summary>
            Determines whether the set contains a specific element.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.GetEnumerator">
            <summary>
            Enumerates all contained Key objects in sorted order
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the BTreeBase to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from BTreeBase. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Iterator">
            <summary>
            Initializes an iterator to find the keys of this set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.NodeIterator">
            <summary>
            Initializes an iterator to find the Nodes of this set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Remove(`0)">
            <summary>
            Removes a specified item from the set.
            </summary>
            <returns>
            <c>true</c> if an element was removed; otherwise, <c>false</c>. 
            </returns>  
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Remove(`0,System.Byte[])">
            <summary>
            Removes a specified item from the set.
            </summary>
            <returns>
            <c>true</c> if an element was removed; otherwise, <c>false</c>. 
            </returns>  
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.TryGetKey(`0,`0@)">
            <summary>
            Gets the value matching persistent key with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the set contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.GetKeyId(`0)">
            <summary>
            When Key type implements <see cref="T:VelocityDb.IOptimizedPersistable"/>, you can use this function to get the Id of the persistent object instead of the entire object.
            Use for performance reasons in certain cases where reading the object isn't desired. To avoid opening the object, a comparison array which is flagged as complete key must be used.
            </summary>
            <param name="key">Transient lookup object of type Key (which in this case must be implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></param>
            <returns>The Id of the corresponding persistent object or 0 if not persistant or not mplementing <see cref="T:VelocityDb.IOptimizedPersistable"/></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.GetKeyId(`0,System.Byte[])">
            <summary>
            When Key type implements <see cref="T:VelocityDb.IOptimizedPersistable"/>, you can use this function to get the Id of the persistent object instead of the entire object.
            Use for performance reasons in certain cases where reading the object isn't desired.  To avoid opening the object, a comparison array which is flagged as complete key must be used.
            </summary>
            <param name="key">Transient lookup object of type Key (which in this case must be implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></param>
            <param name="comparisonArray">A byte containing bytes to be compared with.</param>
            <returns>The Id of the corresponding persistent object or 0 if not persistant or not mplementing <see cref="T:VelocityDb.IOptimizedPersistable"/></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.TryGetKey(`0,System.Byte[],`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="comparisonArray">The comparison array associated with the key to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the BTreeBase(Of Key) contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Update(System.Boolean)">
            <summary>
            Update this object but don't update indexes since this object type never is part of an index
            </summary>
            <param name="disableFlush">If true, do not flush pages as a possible side affect</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            Sets up some transient varaibles
            </summary>
            <param name="session">The active session</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.ToDoBatchAddCount">
            <summary>
            Gets the number of objects that are not yet added to the collection
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.KeyPlacement">
            <summary>
            Set the key placement to be used for all key objects added to this. This setting is not persisted, it is mainly to be used with objects added with <see cref="M:VelocityDb.Collection.BTree.BTreeBase`2.AddFast(`0)"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.TransientBatchSize">
            <summary>
            Get/Set the max batch size used in API such as <see cref="M:VelocityDb.Collection.BTree.BTreeBase`2.AddFast(`0)"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.Comparer">
            <summary>
            Gets the VelocityDbComparer(Of Key) that is used to determine the order of the items in the sorted set
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.GetAlternateComparer">
            <summary>
            If comparer isn't set then if Key type is string use SessionBase.DefaultStringComparer or ...
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.ComparisonArraySize">
            <summary>
            Gets the size of a comparison array used by this set.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.Count">
            <summary>
            Gets the number of elements in the set.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.Depth">
            <summary>
            Gets the depth of the BTreeSet
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.FlushIfPageFull">
            <summary>
            We don't want to flush other BTree pages while looking for a placement page
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.IsLeaf">
            <summary>
            Is the root a leaf node or not?
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.NodeSize">
            <summary>
            
            </summary>
            <returns>
            The size of the nodeList or thr keyList (if depth is 1) of the root node.
            </returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.ObjectsPerPage">
            <summary>
            Limit to 1000 per page (instead of default 40000)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.Session">
            <summary>
            Gets the session managing this object
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.#ctor(VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.SetupTransientArrays(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.AddFast(`0,`1)">
            <summary>
            Adds an element to an array of to be added objects.
            The objects in this array are added when a call to<see cref="M:VelocityDb.Collection.BTree.BTreeMapBase`2.FlushTransients"/> is triggered by multiple events such as calling <see cref="P:VelocityDb.Collection.BTree.BTreeBase`2.Count"/> and when collection is commited and/or flushed to disk or when the array is full.
            The array size is by default currently <see cref="F:VelocityDb.Collection.BTree.BTreeBase`2.transientBatchBufferDefaultSize"/> but you can get/set the desired size with <see cref="P:VelocityDb.Collection.BTree.BTreeMapBase`2.TransientBatchSize"/>
            </summary>
            <param name="key">The object beeing added</param>
            <param name="value">The associated value added</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Key@Value}}#GetEnumerator">
            <summary>
            Enumerates all Key objects within the BTree
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.persistValue(`1)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.FlushTransients">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.GetEnumerator">
            <summary>
            Enumerates all contained Key objects in sorted order
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.Iterator">
            <summary>
            Initializes an iterator to find the keys and values of this map
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.System#Collections#Generic#IEnumerable{Key}#GetEnumerator">
            <summary>
            Enumerates all contained Key objects in sorted order
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.Last">
            <summary>
            Returns the last KeyValue object in this set.
            </summary>
            <returns>The last KeyValue in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.TryGetValue(`0,System.Byte[],`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="comparisonArray">The comparison array associated with the key to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the BTreeBase(Of Key) contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.GetValueId(`0)">
            <summary>
            When Value type implements <see cref="T:VelocityDb.IOptimizedPersistable"/>, you can use this function to get the Id of the persistent object instead of the entire object.
            Use for performance reasons in certain cases where reading the object isn't desired.
            </summary>
            <param name="key">Lookup object of type Key where Value must be implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></param>
            <returns>The Id of the corresponding value object or 0 if not persistant or not mplementing <see cref="T:VelocityDb.IOptimizedPersistable"/></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.GetValueId(`0,System.Byte[])">
            <summary>
            When Value type implements <see cref="T:VelocityDb.IOptimizedPersistable"/>, you can use this function to get the Id of the persistent object instead of the entire object.
            Use for performance reasons in certain cases where reading the object isn't desired.
            </summary>
            <param name="key">Lookup object of type Key where Value must be implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></param>
            <param name="comparisonArray">A byte containing bytes to be compared with.</param>
            <returns>The Id of the corresponding value object or 0 if not persistant or not mplementing <see cref="T:VelocityDb.IOptimizedPersistable"/></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the set contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapBase`2.TransientBatchSize">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapBase`2.ValuePlacement">
            <summary>
            Set the value placement to be used for all value objects added to this. This setting is not persisted, it is mainly to be used with objects added with <see cref="M:VelocityDb.Collection.BTree.BTreeMapBase`2.AddFast(`0,`1)"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapBase`2.Item(`0)">
            <summary>
            Given a lookup key, returns the corresponding value within the map or null if not found
            </summary>
            <param name="key">The lookup key</param>
            <returns>The value matching the lookup key or null if not found</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0},VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates a new BTreeSet
            </summary>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparer">An object comparer. Try using CompareByField</param>
            <param name="session">The session managing this object</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. Also makes all other objects part of the BTree transient (but not the Key objects)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the BTreeBase to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from BTreeBase. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMap`2.Comparer">
            <summary>
            Gets the VelocityDbComparer object that is used to compare Key objects.
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeMapIterator`2">
            <summary>
            Iterates all the elements of a BTreeSet
            </summary>
            <typeparam name="Key">The key type of this collection</typeparam>  
            <typeparam name="Value">The value type of this collection</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.Current">
            <summary>
            The iterator current Key object
            </summary>
            <returns>The Ket at the current iterator position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.CurrentKey">
            <summary>
            Returns the Key at the current iterator position
            </summary>
            <returns>Key at current position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.CurrentValue">
            <summary>
            Returns the Value at the current iterator position
            </summary>
            <returns>Value at current position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.GoTo(`0)">
            <summary>
            Positions iterator at Key object or where Key would be inserted if added to the set.
            </summary>
            <param name="key">The object to position iterator near</param>
            <returns>true if an exact match was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.GoTo(`0,System.Byte[])">
            <summary>
            Positions iterator at Key object or where Key would be inserted if added to the set. This function is normally only used internally by VelocityDb.
            </summary>
            <param name="key">The object to position iterator near</param>
            <param name="comparisonArray">Contains bytes used for comparing with other arrays for NodeKeys within the set</param>
            <returns>true if an exact match was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.GoToLast">
            <summary>
            Positions iterator at the last object in the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.MovePrevious">
            <summary>
            Advances the enumerator to the previous element of the map.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if the enumerator has reached the position prior to the start of the map.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.Next">
            <summary>
            Positions the iterator at the next KeyValuePair in the map. Only use this one with nullable Key type.
            </summary>
            <returns>The next Key or null if we iterated past the the end of the set.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.Previous">
            <summary>
            Positions the iterator at the previous Key in the set
            </summary>
            <returns>The previous Key or null if we iterated to a postion before the first Key in the set.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.ReplaceValue(`1@)">
            <summary>
            Replaces a value in map
            </summary>
            <param name="value">the value to replace with</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapIterator`2.IndexInTree">
            <summary>
            Gets the index of the current iterator element in the iterated collection
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeMapOidShort`2">
            <summary>Represents a collection of objects that is maintained in sorted order. Collection and all objects must be within a single Database (since references uses OidShort persistently)
            </summary>
            <typeparam name="Key">The object type of keys in this BTreeMapOidShort/></typeparam>
            <typeparam name="Value">The value type of values in this BTreeMapOidShort</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapOidShort`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0},VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates a new BTreeMapOidShort
            </summary>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparer">An object comparer. Try using CompareByField</param>
            <param name="session">The session managing this object</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapOidShort`2.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapOidShort`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapOidShort`2.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. Also makes all other objects part of the BTree transient (but not the Key objects)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapOidShort`2.Comparer">
            <summary>
            Gets the VelocityDbComparer object that is used to compare Key objects.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapOidShort`2.MaxNumberOfDatabases">
            <summary>
            Allow only a single database for this short id (32bit) references collection
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeCollectionExtension">
            <summary>
            A few extensions to improve performance of Linq for Objects queries
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeCollectionExtension.Count``1(VelocityDb.Collection.BTree.BTreeBase{``0,``0})">
            <summary>
            Override to improve performance over IEnumerable LINQ extension
            </summary>
            <typeparam name="Key">key type</typeparam>
            <param name="sourceCollection">the collection</param>
            <returns>Size of the collection</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeCollectionExtension.Where``1(VelocityDb.Collection.BTree.BTreeBase{``0,``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Override to improve performance over IEnumerable LINQ extension
            </summary>
            <typeparam name="Key">key type</typeparam>
            <param name="sourceCollection">the collection</param>
            <param name="expr">an expression</param>
            <returns>Enumeration of collection where the expression evaluates to true</returns>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeSetOidShort`1">
            <summary>Represents a collection of objects that is maintained in sorted order. Collection and all objects must be within a single Database (since references uses OidShort persistently)
            </summary>
            <typeparam name="Key">The object type of objects in this BTree, currently must be a subclass of <see cref="T:VelocityDb.OptimizedPersistable"/></typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0},VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates a new BTreeSetOidShort
            </summary>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparer">An object comparer. Try using CompareByField</param>
            <param name="session">The session managing this object</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.AddToIndex(VelocityDb.IOptimizedPersistable)">
            <summary>
            Internal use only (need to be public due to obfuscation)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.RemoveFromIndex(VelocityDb.IOptimizedPersistable)">
            <summary>
            Internal use only (need to be public due to obfuscation)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.First">
            <summary>
            Returns the first Key object in this set.
            </summary>
            <returns>The first Key in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Iterator">
            <summary>
            Initializes an iterator to find the keys of this set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Last">
            <summary>
            Returns the last Key object in this set.
            </summary>
            <returns>The last Key in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. Also makes all other objects part of the BTree transient (but not the Key objects)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Comparer">
            <summary>
            Gets the VelocityDbComparer object that is used to compare Key objects.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSetOidShort`1.MaxNumberOfDatabases">
            <summary>
            Allow only a single database for this short id (32bit) references collection
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Collection.BTree</c> namespace contains classes for the VelocityDb BTrees optimized for persistent storage in VelocityDb databases
            </summary>      
        </member>
        <member name="T:VelocityDb.Collection.Comparer.VelocityDbComparer`1">
            <summary>
            The base class of for comapring persistent objects. If the Key objects implements <see cref="T:System.IComparable"/> then the NodeKeys are compared that way, otherwise the <see cref="P:VelocityDb.OptimizedPersistable.Id"/> are compared
            </summary>
            <typeparam name="Key">The type of keys to compare</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.VelocityDbComparer`1.Compare(`0,`0)">
            <summary>
            If the Key objects implements <see cref="T:System.IComparable"/> then the NodeKeys are compared that way, otherwise the <see cref="P:VelocityDb.OptimizedPersistable.Id"/> are compared
            </summary>
            <param name="a">object a to compare</param>
            <param name="b">object b to compare with</param>
            <returns>-1 if a less than b, 0 if == and 1 if a is greater than b</returns>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.VelocityDbComparer`1.SetComparisonArrayFromObject(`0,System.Byte[],System.Boolean)">
            <summary>
            Comparators that use comparison arrays need to override this function. Given a Key object, set the comparisonArray bytes
            </summary>
            <param name="key">The object from which to extract the comparison array bytes</param>
            <param name="comparisonArray">The array containing the object comparison bytes</param>
            <param name="oidShort">If oidShort is true then only the page and slot numbers need to be compared if the comparator bytes includes any Oid bytes</param>
        </member>
        <member name="P:VelocityDb.Collection.Comparer.VelocityDbComparer`1.AddOidCompare">
            <summary>
            The default compare compares the object Oid's but subclasses may not want to do so as a last compare before declaring objects as being equal.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Comparer.VelocityDbComparer`1.OidPartOfComparisonBytes">
            <summary>
            Is the Oid part of the comparison bytes? If so, we don't need to do a seperate Oid compare when Oid is part of compare
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.Comparer.ByteArrayComparer">
            <summary>
            Compares two byte arrays
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.Comparer.CompareByField`1">
            <summary>
            Use this predefined comparator whenever the sorting can be defined by specifying one or more fields of the sorted Key type.
            </summary>
            <typeparam name="Key">The type of object being compared (containing field(s) to compare)</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.#ctor(System.String,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Compares objects by comparing one or more data fields of type Key
            </summary>
            <param name="field">Primary field to use for comparison.</param>
            <param name="session">The managing session</param>
            <param name="doIdCompareIfEqual">Optionally compare Oid's when fields are equal between compared objects</param>
            <param name="sortStringsByHashCode">Sort string fields by hash code first then secondly as normal string compare</param>
            <param name="ascendingSort">If <see langword="true"/> (default), sort in ascending order, otherwise in descending order</param>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.AddFieldToCompare(System.String,System.Boolean)">
            <summary>
            Add an additional field to compare when prior fields all are equal
            </summary>
            <param name="field">Field name of field to compare</param>
            <param name="ascendingSort">If <see langword="true"/> (default), sort in ascending order, otherwise in descending order</param>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.#ctor(VelocityDb.Session.SessionBase)">
            <summary> 
            <param name="session">The session managing this object.</param>
            This special constructor is provided so that VelocityDb can instantiate the object after reading it from disk.  
            This is also the place to initialize transient variables of the object.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.Compare(`0,`0)">
            <summary>
            Compares field(s) of Key a with field(s) of Key b
            </summary>
            <param name="a">the first object</param>
            <param name="b">the second object</param>
            <returns>-1 if a less than b, 0 if equal and 1 if a greater than b</returns>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.SetComparisonArrayFromObject(`0,System.Byte[],System.Boolean)">
            <summary>
            Sets a byte array equivalent to the field values to compare. Using this bypasses object compares, instead the byte arrays are compared byte by byte intil a diff is found. If a byte diff isn't found then object compares may happen.
            Field types currently supported: byte, bool, Char, string, Int16, Int32, Int64, UInt16, UInt32, UInt64, Single, Double, DateTime, TimeSpan
            </summary>
            <param name="key">A key from which to extract a comparison byte array based on field(s) to compare</param>
            <param name="comparisonArray">The array to set bytes of</param>
            <param name="oidShort">If oidShort is true then only the page and slot numbers need to be compared if the comparator bytes includes any Oid bytes</param>
        </member>
        <member name="P:VelocityDb.Collection.Comparer.CompareByField`1.AddOidCompare">
            <summary>
            Is the object Oid going to be compared when all the compared fields are equal?
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Comparer.CompareByField`1.OidPartOfComparisonBytes">
            <summary>
            Is the Oid (or OidShort) included in the comparison array bytes?
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByFieldIndex`1.Compare(`0,`0)">
            <summary>
            Compares field(s) of Key a with field(s) of Key b
            </summary>
            <param name="a">the first object</param>
            <param name="b">the second object</param>
            <returns>-1 if a less than b, 0 if equal and 1 if a greater than b</returns>
        </member>
        <member name="T:VelocityDb.Collection.Comparer.HashCodeComparer`1">
            <summary>
            When the type of object being compared is a simple type like a string and you don't care about the sort order, then this comparator is what you want to use.
            It is similar to using a hash based collection but with less overhead (more compact)
            This kind of comparator especially shines when you create the BTreeSet/BTreeMap using a comparisonByteArray size of 4
            </summary>
            <typeparam name="T">The type of object to compare which must implement <see cref="T:System.IComparable"/></typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.HashCodeComparer`1.GetHashCode32(System.String)">
            <summary> 
            Similar to String.GetHashCode but returns the same as the x86 version of String.GetHashCode for x64 and x86 frameworks. 
            </summary> 
            <param name="s"></param> 
            <returns></returns> 
        </member>
        <member name="T:VelocityDb.Collection.Comparer.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Collection.Comparer</c> namespace contains classes for the VelocityDb Comparer classes optimized for persistent storage in VelocityDb databases
            </summary>      
        </member>
        <member name="T:VelocityDb.Collection.Comparer.SimpleComparer`1">
            <summary>
            When the type of object being compared is a simple type like string, int, ..., this is the comparator you probably want to use.
            </summary>
            <typeparam name="T">The type of object to compare which must implement <see cref="T:System.IComparable"/></typeparam>
        </member>
        <member name="T:VelocityDb.Collection.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Collection</c> namespace contains classes for the VelocityDb collections optimized for persistent storage in VelocityDb databases
            </summary>      
        </member>
        <member name="T:VelocityDb.Collection.Range`1">
            <summary>
            An ordered pair of values, representing a segment.
            </summary>
            <typeparam name="T">Type of each of two values of range.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:VelocityDb.Collection.Range`1"/> struct.
            </summary>
            <param name="min">The minimal value of segment.</param>
            <param name="max">The maximal value of segment.</param>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.Equals(VelocityDb.Collection.Range{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:VelocityDb.Collection.Range`1.Min">
            <summary>
            Gets the minimal value of segment.
            </summary>
            <value>The min.</value>
        </member>
        <member name="P:VelocityDb.Collection.Range`1.Max">
            <summary>
            Gets the maximal value of segment.
            </summary>
            <value>The max.</value>
        </member>
        <member name="P:VelocityDb.Collection.Range`1.IsEmpty">
            <summary>
            Gets a value indicating whether this range is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.NodeBase.calculateMinimumBoundingRectangle">
            <summary>
            Given a node object, calculate the node Minimum Bounding Rectangle from it's entries. Used in consistency checking
            </summary>
            <returns></returns>  
        </member>
        <member name="M:VelocityDb.Collection.Spatial.NodeLeaf.condenseTree(VelocityDb.Collection.Spatial.RTree)">
            <summary>
            Used by delete(). Ensures that all nodes from the passed node up to the root have the minimum number of entries.
            Note that the parent and parentEntry stacks are expected to contain the nodeIds of all parents up to the root.
            </summary>
            <param name="rTree"></param>
        </member>
        <member name="T:VelocityDb.Collection.Spatial.Point">
            <summary>
            Points are most often considered within the framework of Euclidean geometry, where they are one of the fundamental objects. Euclid originally defined the point as "that which has no part". In two-dimensional Euclidean space, a point is represented by an ordered pair (x,?y) of numbers, where the first number conventionally represents the horizontal and is often denoted by x, and the second number conventionally represents the vertical and is often denoted by y.
            </summary>
        </member>
        <member name="F:VelocityDb.Collection.Spatial.Point.x">
            <summary>
            The (x, y) coordinates of the point.
            </summary>
        </member>
        <member name="F:VelocityDb.Collection.Spatial.Point.y">
            <summary>
            The (x, y) coordinates of the point.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Point.#ctor(System.Double,System.Double)">
            <summary>
            Creates a Point instance
            </summary>
            <param name="x">The x coordinate of the point</param>
            <param name="y">The y coordinate of the point</param>   
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Point.ToString">
            <summary>
            return "(" + x + ", " + y + ")";
            </summary>
            <returns></returns>
        </member>
        <member name="T:VelocityDb.Collection.Spatial.PriorityQueue`2">
            <summary>
            Priority Queue that stores values and priorities.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.PriorityQueue`2.#ctor(System.Boolean,System.Int32)">
            <summary>
            Creates a PriorityQue
            </summary>
            <param name="sortOrderAscending">order ascending if true otherwise order descending</param>
            <param name="initialCapacity">improve performance by setting expected size initially</param>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.PriorityQueue`2.sortsEarlierThan(`0,`0)">
            <summary>
            Determine if p1 should be ordered before p2 or vice versa
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns>true if p1 has an earlier sort order than p2</returns> 
        </member>
        <member name="M:VelocityDb.Collection.Spatial.PriorityQueue`2.Insert(`1,`0)">
            <summary>
            Insert a value, append it to the arrays, then reheapify by promoting it to the correct place.
            </summary>
            <param name="value">the value inserted</param>
            <param name="priority">the priority of the value inserted</param>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.PriorityQueue`2.Clear">
            <summary>
            Removes all values and priorities from the que
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.PriorityQueue`2.Pop">
            <summary>
            Get the value with the lowest priority creates a "hole" at the root of the tree. The algorithm swaps the hole with the appropriate child, until 
            the last entry will fit correctly into the hole (ie is lower priority than its children)
            </summary>
            <returns>the Value with the lowest priority</returns>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.PriorityQueue`2.Count">
            <summary>
            The number of values and priorities that are in the que
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.PriorityQueue`2.ValuePeek">
            <summary>
            Peek at the next value
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.PriorityQueue`2.PriorityPeek">
            <summary>
            Peek at the next Priority
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.PriorityQueue`2.SortOrderAscending">
            <summary>
            Set or get sorting order, ascending if true or descending if false. 
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.Spatial.PriorityQueueRTree">
            <summary>
            RTree uses double for priorities and Rectangle as values
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.Spatial.Rectangle">
            <summary>
            
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x1">coordinate of any corner of the rectangle</param>
            <param name="y1">(see x1)</param>
            <param name="x2">coordinate of the opposite corner</param>
            <param name="y2">(see x2)</param>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.set(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Sets the size of this rectangle to equal the passed rectangle.
            </summary>
            <param name="r"></param>  
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.edgeOverlaps(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Determine whether an edge of this rectangle overlies the equivalent edge of the passed rectangle
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.Intersects(System.Nullable{VelocityDb.Collection.Spatial.Rectangle}@)">
            <summary>
            Determine whether this rectangle intersects the passed rectangle
            </summary>
            <param name="r">The rectangle that might intersect this rectangle</param>
            <returns>return true if the rectangles intersect, false if they do not intersect</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.Contains(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Determine whether this rectangle contains the passed rectangle
            </summary>
            <param name="r">The rectangle that might be contained by this rectangle</param>
            <returns>return true if this rectangle contains the passed rectangle, false if it does not</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.containedBy(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Determine whether this rectangle is contained by the passed rectangle
            </summary>
            <param name="r">The rectangle that might contain this rectangle</param>
            <returns>return true if the passed rectangle contains this rectangle, false if it does not</returns> 
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.Distance(VelocityDb.Collection.Spatial.Point)">
            <summary>
            Return the distance between this rectangle and the passed point. If the rectangle contains the point, the distance is zero.
            </summary>
            <param name="p">Point to find the distance to</param>
            <returns>return distance beween this rectangle and the passed point.</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.distance(System.Double,System.Double)">
            <summary>
            Return the distance between a rectangle and a point. If the rectangle contains the point, the distance is zero.
            </summary>
            <param name="pX">X coordinate of point</param>
            <param name="pY">Y coordinate of point</param>
            <returns>return distance beween this rectangle and the passed point.</returns>  
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.distanceSq(System.Double,System.Double)">
            <summary>
            Get the square of the distance between two points.
            </summary>
            <param name="pX">the x coordinate of point</param>
            <param name="pY">the y coordinate of point</param>
            <returns>the square of the distance between two points.</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.Distance(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Return the distance between this rectangle and the passed rectangle. If the rectangles overlap, the distance is zero.
            </summary>
            <param name="r">Rectangle to find the distance to</param>
            <returns>return distance between this rectangle and the passed rectangle</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.Enlargement(VelocityDb.Collection.Spatial.Rectangle@)">
            <summary>
            Calculate the area by which this rectangle would be enlarged if added to the passed rectangle. Neither rectangle is altered.
            </summary>
            <param name="r">Rectangle to union with this rectangle, in order to compute the difference in area of the union and the original rectangle</param>
            <returns>enlargement</returns> 
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.enlargement(VelocityDb.Collection.Spatial.Rectangle,VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Calculate the area by which a rectangle would be enlarged if added to the passed rectangle
            </summary>
            <param name="r1">minimum X coordinate of rectangle 1</param>
            <param name="r2">minimum X coordinate of rectangle 2</param>
            <returns>return enlargement</returns> 
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.Add(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Computes the union of this rectangle and the passed rectangle, storing the result in this rectangle.
            </summary>
            <param name="r">Rectangle to add to this rectangle</param> 
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.add(VelocityDb.Collection.Spatial.Point)">
            <summary>
            Computes the union of this rectangle and the passed point, storing the result in this rectangle.
            </summary>
            <param name="p">Point to add to this rectangle</param>  
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.union(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Find the the union of this rectangle and the passed rectangle.Neither rectangle is altered
            </summary>
            <param name="r">The rectangle to union with this rectangle</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.GetHashCode">
            <summary>
            Customized hash code using the coordinates of the rectangle 37 * minX * minY * maxX * maxY
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.sameObject(System.Object)">
            <summary>
            Determine whether this rectangle is the same as another object. Note that two rectangles can be equal but not the same object, if they both have the same bounds.
            </summary>
            <param name="o">The object to compare with this rectangle</param>
            <returns></returns>   
        </member>
        <member name="M:VelocityDb.Collection.Spatial.Rectangle.ToString">
            <summary>
            Return a string representation of this rectangle, in the form: (1.2, 3.4), (5.6, 7.8)
            </summary>
            <returns>return String String representation of this rectangle</returns>   
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.MinX">
            <summary>
            The low x coordinate
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.MaxX">
            <summary>
            The high x coordinate
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.MinY">
            <summary>
            The low y coordinate
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.MaxY">
            <summary>
            The high y coordinate
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.Area">
            <summary>
            Compute the area of this rectangle.
            </summary>
            <returns>The area of this rectangle</returns>  
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.Width">
            <summary>
            The width of a rectangle
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.Height">
            <summary>
            The height of a rectangle
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.AspectRatio">
            <summary>
            The aspect ratio denotes the ratio of length to width of the rectangle (Width / Height)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.Rectangle.Centre">
            <summary>
            Gets the centre of the rectangle
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.Spatial.RTree">
            <summary>
            RTree implementation inspired by description on Wikipedia http://en.wikipedia.org/wiki/R-tree
            </summary>
        </member>
        <member name="F:VelocityDb.Collection.Spatial.RTree.defaultMinNodeEntries">
            <summary>
            default minimum number of reactangles in a leaf RTree node
            </summary>
        </member>
        <member name="F:VelocityDb.Collection.Spatial.RTree.defaultMaxNodeEntries">
            <summary>
            default maximum number of reactangles in a leaf RTree node
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.#ctor(System.Int32,System.Int32)">
            <summary>
            RTree implementaion customized for optimal performance with VelocityDB. Follows outline as described in http://en.wikipedia.org/wiki/R-tree
            </summary>
            <param name="minNodeEntries">Minimum number of entries in a node. The default value is 80.</param>
            <param name="maxNodeEntries">Maximum number of entries in a node. The default value is 200.</param>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.Add(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Start at the Root Node
            Select the child that needs the least enlargement in order to fit the new geometry.
            Repeat until at a leaf node.
            If leaf node has available space insert Else split the entry into two nodes
            Update parent nodes
            Update the entry that pointed to the node with a new minimum bounding rectangle
            Add a new entry for the second new node
            If there is no space in the parent node, split and repeat
            </summary>
            <param name="r">the rectangle being added</param>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.AddInternal(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Adds a new entry at a specified level in the tree
            </summary>
            <param name="r">the rectangle added</param>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.AddInternal(VelocityDb.Collection.Spatial.Rectangle,System.Int32,VelocityDb.Collection.Spatial.NodeBase)">
            <summary>
            Adds a new entry at a specified level in the tree
            </summary>
            <param name="r">the rectangle added</param>
            <param name="level">the level of the tree to add it at</param>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.Remove(VelocityDb.Collection.Spatial.Rectangle)">
            <summary>
            Removes a rectangle from the Rtree
            </summary>
            <param name="r">the rectangle to delete</param>
            <returns>true if rectangle deleted otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.Nearest(VelocityDb.Collection.Spatial.Point,System.Double)">
            <summary>
            Finds the nearest rectangles to the passed point. If multiple rectangles are equally near, they will all be returned.
            </summary>
            <param name="p">the point we are looking for</param>
            <param name="furthestDistance">The furthest distance away from the rectangle to search. Rectangles further than this will not be found.</param>
            <returns>a PriorityQue containing the found recatngles and their priorities (distances from point)</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.NearestN(VelocityDb.Collection.Spatial.Point,System.UInt32,System.Double)">
            <summary>
            Finds the N nearest rectangles to the passed point. If multiple rectangles are equally near, they will all (but total limited to N) be returned.
            </summary>
            <param name="p">the point we are looking for</param>
            <param name="count">max number of rectangles to look for</param>
            <param name="furthestDistance">The furthest distance away from the rectangle to search. Rectangles further than this will not be found.</param>
            <returns>a PriorityQue containing the found recatngles and their priorities (distances from point)</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.Intersects(VelocityDb.Collection.Spatial.Rectangle,System.Func{VelocityDb.Collection.Spatial.Rectangle,System.Boolean})">
            <summary>
            Finds all rectangles that intersect the passed rectangle.
            </summary>
            <param name="r">the rectangle we are intersecting with</param>
            <param name="v">if returns true, search containues else search is ended</param>
            <returns>true if at least one intersection was found and v returns true</returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.Contains(VelocityDb.Collection.Spatial.Rectangle,System.Func{VelocityDb.Collection.Spatial.Rectangle,System.Boolean})">
            <summary>
            Finds all rectangles contained by the passed rectangle
            </summary>
            <param name="r">The rectangle for which this method finds contained rectangles.</param>
            <param name="v">if return true, continue seach</param>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.intersects(VelocityDb.Collection.Spatial.Rectangle,System.Func{VelocityDb.Collection.Spatial.Rectangle,System.Boolean},VelocityDb.Collection.Spatial.NodeBase)">
            <summary>
            Recursively searches the tree for all intersecting entries.
            Calls the passed function when a matching entry is found. Return if the passed function returns false;
            </summary>
            <param name="r"></param>
            <param name="v"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.chooseNode(VelocityDb.Collection.Spatial.Rectangle,System.Int32)">
            <summary>
            Used by add(). Chooses a leaf to add the rectangle to.
            </summary>
            <param name="r"></param>
            <param name="level"></param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.Spatial.RTree.checkConsistency">
            <summary>
            Check the consistency of the tree.
            </summary>
            <returns>false if an inconsistency is detected, true otherwise</returns> 
        </member>
        <member name="P:VelocityDb.Collection.Spatial.RTree.Count">
            <summary>
            Get the number of rectangles that are managed by the Rtree
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Spatial.RTree.Bounds">
            <summary>
            Gets the bounds of all the entries in the spatial index, or null if there are no entries.
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.SortedMapBase`2">
            <summary>
            A base class for sorted maps.
            </summary>
            <typeparam name="Key">A key type for a map</typeparam>
            <typeparam name="Value">A value type for a map</typeparam>
        </member>
        <member name="T:VelocityDb.Collection.SortedSetBase`1">
            <summary>
            A base class for sorted sets
            </summary>
            <typeparam name="Key">A key type for a set.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Add(`0)">
            <summary>
            Add item to this sorted set.
            </summary>
            <param name="key">item to add</param> 
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Clear">
            <summary>
            Remove all items from this set. 
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Contains(`0)">
            <summary>
            Checks if this sorted set contains the item 
            </summary>
            <param name="aKey">item to check for containment</param> 
            <returns>true if item contained; false if not</returns> 
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary> 
            Copy items in this sorted set to array, starting at arrayIndex
            </summary> 
            <param name="array">array to add items to</param> 
            <param name="arrayIndex">index to start at</param>
            <param name="count">number of elements to copy</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.IndexOf(`0)">
            <summary>
            Get the index of a given key
            </summary>
            <param name="aKey">The lookup key</param>
            <returns>The index of key or -1 if a matching key was not found.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Remove(`0)">
            <summary> 
            Remove item from this set
            </summary> 
            <param name="key">item to remove</param> 
            <returns>true if removed; false if not (i.e. if the item wasn't in the SortedSetBase)</returns>    
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Remove elements that match specified predicate. Returns the number of elements removed 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.TryGetValue(`0,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the set contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.System#Collections#Generic#IEnumerable{Key}#GetEnumerator">
            <summary>
            Gets the keys of the set as an enumeration.
            </summary>
            <returns>Enumeration of the keys</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Update(System.Boolean)">
            <summary>
            Update this object but don't update indexes since this object type never is part of an index
            </summary>
            <param name="disableFlush">If true, do not flush pages as a possible side affect</param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.Comparer">
            <summary> 
            Gets the IComparer that is used to determine the order of the items in the sorted set
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.Count">
            <summary> 
            Number of elements in this SortedSetBase
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.IsEmpty">
            <summary>
            Returns true if 0 elements are in the set.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.IsReadOnly">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.Item(`0)">
            <summary>
            Given a lookup key, returns the corresponding key within the collection or null if not found
            </summary>
            <param name="key">The lookup key</param>
            <returns>The key matching the lookup key or null if not found</returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.Keys">
            <summary>
            Gets the internal list of NodeKeys
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add to a map
            </summary>
            <param name="keyValue">key and value being added</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Add(`0,`1)">
            <summary>
            Add to a map
            </summary>
            <param name="key">key added</param>
            <param name="value">value added</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Clear">
            <summary>
            Removes all keys and values from the map, leaving the map empty
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Check if map contains a key value pair
            </summary>
            <param name="keyValue"></param>
            <returns>true if map contains the key value pair</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.ContainsKey(`0)">
            <summary>
            Checks if map contains a key
            </summary>
            <param name="aKey"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the set contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
             throw new NotImplementedException();
            </summary>
            <param name="array">The destination array</param>
            <param name="index">The start index</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.isEmpty">
            <summary>
            Check if map is empty
            </summary>
            <returns>true if map is empty; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Remove(`0)">
            <summary>
            Removes a key from the map (if found)
            </summary>
            <param name="key"></param>
            <returns>true if key was found and removed; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key value pair from the map (if found)
            </summary>
            <param name="keyValue"></param>
            <returns>true if key was found and removed; otherwise false</returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapBase`2.Item(`0)">
            <summary>
            Gets or sets the value associated with a key
            </summary>
            <param name="key">The lookup key</param>
            <returns>The value associated with a key or throws KeyNotFoundException</returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapBase`2.Values">
            <summary>
            The map values as a list
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.SortedMapOidShort`2">
            <summary>
            A sorted map where all keys and values and the map are contained within a single <see cref="T:VelocityDb.Database"/>
            </summary>
            <typeparam name="Key">The Type of keys of this map</typeparam>
            <typeparam name="Value">The Type of values of this map</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapOidShort`2.#ctor">
            <summary>
            Constructs a new empty map
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapOidShort`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a new empty map with a given object comparator
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapOidShort`2.Comparer">
            <summary>
            Gets comparator
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapOidShort`2.Keys">
            <summary>
            Gets the internal list of keys
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapOidShort`2.Values">
            <summary>
            Gets the internal list of values
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.SortedMapValueOidShort`2">
            <summary>
            A sorted map where all values are located within a single <see cref="T:VelocityDb.Database"/>
            </summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapValueOidShort`2.#ctor">
            <summary>
            Constructs a new map with OidShort based values
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapValueOidShort`2.#ctor(System.Int32)">
            <summary>
            Constructs a new map with OidShort based values
            </summary>
            <param name="capacity">Presizes internal list to a requested size</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapValueOidShort`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a new map with a given comparator
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapValueOidShort`2.Comparer">
            <summary>
            Gets the Key comparator of the map
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapValueOidShort`2.Keys">
            <summary>
            Gets the internal list of NodeKeys
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapValueOidShort`2.Values">
            <summary>
            Gets the internal list of NodeValues
            </summary>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.CachedCsvReader">
            <summary>
            Represents a reader that provides fast, cached, dynamic access to CSV data.
            </summary>
            <remarks>The number of records is limited to <see cref="F:System.Int32.MaxValue"/> - 1.</remarks>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.CsvReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to CSV data.
            Copyright (c) 2005 Sébastien Lorion
            MIT license (http://en.wikipedia.org/wiki/MIT_License)
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.DefaultBufferSize">
            <summary>
            Defines the default buffer size.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.DefaultDelimiter">
            <summary>
            Defines the default delimiter character separating each field.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.DefaultQuote">
            <summary>
            Defines the default quote character wrapping every field.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.DefaultEscape">
            <summary>
            Defines the default escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.DefaultComment">
            <summary>
            Defines the default comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._fieldHeaderComparer">
            <summary>
            Contains the field header comparer.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._reader">
            <summary>
            Contains the <see cref="T:TextReader"/> pointing to the CSV file.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._bufferSize">
            <summary>
            Contains the buffer size.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._comment">
            <summary>
            Contains the comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._escape">
            <summary>
            Contains the escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._delimiter">
            <summary>
            Contains the delimiter character separating each field.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._quote">
            <summary>
            Contains the quotation character wrapping every field.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._trimmingOptions">
            <summary>
            Determines which values should be trimmed.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._hasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._defaultParseErrorAction">
            <summary>
            Contains the default action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._missingFieldAction">
            <summary>
            Contains the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._supportsMultiline">
            <summary>
            Indicates if the reader supports multiline.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._skipEmptyLines">
            <summary>
            Indicates if the reader will skip empty lines.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._initialized">
            <summary>
            Indicates if the class is initialized.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._fieldHeaders">
            <summary>
            Contains the field headers.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._fieldHeaderIndexes">
            <summary>
            Contains the dictionary of field indexes by header. The key is the field name and the value is its index.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._currentRecordIndex">
            <summary>
            Contains the current record index in the CSV file.
            A value of <see cref="M:Int32.MinValue"/> means that the reader has not been initialized yet.
            Otherwise, a negative value means that no record has been read yet.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._nextFieldStart">
            <summary>
            Contains the starting position of the next unread field.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._nextFieldIndex">
            <summary>
            Contains the index of the next unread field.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._fields">
            <summary>
            Contains the array of the field values for the current record.
            A null value indicates that the field have not been parsed.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._fieldCount">
            <summary>
            Contains the maximum number of fields to retrieve for each record.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._buffer">
            <summary>
            Contains the read buffer.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._bufferLength">
            <summary>
            Contains the current read buffer length.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._eof">
            <summary>
            Indicates if the end of the reader has been reached.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._eol">
            <summary>
            Indicates if the last read operation reached an EOL character.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._firstRecordInCache">
            <summary>
            Indicates if the first record is in cache.
            This can happen when initializing a reader with no headers
            because one record must be read to get the field count automatically
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._missingFieldFlag">
            <summary>
            Indicates if one or more field are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._parseErrorFlag">
            <summary>
            Indicates if a parse error occured for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,VelocityDB.Framework.IO.Csv.ValueTrimmingOptions)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines which values should be trimmed.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,VelocityDB.Framework.IO.Csv.ValueTrimmingOptions,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines which values should be trimmed.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.OnParseError(VelocityDB.Framework.IO.Csv.ParseErrorEventArgs)">
            <summary>
            Raises the <see cref="M:ParseError"/> event.
            </summary>
            <param name="e">The <see cref="T:VelocityDB.Framework.IO.Csv.ParseErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.GetFieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
            <returns>The field headers or an empty array if headers are not supported.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.EnsureInitialize">
            <summary>
            Ensures that the reader is initialized.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.GetFieldIndex(System.String)">
            <summary>
            Gets the field index for the provided header.
            </summary>
            <param name="header">The header to look for.</param>
            <returns>The field index for the provided header. -1 if not found.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.CopyCurrentRecordTo(System.String[])">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from 0 to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.CopyCurrentRecordTo(System.String[],System.Int32)">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="index"/> is les than zero or is equal to or greater than the length <paramref name="array"/>. 
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.GetCurrentRawData">
            <summary>
            Gets the current raw CSV data.
            </summary>
            <remarks>Used for exception handling purpose.</remarks>
            <returns>The current raw CSV data.</returns>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns><see langword="true"/> if <paramref name="c"/> is white space; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.ParseNewLine(System.Int32@)">
            <summary>
            Parses a new line delimiter.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if a new line delimiter was found; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.IsNewLine(System.Int32)">
            <summary>
            Determines whether the character at the specified position is a new line delimiter.
            </summary>
            <param name="pos">The position of the character to verify.</param>
            <returns>
            	<see langword="true"/> if the character at the specified position is a new line delimiter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.ReadBuffer">
            <summary>
            Fills the buffer with data from the reader.
            </summary>
            <returns><see langword="true"/> if data was successfully read; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.ReadField(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reads the field at the specified index.
            Any unread fields with an inferior index will also be read as part of the required parsing.
            </summary>
            <param name="field">The field index.</param>
            <param name="initializing">Indicates if the reader is currently initializing.</param>
            <param name="discardValue">Indicates if the value(s) are discarded.</param>
            <returns>
            The field at the specified index. 
            A <see langword="null"/> indicates that an error occured or that the last field has been reached during initialization.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="field"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	There is no current record.
            </exception>
            <exception cref="T:VelocityDB.Framework.IO.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:VelocityDB.Framework.IO.Csv.MalformedCsvException">
            	The CSV data appears to be malformed.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.ReadNextRecord">
            <summary>
            Reads the next record.
            </summary>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.SkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            Skips empty and commented lines.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.DoSkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            <para>Worker method.</para>
            <para>Skips empty and commented lines.</para>
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.SkipWhiteSpaces(System.Int32@)">
            <summary>
            Skips whitespace characters.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.SkipToNextLine(System.Int32@)">
            <summary>
            Skips ahead to the next NewLine character.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.HandleParseError(VelocityDB.Framework.IO.Csv.MalformedCsvException,System.Int32@)">
            <summary>
            Handles a parsing error.
            </summary>
            <param name="error">The parsing error that occured.</param>
            <param name="pos">The current position in the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.HandleMissingField(System.String,System.Int32,System.Int32@)">
            <summary>
            Handles a missing field error.
            </summary>
            <param name="value">The partially parsed value, if available.</param>
            <param name="fieldIndex">The missing field index.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <returns>
            The resulting value according to <see cref="M:MissingFieldAction"/>.
            If the action is set to <see cref="T:MissingFieldAction.TreatAsParseError"/>,
            then the parse error will be handled according to <see cref="P:VelocityDB.Framework.IO.Csv.CsvReader.DefaultParseErrorAction"/>.
            </returns>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.ValidateDataReader(VelocityDB.Framework.IO.Csv.CsvReader.DataReaderValidations)">
            <summary>
            Validates the state of the data reader.
            </summary>
            <param name="validations">The validations to accomplish.</param>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is invalid when the reader is closed.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.CopyFieldToArray(System.Int32,System.Int64,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the value of the specified field to an array.
            </summary>
            <param name="field">The index of the field.</param>
            <param name="fieldOffset">The offset in the field value.</param>
            <param name="destinationArray">The destination array where the field value will be copied.</param>
            <param name="destinationOffset">The destination array offset.</param>
            <param name="length">The number of characters to copy from the field value.</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.System#Collections#Generic#IEnumerable{System#String[]}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._isDisposed">
            <summary>
            Contains the disposed status flag.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader._lock">
            <summary>
            Contains the locking object for multi-threading purpose.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Disposed"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of, and if it has, throws an <see cref="T:System.ComponentModel.ObjectDisposedException"/>; otherwise, does nothing.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
            <remarks>
            	Derived classes should call this method at the start of all methods and properties that should not be accessed after a call to <see cref="M:Dispose()"/>.
            </remarks>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
            <remarks>
            	Calls <see cref="M:Dispose(Boolean)"/> with the disposing parameter set to <see langword="true"/> to free unmanaged and managed resources.
            </remarks>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the instance is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="E:VelocityDB.Framework.IO.Csv.CsvReader.ParseError">
            <summary>
            Occurs when there is an error while parsing the CSV stream.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.Comment">
            <summary>
            Gets the comment character indicating that a line is commented out.
            </summary>
            <value>The comment character indicating that a line is commented out.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.Escape">
            <summary>
            Gets the escape character letting insert quotation characters inside a quoted field.
            </summary>
            <value>The escape character letting insert quotation characters inside a quoted field.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.Delimiter">
            <summary>
            Gets the delimiter character separating each field.
            </summary>
            <value>The delimiter character separating each field.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.Quote">
            <summary>
            Gets the quotation character wrapping every field.
            </summary>
            <value>The quotation character wrapping every field.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.HasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
            <value><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.TrimmingOption">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
            <value><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.BufferSize">
            <summary>
            Gets the buffer size.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.DefaultParseErrorAction">
            <summary>
            Gets or sets the default action to take when a parsing error has occured.
            </summary>
            <value>The default action to take when a parsing error has occured.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.MissingFieldAction">
            <summary>
            Gets or sets the action to take when a field is missing.
            </summary>
            <value>The action to take when a field is missing.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.SupportsMultiline">
            <summary>
            Gets or sets a value indicating if the reader supports multiline fields.
            </summary>
            <value>A value indicating if the reader supports multiline field.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating if the reader will skip empty lines.
            </summary>
            <value>A value indicating if the reader will skip empty lines.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.DefaultHeaderName">
            <summary>
            Gets or sets the default header name when it is an empty string or only whitespaces.
            The header index will be appended to the specified name.
            </summary>
            <value>The default header name when it is an empty string or only whitespaces.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.FieldCount">
            <summary>
            Gets the maximum number of fields to retrieve for each record.
            </summary>
            <value>The maximum number of fields to retrieve for each record.</value>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.MissingFieldFlag">
            <summary>
            Indicates if one or more field are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.ParseErrorFlag">
            <summary>
            Indicates if a parse error occured for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.Item(System.Int32,System.String)">
            <summary>
            Gets the field with the specified name and record position. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name and record position.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.Item(System.Int32,System.Int32)">
            <summary>
            Gets the field at the specified index and record position.
            </summary>
            <value>
            The field at the specified index and record position.
            A <see langword="null"/> is returned if the field cannot be found for the record.
            </value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.Item(System.String)">
            <summary>
            Gets the field with the specified name. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="E:VelocityDB.Framework.IO.Csv.CsvReader.Disposed">
            <summary>
            Occurs when the instance is disposed of.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.IsDisposed">
            <summary>
            Gets a value indicating whether the instance has been disposed of.
            </summary>
            <value>
            	<see langword="true"/> if the instance has been disposed of; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.CsvReader.DataReaderValidations">
            <summary>
            Defines the data reader validations.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.DataReaderValidations.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.DataReaderValidations.IsInitialized">
            <summary>
            Validate that the data reader is initialized.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.DataReaderValidations.IsNotClosed">
            <summary>
            Validate that the data reader is not closed.
            </summary>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator">
            <summary>
            Supports a simple iteration over the records of a <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator._reader">
            <summary>
            Contains the enumerated <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator._current">
            <summary>
            Contains the current record.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator.#ctor(VelocityDB.Framework.IO.Csv.CsvReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RecordEnumerator"/> class.
            </summary>
            <param name="reader">The <see cref="T:CsvReader"/> to iterate over.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next record of the CSV.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next record, <see langword="false"/> if the enumerator has passed the end of the CSV.</returns>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first record in the CSV.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator.Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CsvReader.RecordEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader._records">
            <summary>
            Contains the cached records.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader._currentRecordIndex">
            <summary>
            Contains the current record index (inside the cached records array).
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader._readingStream">
            <summary>
            Indicates if a new record is being read from the CSV stream.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader._bindingList">
            <summary>
            Contains the binding list linked to this reader.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,VelocityDB.Framework.IO.Csv.ValueTrimmingOptions)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines how values should be trimmed.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,VelocityDB.Framework.IO.Csv.ValueTrimmingOptions,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines how values should be trimmed.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.ReadToEnd">
            <summary>
            Reads the CSV stream from the current position to the end of the stream.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.MoveToStart">
            <summary>
            Moves before the first record.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.MoveToLastCachedRecord">
            <summary>
            Moves to the last record read so far.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CachedCsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CachedCsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CachedCsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:VelocityDB.Framework.IO.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvBindingList">
            <summary>
            Represents a binding list wrapper for a CSV reader.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvBindingList._csv">
            <summary>
            Contains the linked CSV reader.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvBindingList._count">
            <summary>
            Contains the cached record count.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvBindingList._properties">
            <summary>
            Contains the cached property descriptors.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvBindingList._sort">
            <summary>
            Contains the current sort property.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvBindingList._direction">
            <summary>
            Contains the current sort direction.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvBindingList.#ctor(VelocityDB.Framework.IO.Csv.CachedCsvReader)">
            <summary>
            Initializes a new instance of the CsvBindingList class.
            </summary>
            <param name="csv"></param>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvPropertyDescriptor">
            <summary>
            Represents a CSV field property descriptor.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvPropertyDescriptor._index">
            <summary>
            Contains the field index.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvPropertyDescriptor.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the CsvPropertyDescriptor class.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="index">The field index.</param>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvPropertyDescriptor.Index">
            <summary>
            Gets the field index.
            </summary>
            <value>The field index.</value>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvRecordComparer">
            <summary>
            Represents a CSV record comparer.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvRecordComparer._field">
            <summary>
            Contains the field index of the values to compare.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvRecordComparer._direction">
            <summary>
            Contains the sort direction.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.CachedCsvReader.CsvRecordComparer.#ctor(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the CsvRecordComparer class.
            </summary>
            <param name="field">The field index of the values to compare.</param>
            <param name="direction">The sort direction.</param>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.BufferSizeTooSmall">
            <summary>
              Looks up a localized string similar to Buffer size must be 1 or more..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.CannotMovePreviousRecordInForwardOnly">
            <summary>
              Looks up a localized string similar to Cannot move to a previous record in forward-only mode..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.CannotReadRecordAtIndex">
            <summary>
              Looks up a localized string similar to Cannot read record at index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.EnumerationFinishedOrNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration has either not started or has already finished..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.EnumerationVersionCheckFailed">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.FieldHeaderNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; field header not found..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.FieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Field index must be included in [0, FieldCount[. Specified field index was : &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.MalformedCsvException">
            <summary>
              Looks up a localized string similar to The CSV appears to be corrupt near record &apos;{0}&apos; field &apos;{1} at position &apos;{2}&apos;. Current raw data : &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.MissingFieldActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported missing field action..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.NoCurrentRecord">
            <summary>
              Looks up a localized string similar to No current record..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.NoHeaders">
            <summary>
              Looks up a localized string similar to The CSV does not have headers (CsvReader.HasHeaders property is false)..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.NotEnoughSpaceInArray">
            <summary>
              Looks up a localized string similar to The number of fields in the record is greater than the available space from index to the end of the destination array..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.ParseErrorActionInvalidInsideParseErrorEvent">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid ParseErrorAction while inside a ParseError event..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.ParseErrorActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported ParseErrorAction..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.ReaderClosed">
            <summary>
              Looks up a localized string similar to This operation is invalid when the reader is closed..
            </summary>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.Resources.ExceptionMessage.RecordIndexLessThanZero">
            <summary>
              Looks up a localized string similar to Record index must be 0 or more..
            </summary>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.MalformedCsvException">
            <summary>
            Represents the exception that is thrown when a CSV file is malformed.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.MalformedCsvException._message">
            <summary>
            Contains the message that describes the error.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.MalformedCsvException._rawData">
            <summary>
            Contains the raw data when the error occured.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.MalformedCsvException._currentFieldIndex">
            <summary>
            Contains the current field index.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.MalformedCsvException._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.MalformedCsvException._currentPosition">
            <summary>
            Contains the current position in the raw data.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MalformedCsvException.#ctor">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MalformedCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MalformedCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MalformedCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MalformedCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MalformedCsvException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.MalformedCsvException.RawData">
            <summary>
            Gets the raw data when the error occured.
            </summary>
            <value>The raw data when the error occured.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.MalformedCsvException.CurrentPosition">
            <summary>
            Gets the current position in the raw data.
            </summary>
            <value>The current position in the raw data.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.MalformedCsvException.CurrentRecordIndex">
            <summary>
            Gets the current record index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.MalformedCsvException.CurrentFieldIndex">
            <summary>
            Gets the current field index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.MalformedCsvException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception.</value>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.MissingFieldAction">
            <summary>
            Specifies the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.MissingFieldAction.ParseError">
            <summary>
            Treat as a parsing error.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.MissingFieldAction.ReplaceByEmpty">
            <summary>
            Replaces by an empty value.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.MissingFieldAction.ReplaceByNull">
            <summary>
            Replaces by a null value (<see langword="null"/>).
            </summary>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.MissingFieldCsvException">
            <summary>
            Represents the exception that is thrown when a there is a missing field in a record of the CSV file.
            </summary>
            <remarks>
            MissingFieldException would have been a better name, but there is already a <see cref="T:System.MissingFieldException"/>.
            </remarks>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MissingFieldCsvException.#ctor">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.ParseErrorAction">
            <summary>
            Specifies the action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.ParseErrorAction.RaiseEvent">
            <summary>
            Raises the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.ParseErrorAction.AdvanceToNextLine">
            <summary>
            Tries to advance to next line.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.ParseErrorAction.ThrowException">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="T:VelocityDB.Framework.IO.Csv.ParseErrorEventArgs">
            <summary>
            Provides data for the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.ParseErrorEventArgs._error">
            <summary>
            Contains the error that occured.
            </summary>
        </member>
        <member name="F:VelocityDB.Framework.IO.Csv.ParseErrorEventArgs._action">
            <summary>
            Contains the action to take.
            </summary>
        </member>
        <member name="M:VelocityDB.Framework.IO.Csv.ParseErrorEventArgs.#ctor(VelocityDB.Framework.IO.Csv.MalformedCsvException,VelocityDB.Framework.IO.Csv.ParseErrorAction)">
            <summary>
            Initializes a new instance of the ParseErrorEventArgs class.
            </summary>
            <param name="error">The error that occured.</param>
            <param name="defaultAction">The default action to take.</param>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.ParseErrorEventArgs.Error">
            <summary>
            Gets the error that occured.
            </summary>
            <value>The error that occured.</value>
        </member>
        <member name="P:VelocityDB.Framework.IO.Csv.ParseErrorEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
            <value>The action to take.</value>
        </member>
        <member name="T:VelocityDb.AlreadyInTransactionException">
            <summary>
            Exception thrown when attempting to start a transaction when an active transaction already exist.
            </summary>
        </member>
        <member name="T:VelocityDb.DatabaseAlreadyExistsException">
            <summary>
            Exception thrown when trying to create a <see cref="T:VelocityDb.Database"/> that already exist (file system file exist).
            </summary>
        </member>
        <member name="T:VelocityDb.DatabaseDoesNotExistException">
            <summary>
            Exception thrown when the requested &gt;<see cref="T:VelocityDb.Database"/> does not exist.
            </summary>
        </member>
        <member name="T:VelocityDb.DesKeyMissingException">
            <summary>
            Exception thrown when an internal error was detected. This type of error is most likly due to a bug in VelocityDb.
            </summary>
        </member>
        <member name="T:VelocityDb.FieldDoesNotExistException">
            <summary>
            Exception thrown when specifying a field name that does not exist in the given class/struct.
            </summary>
        </member>
        <member name="T:VelocityDb.IndexDatabaseNotSpecifiedException">
            <summary>
            Exception thrown when attempting to open an in database index without specifying a database.
            </summary>
        </member>
        <member name="T:VelocityDb.IndexDatabaseOrBTreeMissingException">
            <summary>
            Exception thrown when attempting to open an in database index without specifying a database.
            </summary>
        </member>
        <member name="T:VelocityDb.IndexDatabaseSpecifiedForGlobalIndexException">
            <summary>
            Exception thrown when attempting to open a global index and specifying a database.
            </summary>
        </member>
        <member name="T:VelocityDb.InTransactionException">
            <summary>
            Exception thrown when calling certain SessionBase api that requires that session IS NOT in an active transaction.
            </summary>
        </member>
        <member name="T:VelocityDb.InvalidChangeOfDatabaseLocation">
            <summary>
            Exception thrown when trying to do an invalid change of a <see cref="T:VelocityDb.DatabaseLocation"/>. It could be a change to the start database number that if permitted skips one or more other DatabaseLocations.
            </summary>
        </member>
        <member name="T:VelocityDb.InvalidChangeOfDefaultLocationException">
            <summary>
            Exception thrown when trying to do an invalid change of the startup <see cref="T:VelocityDb.DatabaseLocation"/>.
            </summary>
        </member>
        <member name="T:VelocityDb.NotInTransactionException">
            <summary>
            Exception thrown when trying to do persitent operations without first starting a transaction.
            </summary>
        </member>
        <member name="T:VelocityDb.ObjectDoesNotExistException">
            <summary>
            Exception thrown when the requested &gt;<see cref="T:VelocityDb.IOptimizedPersistable"/> does not exist.
            </summary>
        </member>
        <member name="T:VelocityDb.ObjectNotInSameDatabaseAsOidShortCollectionException">
            <summary>
            Exception thrown when object is not in the same database as a ShortOid collection <see cref="T:VelocityDb.Database"/> failed.
            </summary>
        </member>
        <member name="T:VelocityDb.PageDoesNotExistException">
            <summary>
            Exception thrown when the requested &gt;<see cref="T:VelocityDb.Page"/> does not exist.
            </summary>
        </member>
        <member name="T:VelocityDb.PersistedObjectExcpectedException">
            <summary>
            Exception thrown when a persisted object wsa expected but was not.
            </summary>
        </member>
        <member name="T:VelocityDb.RequestedPlacementDatabaseNumberNotValidException">
            <summary>
            Exception thrown when a requested placement Database number is invalid.
            </summary>
        </member>
        <member name="T:VelocityDb.RequestedPlacementPageNumberNotValidException">
            <summary>
            Exception thrown when a requested placement Page number is invalid.
            </summary>
        </member>
        <member name="T:VelocityDb.SubscriptionsNotAvailableWithNoServerSessionException">
            <summary>
            Exception thrown when trying to use event subscription api with NON server session. Subscriptions require use of server.
            </summary>
        </member>
        <member name="T:VelocityDb.SystemDatabaseNotFoundWithReadonlyTransactionException">
            <summary>
            Exception thrown when a readonly transaction try to open a non existing Database 0
            </summary>
        </member>
        <member name="M:VelocityDb.SystemDatabaseNotFoundWithReadonlyTransactionException.#ctor(System.String)">
            <summary>
            Use for unexpected events
            </summary>
            <param name="message">Describe the unexpected event</param>
        </member>
        <member name="T:VelocityDb.TryingToBeginReadOnlyTransactionWhileInUpdateTransactionException">
            <summary>
            Exception thrown when attempting to start a read only transaction while in an update transaction.
            </summary>
        </member>
        <member name="T:VelocityDb.TryingToDeleteDeletedDatabaseException">
            <summary>
            Exception thrown when attempting to delete a Database that already was deleted in the same transaction
            </summary>
        </member>
        <member name="T:VelocityDb.UniqueConstraintException">
            <summary>
            Exception thrown when attempting to open an in database index without specifying a database.
            </summary>
        </member>
        <member name="T:VelocityDb.WeakIOptimizedPersistableReferenceMustBePersistentException">
            <summary>
            Exception thrown when a persisted object wsa expected but was not.
            </summary>
        </member>
        <member name="T:VelocityDb.FieldAccessor">
            <summary>
            A field attribute that controlls how many objects that will be placed on the same page as the object of the field.
            </summary>
        </member>
        <member name="M:VelocityDb.FieldAccessor.#ctor(System.String)">
            <summary>
            Use in class defenition preceeding a property declaration, i.e. [FieldAccessor("myProtectedField")] where myProtectedField is the field name of the field returned by the property.
            </summary>
            <param name="fieldName">Name of field.</param>
        </member>
        <member name="P:VelocityDb.FieldAccessor.FieldName">
            <summary>
            Gets the field name of the field beeing accessed by the property
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="T:VelocityDb.Indexing.Index">
            <summary>
            
            </summary>
        </member>
        <member name="M:VelocityDb.Indexing.Index.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.Indexes">
            <summary>
            Tracks all indexes in a federation
            </summary>
        </member>
        <member name="P:VelocityDb.Indexing.Indexes.PlacementDatabaseNumber">
            <summary>
            Hint about where to persist DatabaseLocation
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.NamespaceDoc">
            <summary>    
            The <c>VelocityDB.Indexing</c> namespace contains classes for the VelocityDB indexing feature
            </summary>      
        </member>
        <member name="T:VelocityDb.Indexing.OnePerDatabase">
            <summary>
             Use this attribute if you want each index to contain objects of a single database, this type of index is stored within the same database as its indexed objects.
            </summary>
        </member>
        <member name="T:VelocityDb.CacheEnum">
            <summary>
            Choices for object caching
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.No">
            <summary>
            Do not cache
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.Yes">
            <summary>
            Always cache
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.is64Bit">
            <summary>
            Cache if running as 64 bit process
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.RamAvailable5Gb">
            <summary>
            Cache uf at least 5GB memory is available
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.RamAvailable10Gb">
            <summary>
            Cache uf at least 10GB memory is available
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.RamAvailable20Gb">
            <summary>
            Cache uf at least 20GB memory is available
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.Available100Gb">
            <summary>
            Cache uf at least 100GB memory is available
            </summary>
        </member>
        <member name="T:VelocityDb.OpFlags">
            <summary>
            Flag bits for a persistent object
            </summary>
        </member>
        <member name="F:VelocityDb.OpFlags.isUpdated">
            <summary>
            Object is updated
            </summary>
        </member>
        <member name="F:VelocityDb.OpFlags.membersLoaded">
            <summary>
            All members have been loaded
            </summary>
        </member>
        <member name="T:VelocityDb.NamespaceDoc">
            <summary>    
            The <see cref="N:VelocityDb"/> namespace contains classes for the VelocityDB Object Database.   
            </summary>      
        </member>
        <member name="T:VelocityDb.ObjectsPerPage">
            <summary>
            A field attribute that controlls how many objects that will be placed on the same page as the object of the field.
            </summary>
        </member>
        <member name="M:VelocityDb.ObjectsPerPage.#ctor(System.UInt16)">
            <summary>
            Use in class defenition preceeding a field declaration, i.e. [ObjectsPerPage(1)]
            </summary>
            <param name="limitPerPage">The requested maximum number of objects on the page.</param>
        </member>
        <member name="P:VelocityDb.ObjectsPerPage.LimitPerPage">
            <summary>
            Gets the requested maximum number of objects on the page
            </summary>
            <value>The <see cref="T:System.UInt16"/> number of objects.</value>
        </member>
        <member name="T:VelocityDb.DataCache">
            <summary>
            Object maintains a list of pages accessed by a session, pages are removed from the list when there is not enough memory available. This makes such pages eligble for garbage collection while in list pages are prevented from being garbage collected.
            </summary>
        </member>
        <member name="M:VelocityDb.DataCache.Clear">
            <summary>
            Clear cache of cached pages
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.UnauthorizedPerformanceCounter">
            <summary>
            Web server process isn't by default permitted to use PerformanceCounter
            See: http://blogs.msdn.com/b/bclteam/archive/2006/09/08/746900.aspx
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.MaximumMemoryUse">
            <summary>
            Maximum number of bytes to allow for this Process (reduces cached objects and pages when memory allocated reaches this soft limit)
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.AvailableRamMB">
            <summary>
            Current available memory in MB as calculated by using PerformanceCounter or current use relative to MaximumMemoryUse
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.PageCacheEnabled">
            <summary>
            Enable or disable page cache. In cases where pages are not going to be revistited, performance may be improved by disabling the page cache. In other cases leave the page cache enabled (the default)
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.MinimumAvailableMegaBytes">
            <summary>
            Decide the minimum amount of available memory before reducing page caching and flushing updated pages.
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.VelocityDbHashSet`1">
            <summary>
            A hash code based set
            </summary>
            <typeparam name="T">The object type of objects in the hashset</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor">
            <summary>
            Creates a hashset using a default equality comparer
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates hashset with a given equality comparer
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new hashset using the default equlaity comparer
            </summary>
            <param name="collection">Initial objects added to the hashset</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Implementation Notes: 
            Since resizes are relatively expensive (require rehashing), this attempts to minimize 
            the need to resize by setting the initial capacity based on size of collection.
            </summary> 
            <param name="collection"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by serializtion (but not by VelocityDb persistent serializtion)
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add item to this hashset. This is the explicit implementation of the ICollection
            interface. The other Add method returns bool indicating whether item was added. 
            </summary>
            <param name="item">item to add</param> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Clear">
            <summary>
            Remove all items from this set. This clears the elements but not the underlying
            buckets and slots array. Follow this call by TrimExcess to release these. 
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Contains(`0)">
            <summary>
            Checks if this hashset contains the item 
            </summary>
            <param name="item">item to check for containment</param> 
            <returns>true if item contained; false if not</returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.CopyTo(`0[],System.Int32)">
            <summary> 
            Copy items in this hashset to array, starting at arrayIndex
            </summary> 
            <param name="array">array to add items to</param> 
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Remove(`0)">
            <summary> 
            Remove item from this hashset
            </summary> 
            <param name="item">item to remove</param> 
            <returns>true if removed; false if not (i.e. if the item wasn't in the VelocityDbHashSet)</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An Enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization usage other than VelocityDb serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Add(`0)">
            <summary> 
            Add item to this VelocityDbHashSet. Returns bool indicating whether item was added (won't be 
            added if already present)
            </summary> 
            <param name="item"></param>
            <returns>true if added, false if already present</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Take the union of this VelocityDbHashSet with other. Modifies this set.
            
            Implementation note: GetSuggestedCapacity (to increase capacity in advance avoiding
            multiple resizes ended up not being useful in practice; quickly gets to the
            point where it's a wasteful check.
            </summary> 
            <param name="other">enumerable with items to add</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Takes the intersection of this set with other. Modifies this set.
            
            Implementation Notes:
            We get better perf if other is a hashset using same equality comparer, because we
            get constant contains check in other. Resulting cost is O(n1) to iterate over this.
            
            If we can't go above route, iterate over the other and mark intersection by checking
            contains in this. Then loop over and delete any unmarked elements. Total cost is n2+n1. 
            
            Attempts to return early based on counts alone, using the property that the
            intersection of anything with the empty set is the empty set. 
            </summary>
            <param name="other">enumerable with items to add </param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove items in other from this set. Modifies this set.
            </summary> 
            <param name="other">enumerable with items to remove</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Takes symmetric difference (XOR) with other and this set. Modifies this set.
            </summary>
            <param name="other">enumerable with items to XOR</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Checks if this is a subset of other. 
            
             Implementation Notes: 
             The following properties are used up-front to avoid element-wise checks: 
             1. If this is the empty set, then it's a subset of anything, including the empty set
             2. If other has unique elements according to this equality comparer, and this has more 
             elements than other, then it can't be a subset.
            
             Furthermore, if other is a hashset using the same equality comparer, we can use a
             faster element-wise check. 
             </summary>
             <param name="other"></param> 
             <returns>true if this is a subset of other; false if not</returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Checks if this is a proper subset of other (i.e. strictly contained in) 
             
             Implementation Notes:
             The following properties are used up-front to avoid element-wise checks: 
             1. If this is the empty set, then it's a proper subset of a set that contains at least
             one element, but it's not a proper subset of the empty set.
             2. If other has unique elements according to this equality comparer, and this has >=
             the number of elements in other, then this can't be a proper subset. 
            
             Furthermore, if other is a hashset using the same equality comparer, we can use a 
             faster element-wise check. 
             </summary>
             <param name="other"></param> 
             <returns>true if this is a proper subset of other; false if not</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks if this is a superset of other
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If other has no elements (it's the empty set), then this is a superset, even if this
            is also the empty set. 
            2. If other has unique elements according to this equality comparer, and this has less
            than the number of elements in other, then this can't be a superset 
            
            </summary>
            <param name="other"></param> 
            <returns>true if this is a superset of other; false if not</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary> 
             Checks if this is a proper superset of other (i.e. other strictly contained in this)
            
             Implementation Notes:
             This is slightly more complicated than above because we have to keep track if there 
             was at least one element not contained in other.
             
             The following properties are used up-front to avoid element-wise checks: 
             1. If this is the empty set, then it can't be a proper superset of any set, even if
             other is the empty set. 
             2. If other is an empty set and this contains at least 1 element, then this is a proper
             superset.
             3. If other has unique elements according to this equality comparer, and other's count
             is greater than or equal to this count, then this can't be a proper superset 
            
             Furthermore, if other has unique elements according to this equality comparer, we can 
             use a faster element-wise check. 
             </summary>
             <param name="other"></param> 
             <returns>true if this is a proper superset of other; false if not</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set overlaps other (i.e. they share at least one item) 
            </summary>
            <param name="other"></param> 
            <returns>true if these have at least one common element; false if disjoint</returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks if this and other contain the same elements. This is set equality: 
            duplicates and order are ignored
            </summary> 
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.CopyTo(`0[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the target array. 
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List(Of T) to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List(Of T). The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the source List(Of T) at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Remove elements that match specified predicate. Returns the number of elements removed 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.TrimExcess">
             <summary>
             Sets the capacity of this list to the size of the list (rounded up to nearest prime), 
             unless count is 0, in which case we release references.
            
             This method can be used to minimize a list's memory overhead once it is known that no
             new elements will be added to the list. To completely clear a list and release all 
             memory referenced by the list, execute the following statements:
             
             list.Clear(); 
             list.TrimExcess();
             </summary> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.CreateSetComparer">
            <summary>
            Used for deep equality of VelocityDbHashSet testing 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Initialize(System.Int32)">
            <summary>
            Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
            greater than or equal to capacity. 
            </summary>
            <param name="capacity"></param> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IncreaseCapacity">
            <summary> 
            Expand to new capacity. New capacity is next prime greater than or equal to suggested
            size. This is called when the underlying array is filled. This performs no 
            defragmentation, allowing faster execution; note that this is reasonable since
            AddIfNotPresent attempts to insert new elements in re-opened spots.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.AddIfNotPresent(`0)">
            <summary>
            Adds value to VelocityDbHashSet if not contained already
            Returns true if added and false if already present 
            </summary>
            <param name="value">value to find</param> 
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.ContainsAllElements(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks if this contains of other's elements. Iterates over other's elements and
            returns false as soon as it finds an element in other that's not in this. 
            Used by SupersetOf, ProperSupersetOf, and SetEquals.
            </summary>
            <param name="other"></param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsSubsetOfHashSetWithSameEC(VelocityDb.Collection.VelocityDbHashSet{`0})">
             <summary>
             Implementation Notes: 
             If other is a hashset and is using same equality comparer, then checking subset is 
             faster. Simply check that each element in this is in other.
             
             Note: if other doesn't use same equality comparer, then Contains check is invalid,
             which is why callers must take are of this.
            
             If callers are concerned about whether this is a proper subset, they take care of that. 
            
             </summary> 
             <param name="other"></param> 
             <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IntersectWithHashSetWithSameEC(VelocityDb.Collection.VelocityDbHashSet{`0})">
            <summary>
            If other is a hashset that uses same equality comparer, intersect is much faster
            because we can use other's Contains
            </summary> 
            <param name="other"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.InternalIndexOf(`0)">
            <summary>
            Used internally by set operations which have to rely on bit array marking. This is like 
            Contains but returns index in slots array.
            </summary> 
            <param name="item"></param> 
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.SymmetricExceptWithUniqueHashSet(VelocityDb.Collection.VelocityDbHashSet{`0})">
            <summary> 
            if other is a set, we can assume it doesn't have duplicate elements, so use this
            technique: if can't remove, then it wasn't present in this set, so add. 
            
            As with other methods, callers take care of ensuring that other is a hashset using the
            same equality comparer. 
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.AddOrGetLocation(`0,System.Int32@)">
            <summary> 
            Add if not already in hashset. Returns an out param indicating index where added. This 
            is used by SymmetricExcept because it needs to know the following things:
            - whether the item was already present in the collection or added from other 
            - where it's located (if already present, it will get marked for removal, otherwise
            marked for keeping)
            </summary>
            <param name="value"></param> 
            <param name="location"></param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.ToArray">
            <summary> 
            Copies this to an array. Used for DebugView 
            </summary>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.HashSetEquals(VelocityDb.Collection.VelocityDbHashSet{`0},VelocityDb.Collection.VelocityDbHashSet{`0},System.Collections.Generic.IEqualityComparer{`0})">
             <summary> 
             Internal method used for HashSetEqualityComparer. Compares set1 and set2 according
             to specified comparer. 
            
             Because items are hashed according to a specific equality comparer, we have to resort
             to n^2 search if they're using different equality comparers.
             </summary> 
             <param name="set1"></param>
             <param name="set2"></param> 
             <param name="comparer"></param> 
             <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.AreEqualityComparersEqual(VelocityDb.Collection.VelocityDbHashSet{`0},VelocityDb.Collection.VelocityDbHashSet{`0})">
            <summary> 
            Checks if equality comparers are equal. This is used for algorithms that can
            speed up if it knows the other item has unique elements. I.e. if they're using 
            different equality comparers, then uniqueness assumption between sets break. 
            </summary>
            <param name="set1"></param> 
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.InternalGetHashCode(`0)">
            <summary> 
            Workaround Comparers that throw ArgumentNullException for GetHashCode(null).
            </summary> 
            <param name="item"></param>
            <returns>hash code</returns>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.Count">
            <summary> 
            Number of elements in this hashset
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary> 
            Whether this is readonly
            </summary> 
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.Comparer">
            <summary> 
            Gets the IEqualityComparer that is used to determine equality of keys for
            the VelocityDbHashSet. 
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.VelocityDbHashSet`1.Enumerator">
            <summary>
            Enumerates the elements of a VelocityDbHashSet(Of T).
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.Enumerator.Current">
            <summary>
            The iterator current Key object
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.VelocityDbListOidShort`1">
            <summary>
            List of objects where list and all elements of a list are contained within a single <see cref="T:VelocityDb.Database"/>
            </summary>
            <typeparam name="T">The element type of a list.</typeparam>
        </member>
        <member name="T:VelocityDb.Collection.VelocityDbList`1">
            <summary>
            A list with an Oid containing objects ordered by index.
            </summary>
            <typeparam name="T">The type of objects contained in this kind of list</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.#ctor">
            <summary>
            Contrsucts an empty list
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.#ctor(System.Int32)">
            <summary>
            Constructs a new list with a presized capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Add(`0)">
            <summary>
            Adds an item to a list
            </summary>
            <param name="item">item being added</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Add(`0,System.Int32)">
            <summary>
            Adds an item to a list and if array needs to grow to hold new item, it grows to a given max size.
            </summary>
            <param name="item">item being added</param>
            <param name="maxArraySize">the maximum size to use as internal array size</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Clear">
            <summary>
            Removes all items from the list and frees the array
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Contains(`0)">
            <summary>
            Checks if an item is contained in the list
            </summary>
            <param name="item">the item to look for</param>
            <returns>true if item was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies list items to an array
            </summary>
            <param name="array">the array to copy to</param>
            <param name="arrayIndex">start array index of copy</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates items in a list
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.IndexOf(`0)">
            <summary>
            Finds the first index of an item
            </summary>
            <param name="item">item to look for</param>
            <returns>-1 if item was not found or first index of item</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index
            </summary>
            <param name="index">insert at this index</param>
            <param name="item">the item being inserted</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Insert(System.Int32,`0,System.Int32)">
            <summary>
            Inserts an item at a specified index
            </summary>
            <param name="index">insert at this index</param>
            <param name="item">the item being inserted</param>
            <param name="maxArraySize">Restrict array growth to this maximum size (if array needs to grow)</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Remove(`0)">
            <summary>
            Remove an item
            </summary>
            <param name="item">the item to remove</param>
            <returns>true if item was found and removed; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified index
            </summary>
            <param name="index">the index of the item to remove</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items
            </summary>
            <param name="index">start index</param>
            <param name="howMany">how many to remove</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies list to an array
            </summary>
            <param name="array">the array to copy to</param>
            <param name="arrayIndex">start index in array for copy</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Last">
            <summary>
            Get the value at the last position in the list
            </summary>
            <returns>The value at the last position in the list</returns>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.Count">
            <summary>
            Number of items in list
            </summary>  
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.ObjectsPerPage">
            <summary>
            Limit to 1000 per page (instead of default 40000)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.Item(System.Int32)">
            <summary>
            Gets or sets an item at a certain index
            </summary>
            <param name="index">the item index</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.IsFixedSize">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.IsReadOnly">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.SyncRoot">
            <summary>
            Used for thread safety
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.IsSynchronized">
            <summary>
            Always false
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbListOidShort`1.#ctor(System.Int32)">
            <summary>
            Creates a new list with a presized capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:VelocityDb.Collection.SortedSetOidShort`1">
            <summary>
            A sorted set where the set and all its elements are contained in a single <see cref="T:VelocityDb.Database"/>
            </summary>
            <typeparam name="Key">The type of elements in the set.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetOidShort`1.#ctor">
            <summary>
            Constructs an OidShort based sorted set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetOidShort`1.#ctor(System.Int32)">
            <summary>
            Constructs an OidShort based sorted set with an initial presized capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetOidShort`1.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a new sorted set with a given object comparator.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetOidShort`1.Comparer">
            <summary>
            Gets the object comparator
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetOidShort`1.Keys">
            <summary>
            Gets the internal sorted list of objects contained in the set.
            </summary>
        </member>
        <member name="P:VelocityDb.PageSlotsWeak.Item(System.UInt16)">
            <summary>
            Use only for replacing values when cloning
            </summary>
            <param name="slotNumber"></param>
            <returns></returns>
        </member>
        <member name="T:VelocityDB.Server.BlockingWaitStrategy">
            <summary>
            Blocking strategy that uses a lock and condition variable for <see cref="T:VelocityDB.Server.IEventProcessor"/>s waiting on a barrier.
            
            This strategy should be used when performance and low-latency are not as important as CPU resource.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.IWaitStrategy">
            <summary>
            Strategy employed for making <see cref="T:VelocityDB.Server.IEventProcessor"/>s wait on a <see cref="T:VelocityDB.Server.RingBuffer`1"/>.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.IWaitStrategy.WaitFor(System.Int64,VelocityDB.Server.Sequence,VelocityDB.Server.Sequence[],VelocityDB.Server.ISequenceBarrier)">
            <summary>
            Wait for the given sequence to be available
            </summary>
            <param name="sequence">sequence to be waited on.</param>
            <param name="cursor">Ring buffer cursor on which to wait.</param>
            <param name="dependents">dependents further back the chain that must advance first</param>
            <param name="barrier">barrier the <see cref="T:VelocityDB.Server.IEventProcessor"/> is waiting on.</param>
            <returns>the sequence that is available which may be greater than the requested sequence.</returns>
        </member>
        <member name="M:VelocityDB.Server.IWaitStrategy.WaitFor(System.Int64,VelocityDB.Server.Sequence,VelocityDB.Server.Sequence[],VelocityDB.Server.ISequenceBarrier,System.TimeSpan)">
            <summary>
            Wait for the given sequence to be available with a timeout specified.
            </summary>
            <param name="sequence">sequence to be waited on.</param>
            <param name="cursor">cursor on which to wait.</param>
            <param name="dependents">dependents further back the chain that must advance first</param>
            <param name="barrier">barrier the processor is waiting on.</param>
            <param name="timeout">timeout value to abort after.</param>
            <returns>the sequence that is available which may be greater than the requested sequence.</returns>
            <exception cref="T:VelocityDB.Server.AlertException">AlertException if the status of the Disruptor has changed.</exception>
        </member>
        <member name="M:VelocityDB.Server.IWaitStrategy.SignalAllWhenBlocking">
            <summary>
            Signal those <see cref="T:VelocityDB.Server.IEventProcessor"/> waiting that the cursor has advanced.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.BlockingWaitStrategy.WaitFor(System.Int64,VelocityDB.Server.Sequence,VelocityDB.Server.Sequence[],VelocityDB.Server.ISequenceBarrier)">
            <summary>
            Wait for the given sequence to be available
            </summary>
            <param name="sequence">sequence to be waited on.</param>
            <param name="cursor">Ring buffer cursor on which to wait.</param>
            <param name="dependents">dependents further back the chain that must advance first</param>
            <param name="barrier">barrier the <see cref="T:VelocityDB.Server.IEventProcessor"/> is waiting on.</param>
            <returns>the sequence that is available which may be greater than the requested sequence.</returns>
        </member>
        <member name="M:VelocityDB.Server.BlockingWaitStrategy.WaitFor(System.Int64,VelocityDB.Server.Sequence,VelocityDB.Server.Sequence[],VelocityDB.Server.ISequenceBarrier,System.TimeSpan)">
            <summary>
            Wait for the given sequence to be available with a timeout specified.
            </summary>
            <param name="sequence">sequence to be waited on.</param>
            <param name="cursor">cursor on which to wait.</param>
            <param name="dependents">dependents further back the chain that must advance first</param>
            <param name="barrier">barrier the processor is waiting on.</param>
            <param name="timeout">timeout value to abort after.</param>
            <returns>the sequence that is available which may be greater than the requested sequence.</returns>
            <exception cref="T:VelocityDB.Server.AlertException">AlertException if the status of the Disruptor has changed.</exception>
        </member>
        <member name="M:VelocityDB.Server.BlockingWaitStrategy.SignalAllWhenBlocking">
            <summary>
            Signal those <see cref="T:VelocityDB.Server.IEventProcessor"/> waiting that the cursor has advanced.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.IEventProcessor">
            <summary>
            <see cref="T:VelocityDB.Server.IEventProcessor"/> waitFor events to become available for consumption from the <see cref="T:VelocityDB.Server.RingBuffer`1"/>
            </summary>
        </member>
        <member name="M:VelocityDB.Server.IEventProcessor.Halt">
            <summary>
            Signal that this <see cref="T:VelocityDB.Server.IEventProcessor"/> should stop when it has finished consuming at the next clean break.
            It will call <see cref="M:VelocityDB.Server.ISequenceBarrier.Alert"/> to notify the thread to check status.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.IEventProcessor.Run">
            <summary>
            Starts this instance 
            </summary>
        </member>
        <member name="P:VelocityDB.Server.IEventProcessor.Sequence">
            <summary>
            Return a reference to the <see cref="P:VelocityDB.Server.IEventProcessor.Sequence"/> being used by this <see cref="T:VelocityDB.Server.IEventProcessor"/>
            </summary>
        </member>
        <member name="T:VelocityDB.Server.InsufficientCapacityException">
            <summary>
            Used to alert <see cref="T:VelocityDB.Server.IEventProcessor"/>s waiting at a <see cref="T:VelocityDB.Server.ISequenceBarrier"/> of status changes.
            </summary>
        </member>
        <member name="F:VelocityDB.Server.InsufficientCapacityException.Instance">
            <summary>
            Pre-allocated exception to avoid garbage generation
            </summary>
        </member>
        <member name="M:VelocityDB.Server.InsufficientCapacityException.#ctor">
            <summary>
            Private constructor so only a single instance exists.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.ISequenceBarrier">
            <summary>
            Coordination barrier for tracking the cursor for producers and sequence of
            dependent <see cref="T:VelocityDB.Server.IEventProcessor"/>s for a <see cref="T:VelocityDB.Server.RingBuffer`1"/>
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ISequenceBarrier.WaitFor(System.Int64)">
            <summary>
            Wait for the given sequence to be available for consumption.
            </summary>
            <param name="sequence">sequence to wait for</param>
            <returns>the sequence up to which is available</returns>
            <exception cref="T:VelocityDB.Server.AlertException">if a status change has occurred for the Disruptor</exception>
        </member>
        <member name="M:VelocityDB.Server.ISequenceBarrier.WaitFor(System.Int64,System.TimeSpan)">
            <summary>
            Wait for the given sequence to be available for consumption with a time out.
            </summary>
            <param name="sequence">sequence to wait for</param>
            <param name="timeout">timeout value</param>
            <returns>the sequence up to which is available</returns>
            <exception cref="T:VelocityDB.Server.AlertException">if a status change has occurred for the Disruptor</exception>
        </member>
        <member name="M:VelocityDB.Server.ISequenceBarrier.Alert">
            <summary>
             Alert the <see cref="T:VelocityDB.Server.IEventProcessor"/> of a status change and stay in this status until cleared.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ISequenceBarrier.ClearAlert">
            <summary>
            Clear the current alert status.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ISequenceBarrier.CheckAlert">
            <summary>
            Check if an alert has been raised and throw an <see cref="T:VelocityDB.Server.AlertException"/> if it has.
            </summary>
            <exception cref="T:VelocityDB.Server.AlertException">AlertException if alert has been raised.</exception>
        </member>
        <member name="P:VelocityDB.Server.ISequenceBarrier.Cursor">
            <summary>
            Delegate a call to the <see cref="P:VelocityDB.Server.Sequencer.Cursor"/>
            Returns the value of the cursor for events that have been published.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ISequenceBarrier.IsAlerted">
            <summary>
            The current alert status for the barrier.
            Returns true if in alert otherwise false.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.MultiThreadedLowContentionClaimStrategy">
            <summary>
            Strategy to be used when there are multiple producer threads claiming sequences.
            
            This strategy requires sufficient cores to allow multiple publishers to be concurrently claiming sequences.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.MultiThreadedLowContentionClaimStrategy.#ctor(System.Int32)">
            <summary>
            Construct a new multi-threaded publisher <see cref="T:VelocityDB.Server.IClaimStrategy"/> for a given buffer size.
            </summary>
            <param name="bufferSize">bufferSize for the underlying data structure.</param>
        </member>
        <member name="M:VelocityDB.Server.MultiThreadedLowContentionClaimStrategy.SerialisePublishing(System.Int64,VelocityDB.Server.Sequence,System.Int64)">
            <summary>
             Serialise publishers in sequence and set cursor to latest available sequence.
            </summary>
            <param name="sequence">sequence to be applied</param>
            <param name="cursor">cursor to serialise against.</param>
            <param name="batchSize">batchSize of the sequence.</param>
        </member>
        <member name="T:VelocityDB.Server.MutableLong">
            <summary>
            Holder class for a long value.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.MutableLong.#ctor(System.Int64)">
            <summary>
             Create a new instance of a mutable long
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:VelocityDB.Server.MutableLong.Value">
            <summary>
            Internal value
            </summary>
        </member>
        <member name="T:VelocityDB.Server.ProcessingSequenceBarrier">
            <summary>
            <see cref="T:VelocityDB.Server.ISequenceBarrier"/> handed out for gating <see cref="T:VelocityDB.Server.IEventProcessor"/> on a cursor sequence and optional dependent <see cref="T:VelocityDB.Server.IEventProcessor"/>s
            </summary>
        </member>
        <member name="T:VelocityDB.Server.RingBuffer`1">
            <summary>
            Ring based store of reusable entries containing the data representing an event being exchanged between event publisher and <see cref="T:VelocityDB.Server.IEventProcessor"/>s.
            </summary>
            <typeparam name="T">implementation storing the data for sharing during exchange or parallel coordination of an event.</typeparam>
        </member>
        <member name="T:VelocityDB.Server.Sequencer">
            <summary>
            Coordinator for claiming sequences for access to a data structure while tracking dependent <see cref="T:VelocityDB.Server.Sequence"/>s
            </summary>
        </member>
        <member name="F:VelocityDB.Server.Sequencer.InitialCursorValue">
            <summary>
            Set to -1 as sequence starting point
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.#ctor(VelocityDB.Server.IClaimStrategy,VelocityDB.Server.IWaitStrategy)">
            <summary>
            Construct a Sequencer with the selected strategies.
            </summary>
            <param name="claimStrategy">claimStrategy for those claiming sequences.</param>
            <param name="waitStrategy">waitStrategy for those waiting on sequences.</param>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.SetGatingSequences(VelocityDB.Server.Sequence[])">
            <summary>
            Set the sequences that will gate publishers to prevent the buffer wrapping.
            
            This method must be called prior to claiming sequences otherwise
            a <see cref="T:System.NullReferenceException"/> will be thrown.
            </summary>
            <param name="sequences">sequences to be to be gated on.</param>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.NewBarrier(VelocityDB.Server.Sequence[])">
            <summary>
            Create a <see cref="T:VelocityDB.Server.ISequenceBarrier"/> that gates on the the cursor and a list of <see cref="T:VelocityDB.Server.Sequence"/>s
            </summary>
            <param name="sequencesToTrack"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.NewBatchDescriptor(System.Int32)">
            <summary>
            Create a new {@link BatchDescriptor} that is the minimum of the requested size
            and the buffer size.
            </summary>
            <param name="size">size for the batch</param>
            <returns>the new <see cref="T:VelocityDB.Server.BatchDescriptor"/></returns>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.HasAvailableCapacity(System.Int32)">
            <summary>
            Has the buffer got capacity to allocate another sequence.  This is a concurrent
            method so the response should only be taken as an indication of available capacity.
            </summary>
            <param name="availableCapacity">availableCapacity in the buffer</param>
            <returns>true if the buffer has the capacity to allocate the next sequence otherwise false.</returns>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.Next">
            <summary>
            Claim the next event in sequence for publishing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.TryNext(System.Int32)">
            <summary>
            Attempt to claim the next event in sequence for publishing.  Will return the
            number of the slot if there is at least <param name="availableCapacity"></param> slots
            available. 
            </summary>
            <returns>the claimed sequence value</returns>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.Next(VelocityDB.Server.BatchDescriptor)">
            <summary>
            Claim the next batch of sequence numbers for publishing.
            </summary>
            <param name="batchDescriptor">batchDescriptor to be updated for the batch range.</param>
            <returns>the updated batchDescriptor.</returns>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.Claim(System.Int64)">
            <summary>
            Claim a specific sequence when only one publisher is involved.
            </summary>
            <param name="sequence">sequence to be claimed.</param>
            <returns>sequence just claimed.</returns>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.Publish(System.Int64)">
            <summary>
            Publish an event and make it visible to <see cref="T:VelocityDB.Server.IEventProcessor"/>s
            </summary>
            <param name="sequence">sequence to be published</param>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.Publish(VelocityDB.Server.BatchDescriptor)">
            <summary>
            Publish the batch of events in sequence.
            </summary>
            <param name="batchDescriptor">batchDescriptor to be published.</param>
        </member>
        <member name="M:VelocityDB.Server.Sequencer.ForcePublish(System.Int64)">
            <summary>
            Force the publication of a cursor sequence.
            
            Only use this method when forcing a sequence and you are sure only one publisher exists.
            This will cause the cursor to advance to this sequence.
            </summary>
            <param name="sequence">sequence which is to be forced for publication.</param>
        </member>
        <member name="P:VelocityDB.Server.Sequencer.BufferSize">
            <summary>
            The capacity of the data structure to hold entries.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.Sequencer.Cursor">
            <summary>
            Get the value of the cursor indicating the published sequence.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.RingBuffer`1.#ctor(System.Func{`0},VelocityDB.Server.IClaimStrategy,VelocityDB.Server.IWaitStrategy)">
            <summary>
            Construct a RingBuffer with the full option set.
            </summary>
            <param name="eventFactory">eventFactory to create entries for filling the RingBuffer</param>
            <param name="claimStrategy">threading strategy for publisher claiming entries in the ring.</param>
            <param name="waitStrategy">waiting strategy employed by processorsToTrack waiting on entries becoming available.</param>
        </member>
        <member name="M:VelocityDB.Server.RingBuffer`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Construct a RingBuffer with default strategies of:
            <see cref="T:VelocityDB.Server.MultiThreadedLowContentionClaimStrategy"/> and <see cref="T:VelocityDB.Server.BlockingWaitStrategy"/></summary>
            <param name="eventFactory"> eventFactory to create entries for filling the RingBuffer</param>
            <param name="bufferSize"></param>
        </member>
        <member name="P:VelocityDB.Server.RingBuffer`1.Item(System.Int64)">
            <summary>
             Get the event for a given sequence in the RingBuffer.
            </summary>
            <param name="sequence">sequence for the event</param>
        </member>
        <member name="T:VelocityDB.Server.Sequence">
            <summary>
            Cache line padded sequence counter.
            Can be used across threads without worrying about false sharing if a located adjacent to another counter in memory.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Sequence.#ctor">
            <summary>
            Default Constructor that uses an initial value of <see cref="F:VelocityDB.Server.Sequencer.InitialCursorValue"/>
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Sequence.#ctor(System.Int64)">
            <summary>
            Construct a new sequence counter that can be tracked across threads.
            </summary>
            <param name="initialValue">initial value for the counter</param>
        </member>
        <member name="M:VelocityDB.Server.Sequence.LazySet(System.Int64)">
            <summary>
            Eventually sets to the given value.
            </summary>
            <param name="value">the new value</param>
        </member>
        <member name="M:VelocityDB.Server.Sequence.CompareAndSet(System.Int64,System.Int64)">
            <summary>
            Atomically set the value to the given updated value if the current value == the expected value.
            </summary>
            <param name="expectedSequence">the expected value for the sequence</param>
            <param name="nextSequence">the new value for the sequence</param>
            <returns>true if successful. False return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Sequence.ToString">
            <summary>
            Value of the <see cref="T:VelocityDB.Server.Sequence"/> as a String.
            </summary>
            <returns>String representation of the sequence.</returns>
        </member>
        <member name="M:VelocityDB.Server.Sequence.IncrementAndGet">
            <summary>
             Increments the sequence and stores the result, as an atomic operation.
            </summary>
            <returns>incremented sequence</returns>
        </member>
        <member name="M:VelocityDB.Server.Sequence.AddAndGet(System.Int64)">
            <summary>
             Increments the sequence and stores the result, as an atomic operation.
            </summary>
            <returns>incremented sequence</returns>
        </member>
        <member name="P:VelocityDB.Server.Sequence.Value">
            <summary>
            Current sequence number
            </summary>
        </member>
        <member name="T:VelocityDB.Server.ServerTcpClient">
            <summary>
            The main class for handling messages to VelocityDbServer
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClient.shutdown">
            <summary>
            Controls when to shut down the server
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClient.odbServerLog">
            <summary>
            A log of errors and events happening in this VelocityDbServer
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClient.acceptDone">
            <summary>
            Sync of Accept calls
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Constructs a server client which manages a remote or local ServerClientSession
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.Abort">
            <summary>
            Aborts a client transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.AcceptTcpClient(System.IAsyncResult)">
            <summary>
            Accepts connections
            </summary>
            <param name="ar">Wrapps a TcpListener</param>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.DoWaitWork">
            <summary>
            Do some memory management work or disk flushes while client isn't busy
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.connect">
            <summary>
            Handle a connect request
            </summary>
            <returns>A reply to a connect request</returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.connectSlave">
            <summary>
            Handles a ConnectSlaveRequest
            </summary>
            <returns>Reply to request</returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.processRequest(System.Byte[]@,System.Boolean@)">
            <summary>
            Dispatcher of all kinds of requests
            </summary>
            <param name="pageInfoBytes">Some requests return PageInfo bytes using this parameter</param>
            <param name="error">Is set to true if any errors happened</param>
            <returns>Reply to a request</returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.RequestsLoop">
            <summary>
            The main loop processing requests from all clients
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerTcpClient.IsSlave">
            <summary>
            Is this Server client a slave (not master - not owning Db 1- 10) ?
            </summary>
        </member>
        <member name="T:VelocityDB.Server.OSAsyncEventStack">
            <summary>
            class OSAsyncEventStack
            This is a very standard stack implementation.
            This one is set up to stack asynchronous socket connections.
            It has only two operations: a push onto the stack, and a pop off of it.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.OSUserToken">
            <summary>
            class OSUserToken : IDisposable
            This class represents the instantiated read socket on the server side.
            It is instantiated when a server listener socket accepts a connection.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.OSUtil">
            <summary>
            class OSUtil
            This class just does some string tricks for the sample app
            It is no big deal.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.OSCore">
            <summary>
            class OSCore
            This is a base class that is used by both clients and servers.
            It contains the plumbing to set up a socket connection.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.OSServer">
            <summary>
            class OSServer : OSCore
            This is the server class that is derived from OSCore.
            It creates a server that listens for client connections, then receives
            text data from those clients and writes it to the console screen
            </summary>
        </member>
        <member name="T:VelocityDB.Server.OSClient">
            <summary>
            class OSClient : OSCore
            This is a naive client class that I added into this project just to test the server.
            It does very little error checking and is not suitable for anything but testing.
            </summary>
        </member>
        <member name="T:VelocityDB.Server.ServerTcpClientFast">
            <summary>
            The main class for handling messages to VelocityDbServer
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClientFast.odbTcpPort">
            <summary>
            Tcp port number used by VelocityDbServer
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClientFast.shutdown">
            <summary>
            Controls when to shut down the server
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClientFast.odbServerLog">
            <summary>
            A log of errors and events happening in this VelocityDbServer
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClientFast.acceptDone">
            <summary>
            Sync of Accept calls
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClientFast.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Constructs a server client which manages a remote or local ServerClientSession
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClientFast.Abort">
            <summary>
            Aborts a client transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClientFast.AcceptTcpClient(System.IAsyncResult)">
            <summary>
            Accepts connections
            </summary>
            <param name="ar">Wrapps a TcpListener</param>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClientFast.DoWaitWork">
            <summary>
            Do some memory management work or disk flushes while client isn't busy
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClientFast.connect">
            <summary>
            Handle a connect request
            </summary>
            <returns>A reply to a connect request</returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClientFast.connectSlave">
            <summary>
            Handles a ConnectSlaveRequest
            </summary>
            <returns>Reply to request</returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClientFast.processRequest(System.Byte[]@,System.Boolean@)">
            <summary>
            Dispatcher of all kinds of requests
            </summary>
            <param name="pageInfoBytes">Some requests return PageInfo bytes using this parameter</param>
            <param name="error">Is set to true if any errors happened</param>
            <returns>Reply to a request</returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClientFast.RequestsLoop">
            <summary>
            The main loop processing requests from all clients
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerTcpClientFast.IsSlave">
            <summary>
            Is this Server client a slave (not master - not owning Db 1- 10) ?
            </summary>
        </member>
        <member name="T:VelocityDB.Server.Util">
            <summary>
            Set of common functions used by the Disruptor
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Util.CeilingNextPowerOfTwo(System.Int32)">
            <summary>
            Calculate the next power of 2, greater than or equal to x.
            </summary>
            <param name="x">Value to round up</param>
            <returns>The next power of 2 from x inclusive</returns>
        </member>
        <member name="M:VelocityDB.Server.Util.IsPowerOf2(System.Int32)">
            <summary>
            Test whether a given integer is a power of 2 
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Util.GetMinimumSequence(VelocityDB.Server.Sequence[])">
            <summary>
            Get the minimum sequence from an array of <see cref="T:VelocityDB.Server.Sequence"/>s.
            </summary>
            <param name="sequences">sequences to compare.</param>
            <returns>the minimum sequence found or lon.MaxValue if the array is empty.</returns>
        </member>
        <member name="M:VelocityDB.Server.Util.GetSequencesFor(VelocityDB.Server.IEventProcessor[])">
            <summary>
            Get an array of <see cref="T:VelocityDB.Server.Sequence"/>s for the passed <see cref="T:VelocityDB.Server.IEventProcessor"/>s
            </summary>
            <param name="processors">processors for which to get the sequences</param>
            <returns>the array of <see cref="T:VelocityDB.Server.Sequence"/>s</returns>
        </member>
        <member name="T:VelocityDB.Server.Volatile">
            <summary>
             A small toolkit of classes that support lock-free thread-safe programming on single variables and arrays
            </summary>
        </member>
        <member name="F:VelocityDB.Server.Volatile.CacheLineSize">
            <summary>
             Size of a cache line in bytes
            </summary>
        </member>
        <member name="T:VelocityDB.Server.Volatile.Integer">
            <summary>
            An integer value that may be updated atomically
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.Integer"/> with the given initial value.
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.ReadUnfenced">
            <summary>
            Read the value without applying any fence
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.ReadAcquireFence">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.ReadFullFence">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.ReadCompilerOnlyFence">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.WriteReleaseFence(System.Int32)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.WriteFullFence(System.Int32)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.WriteCompilerOnlyFence(System.Int32)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.WriteUnfenced(System.Int32)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.AtomicCompareExchange(System.Int32,System.Int32)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.AtomicExchange(System.Int32)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.AtomicAddAndGet(System.Int32)">
            <summary>
            Atomically add the given value to the current value and return the sum
            </summary>
            <param name="delta">The value to be added</param>
            <returns>The sum of the current value and the given value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.AtomicIncrementAndGet">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.AtomicDecrementAndGet">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Integer.ToString">
            <summary>
            Returns the string representation of the current value.
            </summary>
            <returns>the string representation of the current value.</returns>
        </member>
        <member name="T:VelocityDB.Server.Volatile.Long">
            <summary>
            A long value that may be updated atomically
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.#ctor(System.Int64)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.Long"/> with the given initial value.
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.ReadUnfenced">
            <summary>
            Read the value without applying any fence
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.ReadAcquireFence">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.ReadFullFence">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.ReadCompilerOnlyFence">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.WriteReleaseFence(System.Int64)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.WriteFullFence(System.Int64)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.WriteCompilerOnlyFence(System.Int64)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.WriteUnfenced(System.Int64)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.AtomicCompareExchange(System.Int64,System.Int64)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.AtomicExchange(System.Int64)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.AtomicAddAndGet(System.Int64)">
            <summary>
            Atomically add the given value to the current value and return the sum
            </summary>
            <param name="delta">The value to be added</param>
            <returns>The sum of the current value and the given value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.AtomicIncrementAndGet">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.AtomicDecrementAndGet">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Long.ToString">
            <summary>
            Returns the string representation of the current value.
            </summary>
            <returns>the string representation of the current value.</returns>
        </member>
        <member name="T:VelocityDB.Server.Volatile.Boolean">
            <summary>
            A boolean value that may be updated atomically
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.#ctor(System.Boolean)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.Boolean"/> with the given initial value.
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.ReadUnfenced">
            <summary>
            Read the value without applying any fence
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.ReadAcquireFence">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.ReadFullFence">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.ReadCompilerOnlyFence">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.WriteReleaseFence(System.Boolean)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.WriteFullFence(System.Boolean)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.WriteCompilerOnlyFence(System.Boolean)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.WriteUnfenced(System.Boolean)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.AtomicCompareExchange(System.Boolean,System.Boolean)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.AtomicExchange(System.Boolean)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Boolean.ToString">
            <summary>
            Returns the string representation of the current value.
            </summary>
            <returns>the string representation of the current value.</returns>
        </member>
        <member name="T:VelocityDB.Server.Volatile.Reference`1">
            <summary>
            A reference that may be updated atomically
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.#ctor(`0)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.Reference`1"/> with the given initial value.
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.ReadUnfenced">
            <summary>
            Read the value without applying any fence
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.ReadAcquireFence">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.ReadFullFence">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.ReadCompilerOnlyFence">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.WriteReleaseFence(`0)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.WriteFullFence(`0)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.WriteCompilerOnlyFence(`0)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.WriteUnfenced(`0)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.AtomicCompareExchange(`0,`0)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.AtomicExchange(`0)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.Reference`1.ToString">
            <summary>
            Returns the string representation of the current value.
            </summary>
            <returns>the string representation of the current value.</returns>
        </member>
        <member name="T:VelocityDB.Server.Volatile.IntegerArray">
            <summary>
            An <see cref="T:System.Int32"/> array that may be updated atomically
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.IntegerArray"/> of a given length
            </summary>
            <param name="length">Length of the array</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.#ctor(System.Int32[])">
            <summary>
             Create a new AtomicIntegerArray with the same length as, and all elements copied from, the given array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.ReadUnfenced(System.Int32)">
            <summary>
            Read the value without applying any fence
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.ReadAcquireFence(System.Int32)">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.ReadFullFence(System.Int32)">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.ReadCompilerOnlyFence(System.Int32)">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.WriteReleaseFence(System.Int32,System.Int32)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.WriteFullFence(System.Int32,System.Int32)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.WriteCompilerOnlyFence(System.Int32,System.Int32)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.WriteUnfenced(System.Int32,System.Int32)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.AtomicCompareExchange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <param name="index">The index.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.AtomicExchange(System.Int32,System.Int32)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <param name="index">The index.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.AtomicAddAndGet(System.Int32,System.Int32)">
            <summary>
            Atomically add the given value to the current value and return the sum
            </summary>
            <param name="delta">The value to be added</param>
            <param name="index">The index.</param>
            <returns>The sum of the current value and the given value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.AtomicIncrementAndGet(System.Int32)">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <param name="index">The index.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.IntegerArray.AtomicDecrementAndGet(System.Int32)">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <param name="index">The index.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="P:VelocityDB.Server.Volatile.IntegerArray.Length">
            <summary>
            Length of the array
            </summary>
        </member>
        <member name="T:VelocityDB.Server.Volatile.LongArray">
            <summary>
            A <see cref="T:System.Int64"/> array that may be updated atomically
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.LongArray"/> of a given length
            </summary>
            <param name="length">Length of the array</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.#ctor(System.Int64[])">
            <summary>
             Create a new <see cref="T:VelocityDB.Server.Volatile.LongArray"/>with the same length as, and all elements copied from, the given array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.ReadUnfenced(System.Int32)">
            <summary>
            Read the value without applying any fence
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.ReadAcquireFence(System.Int32)">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.ReadFullFence(System.Int32)">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.ReadCompilerOnlyFence(System.Int32)">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.WriteReleaseFence(System.Int32,System.Int64)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.WriteFullFence(System.Int32,System.Int64)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.WriteCompilerOnlyFence(System.Int32,System.Int64)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.WriteUnfenced(System.Int32,System.Int64)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.AtomicCompareExchange(System.Int32,System.Int64,System.Int64)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <param name="index">The index.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.AtomicExchange(System.Int32,System.Int64)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <param name="index">The index.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.AtomicAddAndGet(System.Int32,System.Int64)">
            <summary>
            Atomically add the given value to the current value and return the sum
            </summary>
            <param name="delta">The value to be added</param>
            <param name="index">The index.</param>
            <returns>The sum of the current value and the given value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.AtomicIncrementAndGet(System.Int32)">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <param name="index">The index.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.LongArray.AtomicDecrementAndGet(System.Int32)">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <param name="index">The index.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="P:VelocityDB.Server.Volatile.LongArray.Length">
            <summary>
            Length of the array
            </summary>
        </member>
        <member name="T:VelocityDB.Server.Volatile.BooleanArray">
            <summary>
            A <see cref="T:System.Boolean"/> array that may be updated atomically
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.BooleanArray"/> of a given length
            </summary>
            <param name="length">Length of the array</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.#ctor(System.Boolean[])">
            <summary>
             Create a new <see cref="T:VelocityDB.Server.Volatile.BooleanArray"/>with the same length as, and all elements copied from, the given array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.ReadUnfenced(System.Int32)">
            <summary>
            Read the value without applying any fence
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.ReadAcquireFence(System.Int32)">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.ReadFullFence(System.Int32)">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.ReadCompilerOnlyFence(System.Int32)">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.WriteReleaseFence(System.Int32,System.Boolean)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.WriteFullFence(System.Int32,System.Boolean)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.WriteCompilerOnlyFence(System.Int32,System.Boolean)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.WriteUnfenced(System.Int32,System.Boolean)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.AtomicCompareExchange(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <param name="index">The index.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.BooleanArray.AtomicExchange(System.Int32,System.Boolean)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <param name="index">The index.</param>
            <returns>The original value</returns>
        </member>
        <member name="P:VelocityDB.Server.Volatile.BooleanArray.Length">
            <summary>
            Length of the array
            </summary>
        </member>
        <member name="T:VelocityDB.Server.Volatile.ReferenceArray`1">
            <summary>
            A reference array that may be updated atomically
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.ReferenceArray`1"/> of a given length
            </summary>
            <param name="length">Length of the array</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.#ctor(`0[])">
            <summary>
             Create a new <see cref="T:VelocityDB.Server.Volatile.ReferenceArray`1"/>with the same length as, and all elements copied from, the given array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.ReadUnfenced(System.Int32)">
            <summary>
            Read the value without applying any fence
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.ReadAcquireFence(System.Int32)">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.ReadFullFence(System.Int32)">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.ReadCompilerOnlyFence(System.Int32)">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <param name="index">The element index</param>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.WriteReleaseFence(System.Int32,`0)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.WriteFullFence(System.Int32,`0)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.WriteCompilerOnlyFence(System.Int32,`0)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="index">The element index</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.WriteUnfenced(System.Int32,`0)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.AtomicCompareExchange(System.Int32,`0,`0)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <param name="index">The index.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.ReferenceArray`1.AtomicExchange(System.Int32,`0)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <param name="index">The index.</param>
            <returns>The original value</returns>
        </member>
        <member name="P:VelocityDB.Server.Volatile.ReferenceArray`1.Length">
            <summary>
            Length of the array
            </summary>
        </member>
        <member name="T:VelocityDB.Server.Volatile.PaddedInteger">
            <summary>
            An integer value that may be updated atomically and is guaranteed to live on its own cache line (to prevent false sharing)
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.PaddedInteger"/> with the given initial value.
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.ReadUnfenced">
            <summary>
            Read the value without applying any fence
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.ReadAcquireFence">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.ReadFullFence">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.ReadCompilerOnlyFence">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.WriteReleaseFence(System.Int32)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.WriteFullFence(System.Int32)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.WriteCompilerOnlyFence(System.Int32)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.WriteUnfenced(System.Int32)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.AtomicCompareExchange(System.Int32,System.Int32)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.AtomicExchange(System.Int32)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.AtomicAddAndGet(System.Int32)">
            <summary>
            Atomically add the given value to the current value and return the sum
            </summary>
            <param name="delta">The value to be added</param>
            <returns>The sum of the current value and the given value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.AtomicIncrementAndGet">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.AtomicDecrementAndGet">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedInteger.ToString">
            <summary>
            Returns the string representation of the current value.
            </summary>
            <returns>the string representation of the current value.</returns>
        </member>
        <member name="T:VelocityDB.Server.Volatile.PaddedLong">
            <summary>
            A long value that may be updated atomically and is guaranteed to live on its own cache line (to prevent false sharing)
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.#ctor(System.Int64)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.PaddedLong"/> with the given initial value.
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.ReadUnfenced">
            <summary>
            Read the value without applying any fence
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.ReadAcquireFence">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.ReadFullFence">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.ReadCompilerOnlyFence">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.WriteReleaseFence(System.Int64)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.WriteFullFence(System.Int64)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.WriteCompilerOnlyFence(System.Int64)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.WriteUnfenced(System.Int64)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.AtomicCompareExchange(System.Int64,System.Int64)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.AtomicExchange(System.Int64)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.AtomicAddAndGet(System.Int64)">
            <summary>
            Atomically add the given value to the current value and return the sum
            </summary>
            <param name="delta">The value to be added</param>
            <returns>The sum of the current value and the given value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.AtomicIncrementAndGet">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.AtomicDecrementAndGet">
            <summary>
            Atomically increment the current value and return the new value
            </summary>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedLong.ToString">
            <summary>
            Returns the string representation of the current value.
            </summary>
            <returns>the string representation of the current value.</returns>
        </member>
        <member name="T:VelocityDB.Server.Volatile.PaddedBoolean">
            <summary>
            A boolean value that may be updated atomically and is guaranteed to live on its own cache line (to prevent false sharing)
            </summary>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.#ctor(System.Boolean)">
            <summary>
            Create a new <see cref="T:VelocityDB.Server.Volatile.PaddedBoolean"/> with the given initial value.
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.ReadUnfenced">
            <summary>
            Read the value without applying any fence
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.ReadAcquireFence">
            <summary>
            Read the value applying acquire fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.ReadFullFence">
            <summary>
            Read the value applying full fence semantic
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.ReadCompilerOnlyFence">
            <summary>
            Read the value applying a compiler only fence, no CPU fence is applied
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.WriteReleaseFence(System.Boolean)">
            <summary>
            Write the value applying release fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.WriteFullFence(System.Boolean)">
            <summary>
            Write the value applying full fence semantic
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.WriteCompilerOnlyFence(System.Boolean)">
            <summary>
            Write the value applying a compiler fence only, no CPU fence is applied
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.WriteUnfenced(System.Boolean)">
            <summary>
            Write without applying any fence
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.AtomicCompareExchange(System.Boolean,System.Boolean)">
            <summary>
            Atomically set the value to the given updated value if the current value equals the comparand
            </summary>
            <param name="newValue">The new value</param>
            <param name="comparand">The comparand (expected value)</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.AtomicExchange(System.Boolean)">
            <summary>
            Atomically set the value to the given updated value
            </summary>
            <param name="newValue">The new value</param>
            <returns>The original value</returns>
        </member>
        <member name="M:VelocityDB.Server.Volatile.PaddedBoolean.ToString">
            <summary>
            Returns the string representation of the current value.
            </summary>
            <returns>the string representation of the current value.</returns>
        </member>
        <member name="T:VelocityDb.Session.SessionNoServerShared">
            <summary>
            Same as SessionNoServer but SessionNoServerShared is thread safe so it can be shared between threads.
            </summary>
        </member>
        <member name="T:VelocityDb.Session.SessionNoServer">
            <summary>
            Use this session class when <see cref="T:VelocityDb.Database"/> level locking is acceptable and <see cref="T:VelocityDb.Database"/>s are local or reachable by UNC paths.
            </summary>
        </member>
        <member name="T:VelocityDb.Session.SessionBase">
            <summary>
            Transaction control, database creation and special persistent object api.
            Each session can use 4,294,967,295 <see cref="T:VelocityDb.Database"/>s. Each <see cref="T:VelocityDb.Database"/> may have up to 65,535 <see cref="T:VelocityDb.Page"/>s and a page can be up to 4,294,967,295 bytes in size.
            The maximum data size a single session can manage is: 4,294,967,295 * 65,535 * 4,294,967,295 = 1208907372307614101733375 bytes or about a Yottabyte http://en.wikipedia.org/wiki/Yottabyte
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.IndexDescriptorDatabaseNumber">
            <summary>
            Database 3 is dedicated to keeping track of index usage
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.TextEncoding">
            <summary>
            All text encoding is done with utf8
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.TypeDatabaseIdOffsetFromTypeShortId">
            <summary>
            Determines database Id to use for a certain VelocityDbType instance
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.TypeDatabaseIdOverflowOffset">
            <summary>
            If additional databases are required for storing instances of some type, start by attempting creating database at this offset from original
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.TypeDatabaseIdOverflowIndexCollisionOffset">
            <summary>
            If additional databases are required for storing instances of some index, start by attempting creating database at this offset from original
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.DefaultStringComparer">
            <summary>
            Set the StringComparer to use when no application provided comparator is provided. By default we will then use StringComparer.Ordinal.
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.DefaultCompressPages">
            <summary>
            By default false, set to true if you want to change the default for newly created <see cref="T:VelocityDb.DatabaseLocation"/>.
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.s_serverTcpIpPortNumber">
            <summary>
            By default port number 7031 is used for communication with VelocityDBServer. Change the value here and also in VelocityDbServer.exe.config if you need to use a different port number.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.IsWorkerThread">
            <summary>
            Tell if code is executed by index or page write worker thread
            </summary>
            <returns>True, if worker thread is active thread; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SetMinMaxStringIntern(System.UInt16,System.UInt16)">
            <summary>
            A persistent string read into memory from a <see cref="T:VelocityDb.Database"/> is interned using <see cref="M:System.String.Intern(System.String)"/> to speed up comparisons and conserve memory (when the same string occurs in many places)
            </summary>
            <param name="minSize">Selected minumum plus one string length of a string to be interned</param>
            <param name="maxSize">Selected maximum string length for a string to be interned</param>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.FileBytesChunkSize">
            <summary>
            When transfering complete files from a server, we send the file bytes in chunks of this size.
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.DefaultNumberOfObjectsPerPage">
            <summary>
            Default number of objects per page is 9999
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.DoWindowsAuthentication">
            <summary>
            By default do not use windows authentication when talking to VelocitydbServer's on other hosts.
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.s_baseDatabasePath">
            <summary>
            If specified boot path (system database path) in session constructor isn't an absolute path then this base path is prefixed to make an absolute path.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean,VelocityDb.CacheEnum,System.Boolean)">
            <summary>
            Constructor for the base session class
            </summary>
            <param name="systemDir">A directory for your startup/default <see cref="T:VelocityDb.DatabaseLocation"/> This directory is the home for databases: 0.odb, 1.odb, 2.odb ...</param>
            <param name="systemHost">The host owning the startup directory</param>
            <param name="waitForLockMilliseconds">How long shall we wait for a lock before giving up?</param>
            <param name="optimisticLocking">Is this session requesting optimistic locking?</param>
            <param name="enableCache">Is this session going to enable a page and object cache?</param>
            <param name="objectCachingDefaultPolicy">Determines default value of <see cref="P:VelocityDb.OptimizedPersistable.Cache"/></param>
            <param name="inMemoryOnly">A <see cref="T:VelocityDb.Session.ServerClientSession"/> can optionally be used with in memory only pages and objects, make sure base class knows about it.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.AnyPageWritten(VelocityDb.Database)">
            <summary>
            Find out if any pages have been written for a given database in this update transaction
            </summary>
            <param name="db">The database of intrest</param>
            <returns>true if any pages have been written, otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Abort">
            <summary>
            Transaction control, abort the current transaction
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.AllObjects``1(System.Boolean,System.Boolean)">
            <summary>
            Gets an object used for enumerating all objects in all Databases
            </summary>
            <typeparam name="T">The type of object we are looking for</typeparam>
            <param name="includeSubClasses">Also return instances of sub classes</param>
            <param name="databasePerType">Assume that persisted objects where made persistent the simple way using <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>. When persisting this way, each object type gets its own <see cref="T:VelocityDb.Database"/> which makes finding these objects easier and faster</param>
            <returns>The enumeration wrapper object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets an object used for enumerating all objects in all Databases
            </summary>
            <param name="type">Type to look for</param>
            <param name="includeSubClasses">Also return instances of sub classes</param>
            <param name="databasePerType">Assume that persisted objects where made persistent the simple way using <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>. When persisting this way, each object type gets its own <see cref="T:VelocityDb.Database"/> which makes finding these objects easier and faster</param>
            <returns>The enumeration wrapper <see cref="M:VelocityDb.Session.SessionBase.OfType(System.Type,System.Boolean,System.Boolean)"/>object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Index``1">
            <summary>
            Gets an index of all objects of a certain type
            </summary>
            <typeparam name="T">The type of object indexed</typeparam>
            <returns>The index</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Index``1(VelocityDb.Database)">
            <summary>
            Gets an index of all objects of a certain type within a given database (attribute OnePerDatabase must be used).
            If you have updated objects persisted in a prior transaction that you want part of an index. Call <see cref="M:VelocityDb.Session.SessionBase.FlushUpdates"></see>
            or call <see cref="M:VelocityDb.OptimizedPersistable.Write"></see>/&gt; to add such an object to index before querying using an index./&gt;
            </summary>
            <typeparam name="T">The type of object indexed</typeparam>
            <returns>The index</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Index``1(System.String)">
            <summary>
            Gets an index of all objects of a certain type
            </summary>
            <typeparam name="T">The type of object indexed</typeparam>
            <param name="indexedByFieldName">The field used for sorting the indexed objects</param>
            <returns>The index</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Index``1(System.String,VelocityDb.Database)">
            <summary>
            Gets an index of all objects of a certain type within a given database (attribute OnePerDatabase must be used)
            </summary>
            <typeparam name="T">The type of object indexed</typeparam>
            <param name="indexedByFieldName">The field used for sorting the indexed objects</param>
            <param name="inDatabase">Database containing index</param>
            <returns>The index</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ForceDatabaseCacheValidation">
            <summary>
            Cached data is set to be validated whenever a new transaction is started. 
            This function is provided as a way to force cache validation within a transaction without requiring a commit followed by a new transaction.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.BeginRead(System.Boolean)">
            <summary>
            Transaction control, begin a read only transaction
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.BeginUpdate">
            <summary>
            Transaction control, begin an update transaction.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.BeginUpdate(System.Boolean)">
            <summary>
            Transaction control, begin an update transaction.
            </summary>
            <param name="doRecoveryCheck">Set to false only when moving system databases to a new directory</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.BeginUpdate(System.Boolean,System.Boolean)">
            <summary>
            Transaction control, begin an update transaction.
            </summary>
            <param name="doRecoveryCheck">Set to false only when moving system databases to a new directory</param>
            <param name="checkForBootRelocation">Set to true only when moving system databases to a new directory</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CachedPage(VelocityDb.Database,System.UInt16)">
            <summary>
            Looks for a cached page
            </summary>
            <param name="db">The Database containing the page</param>
            <param name="pageNumber">The page number of the page</param>
            <returns>The cached page or null if not found in cache</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Close(System.Boolean)">
            <summary>
            Aborts and active transaction and closes any network streams.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearCache">
            <summary>
            Clears page cache and closes databases. Avoid using this one for now.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearCashedPages">
            <summary>
            Clear cache of cached pages
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearPageCache">
            <summary>
            Clears cached pages from cache including page weak rewferences.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CompareTo(VelocityDb.Session.SessionBase)">
            <summary>
            The defualt compare of two SessionBase is by system (bootup) host name and directory
            </summary>
            <param name="otherSession">The session to compare with</param>
            <returns>-1 if this session is less than the other, 0 if equal, otherwise 1</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CrossTransactionCacheAllDatabases(System.Boolean)">
            <summary>
            By default databases are only referenced by a <see cref="T:System.WeakReference"/> across transaction boundraries. 
            This means that such Database may or may not be avaialble as a cached database depending on garbage collection activity and if such database also has a strong reference.
            This function lets you add a strong reference to all Databases so the cached Database may be used if version wasn't changed by a different thraed since prior transaction.
            A strong reference is removed for any database that get invalidated due to a transaction abort or if another transaction commits a change to it.
            </summary>
            <param name="enable">Add or remove strong reference. If true, add a strong reference</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CrossTransactionCache(VelocityDb.Database,System.Boolean)">
            <summary>
            By default databases are only referenced by a <see cref="T:System.WeakReference"/> across transaction boundraries. 
            This means that such Database may or may not be avaialble as a cached database depending on garbage collection activity and if such database also has a strong reference.
            This function lets you add a strong reference to a Database so the cached Database may be used if version wasn't changed by a different thraed since prior transaction.
            The strong reference is removed once the Database is reopened.
            </summary>
            <param name="db">The Database to cache</param>
            <param name="enable">Add or remove strong reference. If true, add a strong reference</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CloseDatabase(VelocityDb.Database)">
            <summary>
            Closes a Database
            </summary>
            <param name="db">The Database to close</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Commit(System.Boolean,System.Boolean)">
            <summary>
            Transaction control, commit the current transaction
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CopyAllDatabasesTo(System.String)">
            <summary>
            Copies all databases to a selected directory on the local host.
            </summary>
            <param name="directory">Path to a directory</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DefaultDatabaseLocation">
            <summary>
            Gets the default (startup) DatabaseLocation
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeleteDatabase(VelocityDb.Database)">
            <summary>
            Delete a database, actual database file delete happens after a successful transaction commit.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Compact">
            <summary>
            Reduce size of databases, if possible, by first attempting to relocate pages to free areas towrads the beginning of each <see cref="T:VelocityDb.Database"/> file and then by truncating files where unused space begins.
            Run Compact() outside the scope of any transaction.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Compact(VelocityDb.Database)">
            <summary>
            Reduce size of database, if possible, by truncating file where unused space begins
            </summary>
            <param name="db"><see cref="T:VelocityDb.Database"/> to compact</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushUpdates">
            <summary>
            Write all updated data. This may free up some memory.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushUpdatesServers">
            <summary>
            Make servers Write all updated data. This may free up some memory on the servers. Only effects sessions using VelocityDbServer(s)
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushPageOf(VelocityDb.OptimizedPersistable)">
            <summary>
            By calling this you force a persisted (has an Id) object to be written to disk (if updated) and indices (if any) to be updated. Other objects on the same page page will also be written.
            </summary>
            <param name="pObj">An object indicating what <see cref="T:VelocityDb.Page"/> to flush</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushUpdates(VelocityDb.Database)">
            <summary>
            Write any updated/new pages for a specific Database
            </summary>
            <param name="db">The database for which we want to write all updated pages</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushUpdates(VelocityDb.Database,VelocityDb.DatabaseUpdatedPages,System.Boolean@,System.Boolean)">
            <summary>
            Write all updated data for a particual database. This may free up some memory.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FileOpen(System.IO.FileInfo,System.IO.FileAccess,System.String@,System.IO.FileShare,System.IO.FileMode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="fileInfo">Info about file to open</param>
            <param name="fileAccess">Option for file access</param>
            <param name="errorMessage">Error messages stored in this string</param>
            <param name="fileShare">Option for file shre</param>
            <param name="fileMode">Option for file mode</param>
            <param name="waitForLockMilliseconds">How long to wait for file to become available for open</param>
            <param name="signalError">If true, signal error if we fail to open file; otherwise ignore errors and return null</param>
            <returns>File stream of opened file</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.GetEnumerator">
            <summary>
            Enumerates all open databases for this session
            </summary>
            <returns>Enumeration of open databases</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Dispose">
            <summary>
            Closes this session
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.LocateDb(System.UInt32)">
            <summary>
            Lookup the DatabaseLocation of a database with a particular database number.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.NewDatabase(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <summary>
            Create a new Database with a given database number
            </summary>
            <param name="dbNum">Database number of the database to create</param>
            <param name="megaBytesPresize">If you know that the Database will be large, presizing it may avoid file fragmentation. Default value is 0</param>
            <param name="name">Optionally name the new <see cref="T:VelocityDb.Database"/></param>
            <param name="signalError">Optionally signal an error if creation of new <see cref="T:VelocityDb.Database"/> fails</param>
            <returns>The newly created <see cref="T:VelocityDb.Database"/> or throws and exception if the <see cref="T:VelocityDb.Database"/> already exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeleteLocation(VelocityDb.DatabaseLocation)">
            <summary>
            Deletes a DatabaseLocation, location must first mot have any Databases in it
            </summary>
            <param name="location">The DatabaseLocation to delete</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeleteObject(System.UInt64)">
            <summary>
            A way to delete an object without requiring that the object be opened first
            </summary>
            <param name="id">The Id of the object to delete</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeployGenerateReaderWriter(System.Type,System.String)">
            <summary>
            Part of code generator, not yet ready for public release
            </summary>
            <param name="type">Type to generate reader and writer code for</param>
            <param name="directory">A directory for generated code</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeployInternalTypes(System.String)">
            <summary>
            For internal use only
            </summary>
            <param name="outputDirectory"></param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.NewLocation(VelocityDb.DatabaseLocation)">
            <summary>
            Creates a new DatabaseLocation or updates existing ones
            </summary>
            <param name="location">The input location</param>
            <returns>The new DatabaseLocation or an existing one</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Objects``1">
            <summary>
            Enumarates all the objects of a given type
            </summary>
            <typeparam name="T">The type of object we are looking for</typeparam>
            <returns>An enumation of type T</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.HighestInUseDatabaseNumber">
            <summary>
            Figure out what the highest in use database number is and return it.
            </summary>
            <returns>The currently largest Database Id in use reachable from this session</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.HighestInUseLocalDatabaseNumber">
            <summary>
            Figure out what the highest in use database number is on the local host and return it.
            </summary>
            <returns>The currently largest Database Id in use reachable from this session located on localhost</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ParseCsvRow(System.String)">
            <summary>
            Parses a row in a csv file and returns an iterator of column string values
            </summary>
            <param name="r">Csv row string data to be parsed</param>
            <returns>Iterator of column values</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ImportFromCSV(System.String)">
            <summary>
            Restores database files, pages and objects from a .csv file data created with ExportToCSV
            </summary>
            <param name="csvDirectory">Path to directory containing CSV files</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ExportToCSV(System.String)">
            <summary>
            Export all persistent objects to .csv files, one file for each Type and version of Type.
            This is preview release, format may change. ImportFromCSV can be used to recreate your data.
            Note that Microsoft Excel can't handle many of these CSV files due to a field value limitation (at about 33000 chars)
            Notepad++ is one application that can read these files.
            Some fields like array data are encoded http://msdn.microsoft.com/en-us/library/dhx0d524(v=vs.110).aspx
            </summary>
            <param name="directory">Where to store the CSV files</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FirstFreePage(VelocityDb.Database,System.UInt16)">
            <summary>
            Gets the page number of the first unallocated page in the specified Database
            </summary>
            <param name="db">The database to query</param>
            <param name="pageNumber">The page number to start search from</param>
            <returns>The first available page number.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.InUseNumberOfPages(VelocityDb.Database)">
            <summary>
            Gets the number of pages currently in use by a Database
            </summary>
            <param name="db">The Database to request info about</param>
            <returns>The number of pages currently in use</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.IsSameHost(System.String,System.String)">
            <summary>
            Determine if two host names represent the same tcp/ip host
            </summary>
            <param name="host1">Host name 1</param>
            <param name="host2">Host name 2</param>
            <returns>True if host is the same; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.IdOf(System.Object)">
            <summary>
            Finds the object id of a persistent object
            </summary>
            <param name="obj">The object to find the id for</param>
            <returns>The object id or 0 if object was not found</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OidOf(System.Object)">
            <summary>
            Finds the object id of a persistent object
            </summary>
            <param name="obj">The object to find the id for</param>
            <returns>The object id or 0 if object was not found</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OidShortOf(System.Object)">
            <summary>
            Finds the object id of a persistent object
            </summary>
            <param name="obj">The object to find the id for</param>
            <returns>The object id or 0 if object was not found</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt64)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="oid">The id of the object to open</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(VelocityDb.Database,System.UInt64)">
            <summary>
             Opens a persistent object
            </summary>
            <param name="db">Object we are looking for is contained in this database</param>
            <param name="oid">The id of the object to open</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(VelocityDb.Oid,System.Boolean)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="oid">The id of the object to open</param>
            <param name="update">Open it for update?</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt32,VelocityDb.OidShort,System.Boolean)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="dbNum">The database number if the object to open</param>
            <param name="oid">The short id (page + slot) of the object to open</param>
            <param name="update">Open it for update?</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenDatabase(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Opens a Database
            </summary>
            <param name="dbNum">The Database number of the database to open</param>
            <param name="update">Open the Database for update?</param>
            <param name="signalError">Signal errors if errors found when opening the Database?</param>
            <returns>The opened Database</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenDatabaseLocations">
            <summary>
            Open the <see cref="P:VelocityDb.Session.SessionBase.DatabaseLocations"/> object and store it in the session.
            </summary>
            <returns>The <see cref="P:VelocityDb.Session.SessionBase.DatabaseLocations"/> used by this session</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt32,System.UInt16,System.UInt16,System.Boolean,System.Int32)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="dbNum">Database number of the object to open</param>
            <param name="pageNum">Page number of the object to open</param>
            <param name="slotNum">Slot number of the object to open</param>
            <param name="update">Open the object for update?</param>
            <param name="graphDepthToLoad">Limit depth of graph to open</param>
            <returns>The opened object or null if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt64,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="oid">The Id of the object to open</param>
            <param name="update">Open the object for update?</param>
            <param name="inFlush">if true, disallow page flushing while opening the object</param>
            <param name="graphDepthToLoad">Set this if you want to limit the depth of the graph loaded by this open.</param>
            <returns>A persistent object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(VelocityDb.Database,System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32)">
            <summary>
            For internal usage only, used in generated code
            </summary>
            <param name="db"></param>
            <param name="oid"></param>
            <param name="update"></param>
            <param name="toLoadMembers"></param>
            <param name="inFlush"></param>
            <param name="graphDepth"></param>
            <param name="graphDepthToLoad"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            For internal use only in generated code
            </summary>
            <param name="oid">Id of the object to open</param>
            <param name="update">Update object when opening it</param>
            <param name="toLoadMembers">Internal list of objects to be loaded as part of graph load</param>
            <param name="inFlush">Permit page flushes as side affect of opening object?</param>
            <param name="graphDepth">Current graph depth of graph load</param>
            <param name="graphDepthToLoad">Max graph depth to load</param>
            <param name="signalNotExistError">Signal an exception if object/page/database does not exist.</param>
            <returns>a persistent object</returns>
            <exclude />
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(VelocityDb.Database,System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            For internal use only in generated code
            </summary>
            <param name="db"></param>
            <param name="oid">Id of the object to open, must match with Database id</param>
            <param name="update">Update object when opening it</param>
            <param name="toLoadMembers">Internal list of objects to be loaded as part of graph load</param>
            <param name="inFlush">Permit page flushes as side affect of opening object?</param>
            <param name="graphDepth">Current graph depth of graph load</param>
            <param name="graphDepthToLoad">Max graph depth to load</param>
            <param name="signalNotExistError">Signal an exception if object/page/database does not exist.</param>
            <returns>a persistent object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenAllDatabases(System.Boolean)">
            <summary>
            Open all databases
            </summary>
            <param name="update">Open for update?</param>
            <returns>List of <see cref="T:VelocityDb.Database"/></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenLocationDatabases(VelocityDb.DatabaseLocation,System.Boolean)">
            <summary>
            Opens all the databases in a given location
            </summary>
            <param name="location">The location for which to open databases</param>
            <param name="update">Shall each database be opened for update?</param>
            <returns>A list of opened databases</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.Placement,VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,System.UInt16,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <summary>
            Persists an object
            </summary>
            <param name="place">Placement object determening where to persist the object</param>
            <param name="pObj">The object to persist</param>
            <param name="schema">The active session schema</param>
            <param name="slotLimitPerPage">Override of how many slots per page to permit</param>
            <param name="inFlush">Set to true to disallow page flushes as a side affect</param>
            <param name="toPersist">A list of objects waiting to be persisted</param>
            <returns>Id of persisted object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.Placement,VelocityDb.IOptimizedPersistable)">
            <summary>
            Persist an object that is an OptimizedPersistable or a subclass
            </summary>
            <param name="place">Provides placement guidance</param>
            <param name="obj">The object to persist</param>
            <returns>The Id of the persistent object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(System.Object,VelocityDb.Placement,System.Boolean)">
            <summary>
            Persist an object that may or may not be a subclass of OptimizedPersistable
            </summary>
            <param name="obj">The object to persist.</param>
            <param name="place">A placement guidance</param>
            <param name="inFlush">If true, disalloq page flushing</param>
            <returns>The Id of the persisted object.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DatabaseNumberOf(System.Type)">
            <summary>
            Get the database number associated with a specific type. Your application can store any type of object in any database but if the application exclusivly 
            use <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/> or <see cref="M:VelocityDb.Session.SessionBase.Persist(System.Object)"/> then this is the database Id that will be used given a type.
            </summary>
            <param name="type">The type for which you want to get the associated database number (Id)</param>
            <returns>The database number associated with the provided type</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})">
            <summary>
            This is the recommended way of persisting objects, it is simple and efficient. Each type is stored in its own database unless object class overrides <see cref="P:VelocityDb.IOptimizedPersistable.PlacementDatabaseNumber"/>
            and returns something other than <see cref="F:VelocityDb.Placement.DefaultPlacementDatabaseNumber"/>.
            </summary>
            <param name="ipObj">The object to make persistent</param>
            <param name="objectsPerPage">Override of objects per page, only respected when persisting first object of some type</param>
            <returns>The Id of the persisted object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(System.Object)">
            <summary>
            This is the recommended way of persisting objects, it is simple and efficient. Each type is stored in its own database.
            </summary>
            <param name="obj">The object to make persistent</param>
            <returns>The Id of the persisted object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(System.Object,VelocityDb.IOptimizedPersistable,System.Boolean)">
            <summary>
            Persist an object that may or may not be a subclass of OptimizedPersistable
            </summary>
            <param name="obj">The object to persist.</param>
            <param name="parent">A parent object of the object to persist.</param>
            <param name="inFlush">If true, disallow page flushing</param>
            <returns>The Id of the persisted object.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.RegisterClass(System.Type)">
            <summary>
            Register a class in the persistent schema.
            It is a good idea to do this explicetly instead of having it happen the first time an object of an unregistered class is made persistent
            </summary>
            <param name="type">The type to register in the persistent schema</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearCachedObjects">
            <summary>
            Clears the cache of cached objects.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearCachedObjects(VelocityDb.Database)">
            <summary>
            Clears the cache of cached objects within a <see cref="T:VelocityDb.Database"/>.
            </summary>
            <param name="db">Clear cached objects within this database.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.reopenDatabaseForRead(VelocityDb.Database,VelocityDb.TypeInfo.Schema,System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Used with OptemisticLocking, reopen Database so that we can detect an updated database with updated page offsets
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.RestoreFrom(VelocityDb.DatabaseLocation,System.DateTime)">
            <summary>
            Restores Databases and pages from a backup DatabaseLocation. Existing data will be merged with the restored data unless existing Databases to restore are deleted before the restore.
            </summary>
            <param name="backupLocation">The location to restore from</param>
            <param name="upToTime">Restore location up to a given DateTime. Data backed up after this time will not be restored.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenSchema(System.Boolean)">
            <summary>
            Get the session active schema
            </summary>
            <param name="update">Do update the schema?</param>
            <returns>The active schema</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.TryDatabase(VelocityDb.Placement)">
            <summary>
            Gets the current database to try
            </summary>
            <param name="session">the active sesssion</param>
            <returns>A database or null if not cached</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateDatabase(VelocityDb.Database)">
            <summary>
            Request an update lock on a database
            </summary>
            <param name="db">The database to update</param>
            <returns>true if Database was updated, otherwise throws an exception</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateClass(System.Type)">
            <summary>
            Let VelocityDB know that changes have been made to a class so that the schema manager will create a new <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> and use the new version for all new objects of the specified Type.
            </summary>
            <param name="type">The type that has been updated (new/removed/modified fields)</param>
            <returns>The new Type description</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.PossiblyFlushUpdatedPages(System.UInt32)">
            <summary>
            Call this function if you may have updated many pages to possibly free up memory if too much memory is in use.
            </summary>
            <param name="numberOfUpdatedPagesPermittedWithoutFlushCheck">Only do check if the number of updated pages is greater than this number</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SetTraceAllDbActivity(System.Boolean)">
            <summary>
            Enable some console output about persistent events related to all databases and pages.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SetTraceDbActivity(System.UInt32)">
            <summary>
            Enable some console output about persistent events related to a Database.
            </summary>
            <param name="dbId">The Database number of the Database to enable persistent trace information for.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SubscribeToChanges(System.Type,System.String)">
            <summary>
            Subscribe to committed database changes of instances of a type when an an optional property evaluates to true.
            </summary>
            <param name="aType">The type you are interested in being notified about when persistent instances changes within a database.</param>
            <param name="notifyIfTrueProperty">The name of a property part of the type specified as aType, this should be a Boolean property. When property returns true, a change notification is send otherwise no notification is send. Leave as null to get a notification any time any instance of the selected type changes</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.StringToType(System.String)">
            <summary>
            Gets a <see cref="T:System.Type"/> given a string representation of a type
            </summary>
            <param name="typeAsString">The string representation of a <see cref="T:System.Type"/></param>
            <returns>Type from string</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UnsubscribeToChanges(System.Type,System.String)">
            <summary>
            Unsubscribe to committed database changes of instances of a type when an optional property evaluates to true.
            </summary>
            <param name="aType">The type you are no longer interested in being notified about when persistent instances changes within a database.</param>
            <param name="notifyIfTrueProperty">The name of a property part of the type specified as aType, this should be a Boolean property.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateObject(VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <summary>
            Updates an object
            </summary>
            <param name="obj">Object to be updated</param>
            <param name="inFlush">Are we doing this as part of a page flush? Set to true to avoid a recursive page flush</param>
            <param name="deleteObjFromIndexes">Set to false if you know that this object is not part of any index. Safe to leave set to true in any case</param>
            <returns>True if object is updated; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateObject(System.Object)">
            <summary>
            Tag an object as updated so that it will be updated persistently
            </summary>
            <param name="obj">The object to update.</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Verify">
            <summary>
            Verifies that databases are valid by reading and following references. An exception is thrown if an issue is found.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.AddToIndexInSeperateThread">
            <summary>
            Allow adding objects to indices to be done in a worker thread instead of in main thread.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Allow object serialization and page writes to happen in worker threads, one per database, instead of in main session thread.
            <see cref="P:VelocityDb.Session.SessionBase.AddToIndexInSeperateThread"/> must also be enabled for this to work.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.MinStringLengthToIntern">
            <summary>
            Get the minimum size a string must have before VelocityDB internals interns, <see cref="M:System.String.Intern(System.String)"/>, string when read from a <see cref="T:VelocityDb.Database"/>.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.MaxStringLengthToIntern">
            <summary>
            Get the maximum size a string must have before VelocityDB internals interns, <see cref="M:System.String.Intern(System.String)"/>, string when read from a <see cref="T:VelocityDb.Database"/>.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.BaseDatabasePath">
            <summary>
            If specified boot path (system database path) in session constructor isn't an absolute path then this base path is prefixed to make an absolute path.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.EnableAutoPageFlush">
            <summary>
            Pages may be flushed when memory available is low unless you set tis property to false. You would want it to be enabled unless you are trying to share a non SessionNoServerShared session by working on different databases in multiple threads. As in Wikipedia sample application.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.AssumeLocalHost">
            <summary>
            SessionNoServer ignores DatabaseLocation host value, it assumes localhost, ServerSessionClient does not assume local host, it follows the DatabaseLocation HostName value.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.ClientCache">
            <summary>
            Gets the client page cache object
            </summary>
            <value>The <see cref="T:VelocityDb.DataCache"/></value>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.DatabaseLocations">
            <summary>
            Gets the DatabaseLocations<see cref="P:VelocityDb.Session.SessionBase.DatabaseLocations"/> for the session.
            </summary>
            <value>The <see cref="P:VelocityDb.Session.SessionBase.DatabaseLocations"/></value>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.Databases">
            <summary>
            Gets a list of the currently opened databases
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.FileShareUpdater">
            <summary>
            Gets the FileShare mode to use depending on optimisticLocking being used.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.InTransaction">
            <summary>
            Indicates if we are within an active transaction.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.LocalHost">
            <summary>
            Get the host name of your local host (the machine you are using)
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.ObjectCachingDefaultPolicy">
            <summary>
            Get/Set default value for <see cref="P:VelocityDb.OptimizedPersistable.Cache"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.OptimisticLocking">
            <summary>
            Is the
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.InMemoryOnly">
            <summary>
            Gets information about this session, is it an in-memory only session or a session that persists data
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.TransactionNumber">
            <summary>
            Gets the transaction number of the current session
            </summary>
            <value>The transaction number</value>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.UseExternalStorageApi">
            <summary>
            This is specifically for Windows Phone API, set to true when you want to access databases from a memory card.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.TraceIndexUsage">
            <summary>
            If set to true, each time an index (BTreeSet) is used in a query, we output a line about that to the console output.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.SystemDirectory">
            <summary>
            Get the path to the directory of the system <see cref="T:VelocityDb.Database"/>s (0.odb, 1.odb, 2.odb ...) of this session.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.WaitForLockMilliseconds">
            <summary>
            Get/Set the max time waiting for a lock to clear with pessimistic locking
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServer.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,VelocityDb.CacheEnum)">
            <summary>
            Creates a new session. For a thread safe version of this class, use <see cref="T:VelocityDb.Session.SessionNoServerShared"/>
            </summary>
            <param name="systemDir">The startup location directory path. Path can be an absolute (full) path or a path relative to <see cref="F:VelocityDb.Session.SessionBase.s_baseDatabasePath"/></param>
            <param name="waitForLockMilliseconds">The desired maximum lock wait time</param>
            <param name="optimisticLocking">Use optimistic locking. With optimistic locking, readers are always permitted and multiple updaters are permitted to update the same Databases/Pages but only the the first transaction to commit or flush an updated Database/Page will be successful in making the commited chane. Other updaters will get an OptimisticLockingException if they try to commit/flush updates to the same Pages/Database.
            See http://en.wikipedia.org/wiki/Optimistic_concurrency_control for further explnation of optimistic locking. If optimistic locking is not enabled then pessimistic locking is used. See: http://en.wikipedia.org/wiki/Concurrency_control </param>
            <param name="enableCache">If page and object caching isn't desired, turn it of by setting to false</param>
            <param name="objectCachingDefaultPolicy">Determines default value of <see cref="P:VelocityDb.OptimizedPersistable.Cache"/></param>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServer.Commit(System.Boolean,System.Boolean)">
            <summary>
            Commits a transaction
            </summary>
            <param name="doRecoveryCheck">Set to false when restoring data from a backup, otherwise use the default, true</param>
            <param name="isRestore">Set to true only when commiting a restore</param>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServer.UpdateDatabase(VelocityDb.Database)">
            <summary>
            Request an update lock on a database
            </summary>
            <param name="db">The database to update</param>
            <returns>true if Database was updated, otherwise throws an exception</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionNoServer.AssumeLocalHost">
            <summary>
            SessionNoServer ignores DatabaseLocation HostName since it cannot connect to a VelocityDbServer.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,VelocityDb.CacheEnum)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.CachedPage(VelocityDb.Database,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.CopyAllDatabasesTo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.LoadMembers(VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,VelocityDb.Page,System.UInt16,System.Int32,System.Byte[],System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,VelocityDb.TypeInfo.TypeVersion,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.FileOpen(VelocityDb.Database,System.IO.FileAccess,System.String@,System.IO.FileMode,System.Boolean,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.FlushUpdates(VelocityDb.Database,VelocityDb.DatabaseUpdatedPages,System.Boolean@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.ForceDatabaseCacheValidation">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.GetNextPage(System.UInt32@,System.UInt16@,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.getPage(VelocityDb.Database,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.UInt16,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.optimisticLockingValidate(VelocityDb.Database,VelocityDb.TypeInfo.Schema,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.openLocalDatabase(System.UInt32,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,VelocityDb.DatabaseLocations,System.Boolean@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.UpdateDatabase(VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Unstubify(VelocityDb.Page,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.OpenSchema(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Session.SessionNoServerShared.AddToIndexInSeperateThread">
            <summary>
            Allow adding objects to indices to be done in a worker thread instead of in main thread.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionNoServerShared.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Allow object serialization and page writes to happen in worker threads, one per database, instead of in main session thread.
            <see cref="P:VelocityDb.Session.SessionNoServerShared.AddToIndexInSeperateThread"/> must also be enabled for this to work.
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.IndexStringByHashCode">
            <summary>
             Sort string field by a computed hash instead of normal string ordering.
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeInternal`2">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeInternal`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeInternal`2.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeLeaf`2">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.GetKey(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.GetValue(System.Int32,`1@)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.GetValueOid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeaf`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeaf`2.Values">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeaf`2.Cache">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeNodeIterator`2">
            <summary>
            
            </summary>
            <typeparam name="Key">The Type of key element contained</typeparam>
            <typeparam name="Value">The Type of value element contained</typeparam>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeSet`1">
            <summary>
            Represents a collection of objects that is maintained in sorted order. A persistent BTree references its contained objects by Oid instead of direct object references.
            This way, we will only open the referenced objects on demand which reduces memory usage and initial BTree load time.
            </summary>
            <typeparam name="Key">The key type of objects in this BTree</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0},VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates a new BTreeSet
            </summary>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparer">An object comparer. Try using CompareByField</param>
            <param name="session">The session managing this object</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Removes all elements that are in a specified collection from the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.First">
            <summary>
            Returns the first Key object in this set.
            </summary>
            <returns>The first Key in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object and a specified collection share common elements.
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object and other share at least one common element; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper superset of the specified collection
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper superset of other; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper subset of other; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks whether this Tree is a subset of the IEnumerable other
            </summary>
            <param name="other">the other enumerable</param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks whether this Tree has all elements in common with IEnumerable other
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object is equal to other; otherwise, false.</returns> 
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ICollection{Key}#CopyTo(`0[],System.Int32)">
            <summary> 
            Copy items in this hashset to array, starting at arrayIndex
            </summary> 
            <param name="array">array to add items to</param> 
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Iterator">
            <summary>
            Initializes an iterator to find the keys of this set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Last">
            <summary>
            Returns the last Key object in this set.
            </summary>
            <returns>The last Key in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains all elements that are present in either the current object or the specified collection.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. Also makes all other objects part of the BTree transient (but not the Key objects)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains only elements that are present either in the current object or in the specified collection, but not both.
            </summary> 
            <param name="other">the other enumerable</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSet`1.Comparer">
            <summary>
            Gets the VelocityDbComparer object that is used to compare Key objects.
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeSetIterator`1">
            <summary>
            Iterates all the elements of a BTreeSet
            </summary>
            <typeparam name="Key">The type of the elements contained in the BTreeSet</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.Current">
            <summary>
            The iterator current Key object
            </summary>
            <returns>The Ket at the current iterator position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.CurrentComparisonArray">
            <summary>
            The iterator current Key comparison array
            </summary>
            <returns>The Key comparison array at the current iterator position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.GoTo(`0)">
            <summary>
            Positions iterator at Key object or where Key would be inserted if added to the set.
            </summary>
            <param name="key">The object to position iterator near</param>
            <returns>true if an exact match was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.GoTo(`0,System.Byte[])">
            <summary>
            Positions iterator at Key object or where Key would be inserted if added to the set. This function is normally only used internally by VelocityDb.
            </summary>
            <param name="key">The object to position iterator near</param>
            <param name="comparisonArray">Contains bytes used for comparing with other arrays for NodeKeys within the set</param>
            <returns>true if an exact match was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.GoToLast">
            <summary>
            Positions iterator at the last object in the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.MovePrevious">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if the enumerator has reached the position prior to the the start of the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.Next">
            <summary>
            Positions the iterator at the next Key in the set. Only use this one with nullable Key type.
            </summary>
            <returns>The next Key or null if we iterated past the the end of the set.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.Previous">
            <summary>
            Positions the iterator at the previous Key in the set
            </summary>
            <returns>The previous Key or null if we iterated to a postion before the first Key in the set.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.Remove">
            <summary>
            Not yet ready for public use (testing internally first)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.ElementAt(System.Int64)">
            <summary>
            Gets an item at a certain index
            </summary>
            <param name="i">the item index</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSetIterator`1.IndexInTree">
            <summary>
            Gets the index of the current iterator element in the iterated collection
            </summary>
        </member>
        <member name="T:VelocityDb.DatabaseReadLockException">
            <summary>
            Exception thrown when a <see cref="T:VelocityDb.Database"/> level read lock failed.
            </summary>
        </member>
        <member name="T:VelocityDb.InternalErrorException">
            <summary>
            Exception thrown when an internal error was detected. This type of error is most likly due to a bug in VelocityDb.
            </summary>
        </member>
        <member name="T:VelocityDb.MaxNumberOfDatabasesException">
            <summary>
            Exception thrown when trying to create a <see cref="T:VelocityDb.Database"/> but no more Database numbers are available. The Maximum Database number is <see cref="F:System.UInt32.MaxValue"/> or 13 if no valid license is found.
            </summary>
        </member>
        <member name="T:VelocityDb.NullObjectException">
            <summary>
            Exception thrown when an object unexpectedly is null.
            </summary>
        </member>
        <member name="T:VelocityDb.OpenDatabaseException">
            <summary>
            Exception thrown when openeing a <see cref="T:VelocityDb.Database"/> failed.
            </summary>
        </member>
        <member name="T:VelocityDb.OptimisticLockingFailed">
            <summary>
            Exception thrown when a optimistic locking failed due to another transcation having updated a Page or Database.
            </summary>
        </member>
        <member name="T:VelocityDb.PageDeadLockException">
            <summary>
            Exception thrown when a <see cref="T:VelocityDb.Page"/> level lock failed due to a deadlock with another transaction
            </summary>
        </member>
        <member name="T:VelocityDb.PageUpdateLockException">
            <summary>
            Exception thrown when a <see cref="T:VelocityDb.Page"/> level update lock failed.
            </summary>
        </member>
        <member name="T:VelocityDb.PageReadLockException">
            <summary>
            Exception thrown when failing to get a <see cref="T:VelocityDb.Page"/> level read lock.
            </summary>
        </member>
        <member name="T:VelocityDb.UnexpectedException">
            <summary>
            Exception thrown when something unexpected happened and no specific exception exist for it.
            </summary>
        </member>
        <member name="M:VelocityDb.UnexpectedException.#ctor(System.String)">
            <summary>
            Use for unexpected events
            </summary>
            <param name="message">Describe the unexpected event</param>
        </member>
        <member name="T:VelocityDb.UpdateLockFailedException">
            <summary>
            Exception thrown when an update lock failed.
            </summary>
        </member>
        <member name="T:VelocityDb.OidShort">
            <summary>
            The short object identifier containing a 16 bit page part and a 16 bit page part. This is used for short references within a single databases.
            </summary>
        </member>
        <member name="M:VelocityDb.OidShort.Encode(System.UInt16,System.UInt16)">
            <summary>
            Merges a page number and a page number into a single number
            </summary>
            <param name="page">A Page number</param>
            <param name="slot">A slot number</param>
            <returns>The combined Page and page number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.#ctor(System.UInt64)">
            <summary>
            Constructs an OidShort given a 64bit number by using the 32 lower bits
            </summary>
            <param name="id">The full encoded Id from which to construct the OidShort</param>
        </member>
        <member name="M:VelocityDb.OidShort.#ctor(System.UInt32)">
            <summary>
            Constructs an OidShort given a 32bit number
            </summary>
            <param name="id">The page and slot encoded Id from which to construct the OidShort</param>
        </member>
        <member name="M:VelocityDb.OidShort.CompareTo(VelocityDb.OidShort)">
            <summary>
            Compares two OidShort objects by id
            </summary>
            <param name="obj">The object to compare with</param>
            <returns>a negative number if less, 0 if equal or else a positive number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.Compare(VelocityDb.OidShort,VelocityDb.OidShort)">
            <summary>
            Compares by Id
            </summary>
            <param name="aId">First object</param>
            <param name="bId">Second object</param>
            <returns>Comparison value, -1 for less, 0 for equal and 1 for greater than</returns>
        </member>
        <member name="M:VelocityDb.OidShort.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OidShort.Equals(VelocityDb.OidShort,VelocityDb.OidShort)">
            <summary>
            Compares by Id
            </summary>
            <param name="x">First object</param>
            <param name="y">Second object</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.OidShort.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OidShort.GetHashCode(VelocityDb.OidShort)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OidShort.op_Equality(VelocityDb.OidShort,VelocityDb.OidShort)">
            <summary>
            Compares id of two OidShort
            </summary>
            <param name="a">first OidShort</param>
            <param name="b">other OidShort</param>
            <returns>true if id's are ==</returns>
        </member>
        <member name="M:VelocityDb.OidShort.op_Inequality(VelocityDb.OidShort,VelocityDb.OidShort)">
            <summary>
            Compares id of two OidShort
            </summary>
            <param name="a">first OidShort</param>
            <param name="b">other OidShort</param>
            <returns>true if id's are !=</returns>
        </member>
        <member name="M:VelocityDb.OidShort.PageNumber(System.UInt32)">
            <summary>
            Extracts a Page number from a combined Page-Slot number
            </summary>
            <param name="id">Combined Page and page number</param>
            <returns>A Page number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.SamePageAs(System.UInt32,System.UInt32)">
            <summary>
            Determines if two encoded OidShort have the same Page number
            </summary>
            <param name="id"></param>
            <param name="anId"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.OidShort.SlotNumber(System.UInt32)">
            <summary>
            Extracts a page number
            </summary>
            <param name="id">Combined Page and page number</param>
            <returns>A page number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.SlotNumber(System.UInt32,System.UInt16)">
            <summary>
            Sets a page number
            </summary>
            <param name="oid">Combined Page and page number</param>
            <param name="slotNumber">Slot number to use</param>
            <returns>A combined Page number with an updated page number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.AsString(System.UInt32)">
            <summary>
            Builds a string with DatabaseNumber-PageNumber-SlotNumber
            </summary>
            <param name="id">A combined Page number and page number</param>
            <returns>PageNumber-SlotNumber</returns>
        </member>
        <member name="M:VelocityDb.OidShort.ToString">
            <summary>
            Builds a string with PageNumber-SlotNumber
            </summary>
            <returns>PageNumber-SlotNumber</returns>
        </member>
        <member name="P:VelocityDb.OidShort.Id">
            <summary>
            Gets the OidShort encoded as a UInt32
            </summary>
        </member>
        <member name="T:VelocityDb.PageInfo">
            <summary>Each <see cref="T:VelocityDb.Page"/> has a PageInfo that provides info about a page and can be used to turn on/off compression and encryption for a page.
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.s_pageInfoByteCount">
            <summary>
            The size of the <see cref="T:VelocityDb.PageInfo"/> at the start of each <see cref="T:VelocityDb.Page"/>.
            </summary>                              
        </member>
        <member name="P:VelocityDb.PageInfo.Compressed">
            <summary>
            A <see cref="T:VelocityDb.Page"/> can be compressed or not.
            </summary>
            <value>The <see cref="T:System.Boolean"/></value>
        </member>
        <member name="P:VelocityDb.PageInfo.Encryption">
            <summary>
            A <see cref="T:VelocityDb.Page"/> can be encrypted with DES or not.
            </summary>
            <value>The <see cref="T:VelocityDb.PageInfo.encryptionKind"/></value>
        </member>
        <member name="P:VelocityDb.PageInfo.FirstFreeSlot">
            <summary>
            The first available page on the <see cref="T:VelocityDb.Page"/>.
            </summary>
        </member>
        <member name="P:VelocityDb.PageInfo.NoFreeSlotInBetweenInUseSlots">
            <summary>
            Is there no gaps of unused slots in between the in use slots (all contigous in use slots)?
            </summary>
        </member>
        <member name="P:VelocityDb.PageInfo.NumberOfSlots">
            <summary>
            The number of objects/slots on the <see cref="T:VelocityDb.Page"/>.
            </summary>
            <value>The <see cref="T:System.UInt16"/> of objects/slots on the page</value>
        </member>
        <member name="P:VelocityDb.PageInfo.OnDiskSize">
            <summary>
            The byte size of the <see cref="T:VelocityDb.Page"/> when it was last written to disk.
            </summary>
            <value>The <see cref="T:System.UInt32"/> of bytes</value>
        </member>
        <member name="P:VelocityDb.PageInfo.UncompressedSize">
            <summary>
            The byte size of the <see cref="T:VelocityDb.Page"/> when it was last written to disk (before any compression was applied).
            </summary>
            <value>The <see cref="T:System.UInt32"/> of bytes</value>
        </member>
        <member name="P:VelocityDb.PageInfo.ShapeNumber">
            <summary>
            If non 0, all objects on the page have the same Type.
            </summary>
        </member>
        <member name="P:VelocityDb.PageInfo.VersionNumber">
            <summary>
            Each <see cref="T:VelocityDb.Page"/> gets its page version incremented in every transaction where the it is updated.
            </summary>
            <value>The current <see cref="T:System.UInt64"/> page version</value>    
        </member>
        <member name="T:VelocityDb.PageInfo.encryptionKind">
            <summary>
            Use <see cref="F:VelocityDb.PageInfo.encryptionKind.desEncrypted"/> for encrypted pages, set encryption private key in <see cref="T:VelocityDb.DatabaseLocation"/>. Use <see cref="F:VelocityDb.PageInfo.encryptionKind.noEncryption"/> when no encryption is desired.
            Other choices in this enum are not yet publicly available. Other kinds of encryption can be provided upon request. We can even make the interface public allowing application defined encryption. 
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.encryptionKind.noEncryption">
            <summary>No <see cref="T:VelocityDb.Page"/> encryption</summary>
        </member>
        <member name="F:VelocityDb.PageInfo.encryptionKind.desEncrypted">
            <summary>Use DES <see cref="T:VelocityDb.Page"/> encryption</summary>
        </member>
        <member name="F:VelocityDb.PageInfo.encryptionKind.rsaEncrypted2048">
            <summary>Use RSA 2048bits <see cref="T:VelocityDb.Page"/> encryption (not yet made publicly available)</summary>
        </member>
        <member name="F:VelocityDb.PageInfo.encryptionKind.rsaSigned2048">
            <summary>Use RSA 2048bits <see cref="T:VelocityDb.Page"/> signing (not yet made publicly available)</summary>
        </member>
        <member name="T:VelocityDb.PageInfo.compressionKind">
            <summary>
            
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.compressionKind.None">
            <summary>
            No <see cref="T:VelocityDb.Page"/> compression
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.compressionKind.GZip">
            <summary>
            <see cref="T:System.IO.Compression.GZipStream"/> <see cref="T:VelocityDb.Page"/> compression
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.compressionKind.LZ4">
            <summary>
            LZ4 (safe) <see cref="T:VelocityDb.Page"/> compression
               LZ4 - Fast LZ compression algorithm
               Copyright (C) 2011-2012, Yann Collet.
               BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
               Redistribution and use in source and binary forms, with or without
               modification, are permitted provided that the following conditions are met:
               * Redistributions of source code must retain the above copyright
               notice, this list of conditions and the following disclaimer.
               * Redistributions in binary form must reproduce the above
               copyright notice, this list of conditions and the following disclaimer
               in the documentation and/or other materials provided with the distribution.
               THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
               "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
               LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
               A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
               OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
               SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
               LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
               DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
               THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
               (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
               OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
               
            You can contact the author at :
            - LZ4 homepage : http://fastcompression.blogspot.com/p/lz4.html
            - LZ4 source repository : http://code.google.com/p/lz4/
            
            Port to .NET https://lz4net.codeplex.com/
            Copyright (c) 2013, Milosz Krajewski
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.TypeInfo</c> namespace contains classes for Type information of persistently stored data
            </summary>      
        </member>
        <member name="T:VelocityDb.ServerRequests.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.ServerRequests</c> namespace contains classes for interfacing with the VelocityDbServer
            </summary>      
        </member>
        <member name="T:VelocityDb.Session.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Session</c> namespace contains session classes for interfacing with VelocityDb
            </summary>      
        </member>
        <member name="M:VelocityDB.Server.ServerClient.Close(System.Boolean)">
            <summary>
            Aborts and active transaction and closes any network streams.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerClient.AddToIndexInSeperateThread">
            <summary>
            Indexing thread not yet available with <see cref="T:VelocityDB.Server.ServerClient"/>.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerClient.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Write threads not yet available with <see cref="T:VelocityDB.Server.ServerClient"/>.
            </summary>
        </member>
        <member name="T:VelocityDb.Session.ServerClientSession">
            <summary>
            Use this session class when <see cref="T:VelocityDb.Page"/> level locking is required and/or not all <see cref="T:VelocityDb.Database"/>s are local and not reachable by UNC paths.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean,VelocityDb.CacheEnum)">
            <summary>
            Creates a new session.
            </summary>
            <param name="systemDir">The startup location directory path (do not use UNC path). Use path as it is on the host owning the directory. Path can be an absolute (full) path or a path relative to <see cref="F:VelocityDb.Session.SessionBase.s_baseDatabasePath"/>. Change default of <see cref="F:VelocityDb.Session.SessionBase.s_baseDatabasePath"/> on server by starting server with a forth parameter specifying the base path</param>
            <param name="systemHost">Hostname of the host owning the systemDir</param>
            <param name="waitForLockMilliseconds">The desired maximum lock wait time</param>
            <param name="optimisticLocking">Use optimistic locking. With optimistic locking, readers are always permitted and multiple updaters are permitted to update the same Databases/Pages but only the the first transaction to commit or flush an updated Database/Page will be successful in making the commited chane. Other updaters will get an OptimisticLockingException if they try to commit/flush updates to the same Pages/Database.
            See http://en.wikipedia.org/wiki/Optimistic_concurrency_control for further explnation of optimistic locking. If optimistic locking is not enabled then pessimistic locking is used. See: http://en.wikipedia.org/wiki/Concurrency_control </param>
            <param name="inMemoryOnly">Disable all disk access by using this option. Best if used in combination with backup <see cref="T:VelocityDb.DatabaseLocation"/>. See High availability sample application</param>
            <param name="objectCachingDefaultPolicy">Determines default value of <see cref="P:VelocityDb.OptimizedPersistable.Cache"/></param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.Abort">
            <summary>
            Aborts a transcation, it undoes all persistent changes made within the transaction
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.BeginRead(System.Boolean)">
            <summary>
            Start a read only transaction
            </summary>
            <param name="doRecoveryCheck">If true a recovery check is done, otherwise recovery check is bypassed.</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.BeginReadWithEvents(System.Boolean)">
            <summary>
            Start a read only transaction and gets a list of created/updated objects as subscribed to by this session
            </summary>
            <param name="doRecoveryCheck">If true a recovery check is done, otherwise recovery check is bypassed.</param>
            <returns>list of object Oid of objects updated by other sessions</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.BeginUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.BeginUpdateWithEvents(System.Boolean)">
            <summary>
            Starts a transaction that may be creating new persistent data and/or updating persistent data and gets a list of created/updated objects as subscribed to by this session
            </summary>
            <param name="doRecoveryCheck">If true a recovery check is done, otherwise recovery check is bypassed.</param>
            <returns>list of object Oid of objects updated by other sessions</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.ClearServerCache">
            <summary>
            Used as an aid when debugging server data, internal use, avoid using for now.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.Close(System.Boolean)">
            <summary>
            Aborts any active transaction and closes any master NetworkStream
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.Commit(System.Boolean,System.Boolean)">
            <summary>
            Commits a transaction. Releases all locks and makes all persistent changes permanent.
            </summary>
            <param name="doRecoveryCheck">Set to false if you want to avoid a recovery check. (not recommended to disable recovery check)</param>
            <param name="isRestore">Set to true if this is a commit of a database restore</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.CopyAllDatabasesTo(System.String)">
            <summary>
            Copies all databases to a selected directory on the local host.
            </summary>
            <param name="directory">Path to a directory</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.DeleteDatabase(VelocityDb.Database,System.Collections.Generic.SortedSet{VelocityDb.Database})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.DeleteLocation(VelocityDb.DatabaseLocation)">
            <summary>
            Deletes a DatabaseLocation, location must first mot have any Databases in it
            </summary>
            <param name="location">The DatabaseLocation to delete</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.FlushUpdates">
            <summary>
            Send all updated pages to the server(s) managing those pages, freeing up memory in client.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.FlushUpdatesServers">
            <summary>
            Make servers Write all updated data. This may free up some memory on the servers. Only effects sessions using VelocityDbServer(s)
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.FlushPage(VelocityDb.Page,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},VelocityDb.DatabaseUpdatedPages,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.getPage(VelocityDb.Database,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.UInt16,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.readSlotFromDisk(System.UInt16,VelocityDb.Page)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.OpenLocationDatabases(VelocityDb.DatabaseLocation,System.Boolean)">
            <summary>
            Opens all the databases in a given location
            </summary>
            <param name="location">The location for which to open databases</param>
            <param name="update">Shall each database be opened for update?</param>
            <returns>A list of opened databases</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.OpenAllDatabases(System.Boolean)">
            <summary>
            Open all databases
            </summary>
            <param name="update">Open for update?</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.InUseNumberOfPages(VelocityDb.Database)">
            <summary>
            Gets the number of pages currently in use by a Database
            </summary>
            <param name="db">The Database to request info about</param>
            <returns>The number of pages currently in use</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.SubscribeToChanges(System.Type,System.String)">
            <summary>
            Subscribe to comitted database changes of instances of a type when an an optional property evaluates to true.
            </summary>
            <param name="aType">The type you are intrested in beeing notified about when persistent instances changes within a database.</param>
            <param name="notifyIfTrueProperty">The name of a property part of the type specified as aType, this should be a boolean property. When property returns true, a change notification is send otherwise no notification is send. Leave as null to get a notification any time any instance of the selected type changes</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.GetChangeEvents">
            <summary>
            Get all subscribed to change events.
            </summary>
            <returns>A List of Oid</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.NewDatabase(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <summary>
            Create a new Database with a given database number
            </summary>
            <param name="dbNum">Database number of the database to create</param>
            <param name="megaBytesPresize">Optional presize of Datafile in MB</param>
            <param name="name">Optional name of the database to create</param>
            <returns>The newly created Database or throws and exception if the Database already exist</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.NewLocation(VelocityDb.DatabaseLocation)">
            <summary>
            Creates a new DatabaseLocation or updates existing ones
            </summary>
            <param name="location">The input location</param>
            <returns>The new DatabaseLocation or an existing one</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.OpenDatabase(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Opens a Database
            </summary>
            <param name="dbNum">The Database number of the database to open</param>
            <param name="update">Open the Database for update?</param>
            <param name="signalError">Signal errors if errors found when opening the Database?</param>
            <returns>The opened Database</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.RestoreFrom(VelocityDb.DatabaseLocation,System.DateTime)">
            <summary>
            Restores Databases and pages from a backup DatabaseLocation. Existing data will be merged with the restored data unless existing Databases to restore are deleted before the restore.
            </summary>
            <param name="backupLocation">The location to restore from</param>
            <param name="upToTime">Restore location up to a given DateTime. Data backed up after this time will not be restored.</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.UpdateDatabase(VelocityDb.Database)">
            <summary>
            Request an update lock on a database
            </summary>
            <param name="db">The database to update</param>
            <returns>true if Database was updated, otherwise throws an exception</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.UnsubscribeToChanges(System.Type,System.String)">
            <summary>
            Unsubscribe to committed database changes of instances of a type when an optional property evaluates to true.
            </summary>
            <param name="aType">The type you are no longer interested in being notified about when persistent instances changes within a database.</param>
            <param name="notifyIfTrueProperty">The name of a property part of the type specified as aType, this should be a Boolean property.</param>
        </member>
        <member name="P:VelocityDb.Session.ServerClientSession.AddToIndexInSeperateThread">
            <summary>
            Indexing thread not yet available with <see cref="T:VelocityDb.Session.ServerClientSession"/>.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.ServerClientSession.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Write threads not yet available with <see cref="T:VelocityDb.Session.ServerClientSession"/>.
            </summary>
        </member>
        <member name="T:VelocityDb.Oid">
            <summary>
            The object identifier containing a 32 bit database part, a 16 bit page part and a 16 bit page part. These parts are combined into a 64bit unsigned number <see cref="P:VelocityDb.OptimizedPersistable.Id"/>.
            </summary>
        </member>
        <member name="M:VelocityDb.Oid.#ctor(System.UInt64)">
            <summary>
            Creates an Oid
            </summary>
            <param name="id">Higest 32 bit is Database number, then follows the 16 bit Page number and the 16 bit page number</param>
        </member>
        <member name="M:VelocityDb.Oid.#ctor(System.UInt32,VelocityDb.OidShort)">
            <summary>
            Creates an Oid given a Database number and an OidShort (page-slot)
            </summary>
            <param name="dbId">The Database number</param>
            <param name="pageSlotId">The page and slot numbers as an OidShort</param>
        </member>
        <member name="M:VelocityDb.Oid.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates an Oid given a Database number and an OidShort (page-slot)
            </summary>
            <param name="dbId">The Database number</param>
            <param name="pageSlotId">The page and slot numbers as a UInt32</param>
        </member>
        <member name="M:VelocityDb.Oid.Encode(System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Constructs a UInt64 from the components Database number, Page number and page number
            </summary>
            <param name="db">A Database number</param>
            <param name="page">A Page number</param>
            <param name="slot">A slot number</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Oid.Encode(System.UInt32,System.UInt32)">
            <summary>
            Constructs a UInt64 from the components Database number and an encoded UInt32 containg page and slot number
            </summary>
            <param name="db">Database number</param>
            <param name="pageSlot">Encoded page and slot number</param>
            <returns>A number containing the full object identifier</returns>
        </member>
        <member name="M:VelocityDb.Oid.CompareTo(System.Object)">
            <summary>
            Compares two Oid objects by id
            </summary>
            <param name="obj">The object to compare with</param>
            <returns>a negative number if less, 0 if equal or else a positive number</returns>
        </member>
        <member name="M:VelocityDb.Oid.GetHashCode">
            <summary>
            Computes a hash code based on Id.
            </summary>
        </member>
        <member name="M:VelocityDb.Oid.DatabaseNumber(System.UInt64)">
            <summary>
            Extracts the Database number
            </summary>
            <param name="id">The combined Database number, Page number and page number</param>
            <returns>The Database number</returns>
        </member>
        <member name="M:VelocityDb.Oid.PageNumber(System.UInt64)">
            <summary>
            Extracts the Page number
            </summary>
            <param name="id">The combined Database number, Page number and page number</param>
            <returns>The Page number</returns>
        </member>
        <member name="M:VelocityDb.Oid.SamePageAs(System.UInt64,System.UInt64)">
            <summary>
            Find out if Page number is the same in two different UInt64 numbers (encoded Oid)
            </summary>
            <param name="id">A combined Database number, Page number and page number</param>
            <param name="anId">Another combined Database number, Page number and skot number</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Oid.SlotNumber(System.UInt64)">
            <summary>
            Extracts the page number
            </summary>
            <param name="id">A combined Database number, Page number and page number</param>
            <returns>A page number</returns>
        </member>
        <member name="M:VelocityDb.Oid.SlotNumber(System.UInt64,System.UInt16)">
            <summary>
            Sets the page number
            </summary>
            <param name="oid">A combined Database number, Page number and page number</param>
            <param name="slotNumber">A slot number to use in the combined UInt64 value</param>
            <returns>A combined Database number, Page number and an updated page number</returns>
        </member>
        <member name="M:VelocityDb.Oid.AsString(System.UInt64)">
            <summary>
            Builds a string with DatabaseNumber-PageNumber-SlotNumber
            </summary>
            <param name="id">A combined Database number, Page number and page number</param>
            <returns>DatabaseNumber-PageNumber-SlotNumber</returns>
        </member>
        <member name="M:VelocityDb.Oid.ToString">
            <summary>
            Builds a string with DatabaseNumber-PageNumber-SlotNumber
            </summary>
            <returns>DatabaseNumber-PageNumber-SlotNumber</returns>
        </member>
        <member name="M:VelocityDb.Oid.op_GreaterThan(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares the id of two Oid's
            </summary>
            <param name="a">First Oid</param>
            <param name="b">Second Oid</param>
            <returns>a.id > b.id</returns>
        </member>
        <member name="M:VelocityDb.Oid.op_LessThanOrEqual(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares the id of two Oid's
            </summary>
            <param name="a">First Oid</param>
            <param name="b">Second Oid</param>
            <returns>a.id less or equal to b.id</returns>
        </member>
        <member name="M:VelocityDb.Oid.op_GreaterThanOrEqual(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares the id of two Oid's
            </summary>
            <param name="a">First Oid</param>
            <param name="b">Second Oid</param>
            <returns>a.id >= b.id</returns>
        </member>
        <member name="M:VelocityDb.Oid.op_LessThan(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares the id of two Oid's
            </summary>
            <param name="a">First Oid</param>
            <param name="b">Second Oid</param>
            <returns>a.id less than b.id</returns>
        </member>
        <member name="P:VelocityDb.Oid.Id">
            <summary>
            Gets the underlaying UInt64 that contains the encoded Oid.
            </summary>
        </member>
        <member name="P:VelocityDb.Oid.IdShort">
            <summary>
            Gets the page-slot parts of the underlaying UInt64 that contains the encoded Oid.
            </summary>
        </member>
        <member name="P:VelocityDb.Oid.Database">
            <summary>
            Gets the database number part of the Oid
            </summary>
        </member>
        <member name="P:VelocityDb.Oid.Page">
            <summary>
            Gets the page number part of the Oid
            </summary>
        </member>
        <member name="P:VelocityDb.Oid.Slot">
            <summary>
            Gets the slot number part of the Oid
            </summary>
        </member>
        <member name="T:VelocityDb.Page">
            <summary>Each <see cref="P:VelocityDb.Page.Database"/> consist of a number of variable sized pages. 
            A page can be compressed and may be encrypted and contains one or more objects. 
            Page compression is controlled by the <see cref="T:VelocityDb.DatabaseLocation"/> of the <see cref="P:VelocityDb.Page.Database"/> containing a page.
            Each page has a <see cref="P:VelocityDb.Page.PageInfo"/> that provides info about a page and can be updated to turn on/off compression and encryption for a specific page.
            </summary>
        </member>
        <member name="M:VelocityDb.Page.StringToByteArray(System.String)">
            <summary>
            Converts a string into an UTF8 encoded byte array
            </summary>
            <param name="str">a string to convert</param>
            <returns>a UTF8 encoding</returns>
        </member>
        <member name="M:VelocityDb.Page.CompareTo(VelocityDb.Page)">
            <summary>
            Compares Pages by PageNumber
            </summary>
            <param name="otherPage">The Page to compare with</param>
            <returns>-1 if this PageNumber is less than obj.PageNumber, 0 if equal and 1 if greater than</returns>
        </member>
        <member name="M:VelocityDb.Page.PageShortIds">
            <summary>
            Enumrates all objects short ids on this Page
            </summary>
            <returns>Enumartion of all slot short ids on this Page</returns>
        </member>
        <member name="M:VelocityDb.Page.GetEnumerator">
            <summary>
            Enumrates all objects on this Page
            </summary>
            <returns>Enumartion of all slots on this Page</returns>
        </member>
        <member name="M:VelocityDb.Page.Slot(System.UInt64,System.Boolean,VelocityDb.Session.SessionBase,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,VelocityDb.TypeInfo.TypeVersion)">
            <summary>
            Retrieves an object from persistent storage
            </summary>
            <param name="oid">Id of object to retrieve</param>
            <param name="openRefs">Shall we open references from this object?</param>
            <param name="session">The active session</param>
            <param name="schema">The active schema</param>
            <param name="iteration">Is this called as part of an iteraration</param>
            <param name="toLoadMembers">List of members to load</param>
            <param name="graphDepth">The current load grapg depth</param>
            <param name="graphDepthToLoad">Max graph depth to load</param>
            <param name="shape">The type version of the object to retrieve</param>
            <returns>The retrieved object</returns>
        </member>
        <member name="M:VelocityDb.Page.UnpersistObject(VelocityDb.IOptimizedPersistable)">
            <summary>
            Use this as an alternative to <see cref="M:VelocityDb.OptimizedPersistable.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)"/> or when using the interface class <see cref="T:VelocityDb.IOptimizedPersistable"/>
            </summary>
            <param name="pObj">The object to be unpersisted</param>
        </member>
        <member name="M:VelocityDb.Page.DeleteObject(System.UInt64)">
            <summary>
            Use this as an alternative to <see cref="M:VelocityDb.OptimizedPersistable.Unpersist(VelocityDb.Session.SessionBase,System.Boolean)"/> or when using the interface class <see cref="T:VelocityDb.IOptimizedPersistable"/>
            </summary>
            <param name="id">The object Id of the object to be deleted</param>
        </member>
        <member name="M:VelocityDb.Page.ToString">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Page.PageInfo">
            <summary>
            Gets the PageInfo for this Page
            </summary>
        </member>
        <member name="P:VelocityDb.Page.IsUpdated">
            <summary>
            Is this Page updated?
            </summary>
        </member>
        <member name="P:VelocityDb.Page.Id">
            <summary>
            The Oid (encoded as UInt64) of this page
            </summary>
        </member>
        <member name="P:VelocityDb.Page.Oid">
            <summary>
            The Oid of this page
            </summary>
        </member>
        <member name="P:VelocityDb.Page.ShortId">
            <summary>
            The OidShort (encoded as UInt32) of this page
            </summary>   
        </member>
        <member name="P:VelocityDb.Page.OnlyStub">
            <summary>
            Is this Page fully read into memory or just the PageInfo?
            </summary>
        </member>
        <member name="P:VelocityDb.Page.Database">
            <summary>
            The <see cref="P:VelocityDb.Page.Database"/> of this Page.
            </summary>
        </member>
        <member name="P:VelocityDb.Page.PageNumber">
            <summary>
            The page number of this Page in the containing <see cref="P:VelocityDb.Page.Database"/>
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerSession.BeginRead(System.Boolean)">
            <summary>
            Transaction control, begin a read only transaction
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerSession.AddToIndexInSeperateThread">
            <summary>
            Indexing thread not yet available with <see cref="T:VelocityDB.Server.ServerSession"/>.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerSession.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Write threads not yet available with <see cref="T:VelocityDB.Server.ServerSession"/>.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerSession.InTransaction">
            <summary>
            Indicates if we are within an active transaction.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerSlaveSession.InTransaction">
            <summary>
            Indicates if we are within an active transaction.
            </summary>
        </member>
        <member name="T:VelocityDb.Session.TypeExtensions">
            <summary>
            Some extensions to Type
            </summary>
        </member>
        <member name="M:VelocityDb.Session.TypeExtensions.ToGenericTypeString(System.Type)">
            <summary>
            Gets a string representation of a Type corresponding to how it looks in C# code
            </summary>
            <param name="t">The type to get the string for</param>
            <returns>A string representation of a type</returns>
        </member>
        <member name="T:VelocityDb.Collection.SortedMap`2">
            <summary>
            A sorted map
            </summary>
            <typeparam name="Key">Element key type</typeparam>
            <typeparam name="Value">Element value type</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedMap`2.#ctor(System.Int32)">
            <summary>
            Constructs a new map
            </summary>
            <param name="capacity">Presizes internal list to a requested size</param>   
        </member>
        <member name="M:VelocityDb.Collection.SortedMap`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a new map with a given comparator
            </summary>
            <param name="comparer">The comaparator is referenced by a OidShort so it must exist within the same Database as the SortedMap</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMap`2.Update(System.Boolean)">
            <summary>
            Update this object but don't update indexes since this object type never is part of an index
            </summary>
            <param name="disableFlush">If true, do not flush pages as a possible side affect</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMap`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.SortedMap`2.Comparer">
            <summary>
            Gets the Key comparator of the map
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMap`2.Keys">
            <summary>
            Gets the internal list of NodeKeys
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMap`2.Values">
            <summary>
            Gets the internal list of NodeValues
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.SortedSetAny`1">
            <summary>
            A sorted set of objects of any Type (not just subclasses of <see cref="T:VelocityDb.OptimizedPersistable"/>
            </summary>
            <typeparam name="Key">The type of lement for this list.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.#ctor">
            <summary>
            Constructs the set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ICollection{Key}#CopyTo(`0[],System.Int32)">
            <summary> 
            Copy items in this hashset to array, starting at arrayIndex
            </summary> 
            <param name="array">array to add items to</param> 
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.#ctor(System.Int32)">
            <summary>
            Constructs a set with a given initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a set with a given object comparator
            </summary>
            <param name="comparer">A comparator of Key objects</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains all elements that are present in either the current object or the specified collection.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Removes all elements that are in a specified collection from the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains only elements that are present either in the current object or in the specified collection, but not both.
            </summary> 
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks whether this Tree has all elements in common with IEnumerable other
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object is equal to other; otherwise, false.</returns> 
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object and a specified collection share common elements.
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object and other share at least one common element; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper superset of the specified collection
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper superset of other; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks whether this Tree is a subset of the IEnumerable other
            </summary>
            <param name="other">the other enumerable</param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper subset of other; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ICollection{Key}#Add(`0)">
            <summary>
            Add item to this sorted set.
            </summary>
            <param name="item">item to add</param> 
        </member>
        <member name="P:VelocityDb.Collection.SortedSetAny`1.Comparer">
            <summary>
            Gets the set comparator
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetAny`1.Keys">
            <summary>
            Gets the internal Key list of the set
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.UniqueConstraint">
            <summary>
             Unique index values can be required by using the UniqueConstraint attribute
            </summary>
        </member>
        <member name="M:VelocityDb.Indexing.UniqueConstraint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:VelocityDb.UseOidShort">
            <summary>
            Indicates that every field or selected fields of a serializable class should be referenced using a OidShort instead of a full Oid.
            This means that the referenced object is located in the same database as the object containing the reference.
            A ShortOid uses less space and references are not tied to a certain database number.
            </summary>
        </member>
        <member name="M:VelocityDb.UseOidShort.#ctor">
            <summary>
            Creates the attribute indicating use of OidShort (page + page)
            </summary>
        </member>
        <member name="T:VelocityDb.WeakIOptimizedPersistableReference`1">
            <summary>When a persistent object is opened, all its referenced objects are opened as well. In order to limit the number of opened objects, you need to use this class.
            A reference from an instance of this class will not cause the referenced object to be opened. It will be opened when you ask for it.
            <typeparam name="T">The <see cref="T:System.Type"/> of the weak referenced object, must be <see cref="T:VelocityDb.OptimizedPersistable"/></typeparam>
            </summary>
        </member>
        <member name="T:VelocityDb.WeakIOptimizedPersistableReferenceBase">
            <summary>This is the base class for all weak references.</summary>
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReferenceBase.Id">
            <summary>
            Id of weak referenced object
            </summary>
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReferenceBase.ShortId">
            <summary>
            Short reference ID of weak reference
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.#ctor(System.UInt64)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object
            <param name="oid">Can be created using Oid.Encode(databaseNumber, pageNumber, pageNumber)</param>
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.#ctor(VelocityDb.Oid)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object
            <param name="oid">Can be created using Oid.Encode(databaseNumber, pageNumber, pageNumber)</param>
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.#ctor(`0)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object. This object must be persisted before adding as a weak reference.
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.GetTarget(System.Boolean,VelocityDb.Session.SessionBase)">
            <summary>
            Gets the persistent object referenced by the weak reference
            </summary>
            <param name="update">Open the persistent object for update?</param>
            <param name="session">The session managing the persistent object</param>
            <returns>The object referenced by this weak reference</returns>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.ToString">
            <summary>Append the Oid of the referenced object to the string.</summary>
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReference`1.Id">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReference`1.ShortId">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.WeakIOptimizedPersistableReferenceX`1">
            <summary>Deprecated, use WeakIOptimizedPersistableReference instead (so name conflict can be avoided)
            When a persistent object is opened, all its referenced objects are opened as well. In order to limit the number of opened objects, you need to use this class.
            A reference from an instance of this class will not cause the referenced object to be opened. It will be opened when you ask for it.
            <typeparam name="T">The <see cref="T:System.Type"/> of the weak referenced object, must be <see cref="T:VelocityDb.OptimizedPersistable"/></typeparam>
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.#ctor(System.UInt64)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object
            <param name="oid">Can be created using Oid.Encode(databaseNumber, pageNumber, pageNumber)</param>
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.#ctor(VelocityDb.Oid)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object
            <param name="oid">Can be created using Oid.Encode(databaseNumber, pageNumber, pageNumber)</param>
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.#ctor(`0)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object. This object must be persisted before adding as a weak reference.
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.GetTarget(System.Boolean,VelocityDb.Session.SessionBase)">
            <summary>
            Gets the persistent object referenced by the weak reference
            </summary>
            <param name="update">Open the persistent object for update?</param>
            <param name="session">The session managing the persistent object</param>
            <returns>The object referenced by this weak reference</returns>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.ToString">
            <summary>Append the Oid of the referenced object to the string.</summary>
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReferenceX`1.Id">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReferenceX`1.ShortId">
            <inheritdoc />
        </member>
    </members>
</doc>
